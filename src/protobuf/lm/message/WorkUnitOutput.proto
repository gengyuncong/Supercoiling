/*
 * Copyright 2012-2019 Johns Hopkins University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Developed by: Roberts Group
 *               Johns Hopkins University
 *               http://biophysics.jhu.edu/roberts/
 *
 * Author(s): Elijah Roberts, Max Klein
 */
syntax = "proto2";
package lm.message;

import "lm/io/BarrierCrossingTimes.proto";
import "lm/io/ConcentrationsTimeSeries.proto";
import "lm/io/DegreeAdvancementTimeSeries.proto";
import "lm/io/FirstPassageTimes.proto";
import "lm/io/OrderParameterFirstPassageTimes.proto";
import "lm/io/LatticeTimeSeries.proto";
import "lm/io/OrderParameterTimeSeries.proto";
import "lm/io/SpeciesCounts.proto";
import "lm/io/SpeciesTimeSeries.proto";
import "lm/io/StochasticProcessTimeSeries.proto";

message WorkUnitOutput {
    optional bool has_output                                                           = 1 [default=false];

    // some output options that can be set independently for each work unit
    optional string record_name_prefix                                                 = 2;
    optional bool condense_output                                                      = 3 [default=false];

    // trajectory state/time series outputs
    optional lm.io.ConcentrationsTimeSeries concentrations_time_series                 = 11;
    optional lm.io.DegreeAdvancementTimeSeries degree_advancement_time_series          = 12;
    optional lm.io.LatticeTimeSeries lattice_time_series                               = 13;
    optional lm.io.OrderParameterTimeSeries order_parameter_time_series                = 14;
    optional lm.io.SpeciesTimeSeries species_time_series                               = 16;
    optional lm.io.StochasticProcessTimeSeries stochastic_process_time_series          = 17;

    // event-tracking outputs
    repeated lm.io.BarrierCrossingTimes barrier_crossing_times                         = 20;
    repeated lm.io.FirstPassageTimes first_passage_times                               = 21;
    repeated lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 22;
}
