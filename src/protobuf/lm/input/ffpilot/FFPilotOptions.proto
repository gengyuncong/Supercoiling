/*
 * Copyright 2012-2019 Johns Hopkins University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Developed by: Roberts Group
 *               Johns Hopkins University
 *               http://biophysics.jhu.edu/roberts/
 *
 * Author(s): Elijah Roberts, Max Klein
 */

syntax = "proto2";
package lm.input.ffpilot;

import "robertslab/pbuf/NDArray.proto";

message FFPilotOptions {

    /**
     * Global options.
     */

    // Global error goal for the ffpilot simulation.
    optional double error_goal                                  = 1 [default=.05];

    // Confidence level that is associated with the error goal.
    optional double error_goal_confidence                       = 2 [default=0.95];

    // The order parameter to use in the ffpilot algorithm.
    optional int32 order_parameter_index                        = 3 [default=0];

    // The tiling to use in the ffpilot algorithm.
    optional int32 tiling_index                                 = 4 [default=0];

    // Whether trajectory output should be saved.
    optional bool trajectory_output                             = 5 [default=false];

    // The maximum number of trajectories to send per work unit.
    optional uint64 max_trajectories_per_work_unit              = 6 [default=10000];

    // The fallack method to use for the ffpilot simulation.
    enum FallbackMethod {
        FALLBACK_TILING_EDGE    = 0;
        FALLBACK_BASIN          = 1;
    }
    optional FallbackMethod fallback_method                      = 7 [default=FALLBACK_TILING_EDGE];

    /**
     * Options for phase zero.
     */

    // The basins for starting the phase zero trajectories.
    required robertslab.pbuf.NDArray phase_zero_basins              = 100;    //2D; rows=basins,cols=species; type=int32

    // The position of the reflecting barrier along the order parameter in phase zero, near the transition point.
    optional double phase_zero_transition_barrier                   = 101;

    // The number of phase zero crossings to discard before collecting data.
    optional int32 phase_zero_equilibration_crossings               = 102 [default=10];



    /**
     * Options for phase n.
     */



    /**
     * Options for the pilot stage.
     */

    // The number of samples to take during each phase in a pilot stage. If zero, this is automatically determined based on error goal/confidence.
    optional int32 pilot_stage_crossings                            = 300 [default=1000];

    // Skip the pilot stage.
    optional bool pilot_skip                                        = 301 [default = false];



    /**
     * Options for the production stage.
     */

    // Trajectory counts for the production phase, only used if skip_pilot is true.
    optional robertslab.pbuf.NDArray prod_trajectory_counts         = 401;      //2D; rows=basins,cols=tilings; type=uint64

    // Skip the production stage.
    optional bool prod_skip                                         = 302 [default = false];

    /**
     * Options for optimization.
     */

    // The minimum number of samples to take during each phase in a production stage.
    optional uint64 optimize_minimum_trajectories                   = 900 [default=1000];

    // The oversampling multipliersf for the phases.
    optional robertslab.pbuf.NDArray optimize_sampling_multipliers  = 901; //2D; rows=basins,cols=tilings; type=double

    // Whether to optimize based on number of runs or on computational cost.
    optional bool optimize_minimize_cost                            = 902 [default=true];

}
