/*
 * Copyright 2019 Johns Hopkins University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Developed by: Roberts Group
 *               Johns Hopkins University
 *               http://biophysics.jhu.edu/roberts/
 *
 * Author(s): Elijah Roberts
 */

syntax = "proto2";
package lm.types;

message TrajectoryBarrier {

    enum BarrierType {
        SPECIES                                 = 0;
        ORDER_PARAMETER                         = 1;
    }

    /*
     * Type is used in conjunction with type_arg to determine what simulation value will be checked when the barrier is invoked
     *     - type==SPECIES: type_arg is the index of the species checked
     *     - type==ORDER_PARAMETER: type_arg is the index of the order parameter value checked
     */
    required BarrierType type                   = 1;
    optional uint32 type_arg                    = 2;


    enum BarrierBehavior {
        REFLECTING                              = 0;
        REFLECTING_DECREASING                   = 1;
        REFLECTING_INCREASING                   = 2;
        TRACKING                                = 3;
        TRACKING_DECREASING_INCLUSIVE           = 4;
        TRACKING_INCREASING_INCLUSIVE           = 5;
        TRACKING_DECREASING_EXCLUSIVE           = 6;
        TRACKING_INCREASING_EXCLUSIVE           = 7;
    }

    required BarrierBehavior behavior           = 11;
    optional double behavior_value_double       = 12 [default=0.0];
    optional int64 behavior_value_int           = 13 [default=0];
}

message TrajectoryBarriers {
    repeated TrajectoryBarrier barrier          = 1;
}
