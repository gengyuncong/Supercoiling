/*
 * University of Illinois Open Source License
 * Copyright 2012-2016 Roberts Group,
 * All rights reserved.
 *
 * Developed by: Roberts Group
 *                  Johns Hopkins University
 *                  http://biophysics.jhu.edu/roberts/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the Software), to deal with
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to
 * do so, subject to the following conditions:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimers.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimers in the documentation
 * and/or other materials provided with the distribution.
 *
 * - Neither the names of the Roberts Group, Johns Hopkins University,
 * nor the names of its contributors may be used to endorse or
 * promote products derived from this Software without specific prior written
 * permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS WITH THE SOFTWARE.
 *
 * Author(s): Elijah Roberts, Max Klein
 */
syntax = "proto2";
package lm.io.ffpilot;

message FFPilotPhaseOutput {
    optional int64 phase_id                               = 1;
    optional int64 basin_id                                     = 2;
    optional uint64 tiling_id                                   = 3;
    optional uint64 first_trajectory_id                         = 4;
    optional uint64 final_trajectory_id                         = 5;

    repeated StartPoint start_points                            = 11;

    optional uint64 successful_trajectories_launched_count      = 21 [default=0];
    optional double successful_trajectories_launched_total_time = 22 [default=0.0];
    optional uint64 failed_trajectories_launched_count          = 23 [default=0];
    optional double failed_trajectories_launched_total_time     = 24 [default=0.0];

    // TODO: currently start_points is uniplemented, so we're using successful_trajectory_end_points as a kludge in the meantime. eventually this field will be removed
    repeated EndPoint successful_trajectory_end_points          = 101;

    optional double variance                                    = 201;
}

message FFPilotPhaseOutputList {
    repeated FFPilotPhaseOutput ffpilot_phase_outputs               = 1;
}

message StartPoint {
    repeated int32 species_coordinates                         = 1 [packed=true];
    optional uint64 count                                      = 2 [default=0];
    repeated double times                                      = 3 [packed=true];
    repeated uint64 degree_advancements                        = 4 [packed=true];

    optional uint64 successful_trajectories_launched_count      = 11 [default=0];
    optional double successful_trajectories_launched_total_time = 12 [default=0.0];
    optional uint64 failed_trajectories_launched_count          = 13 [default=0];
    optional double failed_trajectories_launched_total_time     = 14 [default=0.0];

    repeated EndPoint successful_trajectory_end_points          = 21;
    repeated EndPoint failed_trajectory_end_points              = 22;
}

message EndPoint {
    repeated int32 species_coordinates              = 1 [packed=true];
    optional uint64 count                           = 2 [default=0];
    repeated double times                           = 3 [packed=true];
    repeated uint64 degree_advancements             = 4 [packed=true];
}
