/*
 * Copyright 2016 Johns Hopkins University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Developed by: Roberts Group
 *               Johns Hopkins University
 *               http://biophysics.jhu.edu/roberts/
 *
 * Author(s): Elijah Roberts, Max Klein
 */
syntax = "proto2";
package robertslab.pbuf;

message NDArray {
    enum ArrayOrder {
        ROW_MAJOR             = 0;    // Last dimension contiguous.
        COLUMN_MAJOR          = 1;    // First dimension contiguous
        IMPL_ORDER            = 2;    // Ordering specific to the implementation.
    }

    enum ByteOrder {
        LITTLE_ENDIAN_ORDER   = 0;
        BIG_ENDIAN_ORDER      = 1;
    }

    // the names of the DataType enum are chosen such that they can be parsed directly by np.dtype()
    enum DataType {
        int8	       = 0;    // Byte (-128 to 127)
        int16	       = 1;    // Integer (-32768 to 32767)
        int32	       = 2;    // Integer (-2147483648 to 2147483647)
        int64	       = 3;    // Integer (-9223372036854775808 to 9223372036854775807)
        uint8	       = 4;    // Unsigned integer (0 to 255)
        uint16	       = 5;    // Unsigned integer (0 to 65535)
        uint32	       = 6;    // Unsigned integer (0 to 4294967295)
        uint64	       = 7;    // Unsigned integer (0 to 18446744073709551615)
        float16	       = 8;    // Half precision float: sign bit, 5 bits exponent, 10 bits mantissa
        float32	       = 9;    // Single precision float: sign bit, 8 bits exponent, 23 bits mantissa
        float64	       = 10;   // Double precision float: sign bit, 11 bits exponent, 52 bits mantissa
        complex64      = 11;   // Complex number, represented by two 32-bit floats (real and imaginary components)
        complex128     = 12;   // Complex number, represented by two 64-bit floats (real and imaginary components)
        S8             = 13;   // String, 1 byte for every character, 8 bytes total
        S16            = 14;   // String, 1 byte for every character, 16 bytes total
        S32            = 15;   // String, 1 byte for every character, 32 bytes total
        S64            = 16;   // String, 1 byte for every character, 64 bytes total
        S128           = 17;   // String, 1 byte for every character, 128 bytes total
    }
        
    optional ArrayOrder array_order                 = 1 [default = ROW_MAJOR];
    optional ByteOrder byte_order                   = 2 [default = LITTLE_ENDIAN_ORDER];
    required DataType data_type                     = 3;
    repeated uint32 shape                           = 4;
    required bytes data                             = 5;
    optional bool compressed_deflate                = 6 [default = false];
    optional bool compressed_snappy                 = 7 [default = false];
}
