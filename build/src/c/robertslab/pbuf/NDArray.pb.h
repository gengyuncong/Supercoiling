// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robertslab/pbuf/NDArray.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robertslab_2fpbuf_2fNDArray_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robertslab_2fpbuf_2fNDArray_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robertslab_2fpbuf_2fNDArray_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robertslab_2fpbuf_2fNDArray_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto;
namespace robertslab {
namespace pbuf {
class NDArray;
class NDArrayDefaultTypeInternal;
extern NDArrayDefaultTypeInternal _NDArray_default_instance_;
}  // namespace pbuf
}  // namespace robertslab
PROTOBUF_NAMESPACE_OPEN
template<> ::robertslab::pbuf::NDArray* Arena::CreateMaybeMessage<::robertslab::pbuf::NDArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace robertslab {
namespace pbuf {

enum NDArray_ArrayOrder : int {
  NDArray_ArrayOrder_ROW_MAJOR = 0,
  NDArray_ArrayOrder_COLUMN_MAJOR = 1,
  NDArray_ArrayOrder_IMPL_ORDER = 2
};
bool NDArray_ArrayOrder_IsValid(int value);
constexpr NDArray_ArrayOrder NDArray_ArrayOrder_ArrayOrder_MIN = NDArray_ArrayOrder_ROW_MAJOR;
constexpr NDArray_ArrayOrder NDArray_ArrayOrder_ArrayOrder_MAX = NDArray_ArrayOrder_IMPL_ORDER;
constexpr int NDArray_ArrayOrder_ArrayOrder_ARRAYSIZE = NDArray_ArrayOrder_ArrayOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDArray_ArrayOrder_descriptor();
template<typename T>
inline const std::string& NDArray_ArrayOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NDArray_ArrayOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NDArray_ArrayOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NDArray_ArrayOrder_descriptor(), enum_t_value);
}
inline bool NDArray_ArrayOrder_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NDArray_ArrayOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NDArray_ArrayOrder>(
    NDArray_ArrayOrder_descriptor(), name, value);
}
enum NDArray_ByteOrder : int {
  NDArray_ByteOrder_LITTLE_ENDIAN_ORDER = 0,
  NDArray_ByteOrder_BIG_ENDIAN_ORDER = 1
};
bool NDArray_ByteOrder_IsValid(int value);
constexpr NDArray_ByteOrder NDArray_ByteOrder_ByteOrder_MIN = NDArray_ByteOrder_LITTLE_ENDIAN_ORDER;
constexpr NDArray_ByteOrder NDArray_ByteOrder_ByteOrder_MAX = NDArray_ByteOrder_BIG_ENDIAN_ORDER;
constexpr int NDArray_ByteOrder_ByteOrder_ARRAYSIZE = NDArray_ByteOrder_ByteOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDArray_ByteOrder_descriptor();
template<typename T>
inline const std::string& NDArray_ByteOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NDArray_ByteOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NDArray_ByteOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NDArray_ByteOrder_descriptor(), enum_t_value);
}
inline bool NDArray_ByteOrder_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NDArray_ByteOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NDArray_ByteOrder>(
    NDArray_ByteOrder_descriptor(), name, value);
}
enum NDArray_DataType : int {
  NDArray_DataType_int8 = 0,
  NDArray_DataType_int16 = 1,
  NDArray_DataType_int32 = 2,
  NDArray_DataType_int64 = 3,
  NDArray_DataType_uint8 = 4,
  NDArray_DataType_uint16 = 5,
  NDArray_DataType_uint32 = 6,
  NDArray_DataType_uint64 = 7,
  NDArray_DataType_float16 = 8,
  NDArray_DataType_float32 = 9,
  NDArray_DataType_float64 = 10,
  NDArray_DataType_complex64 = 11,
  NDArray_DataType_complex128 = 12,
  NDArray_DataType_S8 = 13,
  NDArray_DataType_S16 = 14,
  NDArray_DataType_S32 = 15,
  NDArray_DataType_S64 = 16,
  NDArray_DataType_S128 = 17
};
bool NDArray_DataType_IsValid(int value);
constexpr NDArray_DataType NDArray_DataType_DataType_MIN = NDArray_DataType_int8;
constexpr NDArray_DataType NDArray_DataType_DataType_MAX = NDArray_DataType_S128;
constexpr int NDArray_DataType_DataType_ARRAYSIZE = NDArray_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDArray_DataType_descriptor();
template<typename T>
inline const std::string& NDArray_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NDArray_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NDArray_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NDArray_DataType_descriptor(), enum_t_value);
}
inline bool NDArray_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NDArray_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NDArray_DataType>(
    NDArray_DataType_descriptor(), name, value);
}
// ===================================================================

class NDArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robertslab.pbuf.NDArray) */ {
 public:
  inline NDArray() : NDArray(nullptr) {}
  virtual ~NDArray();

  NDArray(const NDArray& from);
  NDArray(NDArray&& from) noexcept
    : NDArray() {
    *this = ::std::move(from);
  }

  inline NDArray& operator=(const NDArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDArray& operator=(NDArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NDArray* internal_default_instance() {
    return reinterpret_cast<const NDArray*>(
               &_NDArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NDArray& a, NDArray& b) {
    a.Swap(&b);
  }
  inline void Swap(NDArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDArray* New() const final {
    return CreateMaybeMessage<NDArray>(nullptr);
  }

  NDArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDArray& from);
  void MergeFrom(const NDArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robertslab.pbuf.NDArray";
  }
  protected:
  explicit NDArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto);
    return ::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NDArray_ArrayOrder ArrayOrder;
  static constexpr ArrayOrder ROW_MAJOR =
    NDArray_ArrayOrder_ROW_MAJOR;
  static constexpr ArrayOrder COLUMN_MAJOR =
    NDArray_ArrayOrder_COLUMN_MAJOR;
  static constexpr ArrayOrder IMPL_ORDER =
    NDArray_ArrayOrder_IMPL_ORDER;
  static inline bool ArrayOrder_IsValid(int value) {
    return NDArray_ArrayOrder_IsValid(value);
  }
  static constexpr ArrayOrder ArrayOrder_MIN =
    NDArray_ArrayOrder_ArrayOrder_MIN;
  static constexpr ArrayOrder ArrayOrder_MAX =
    NDArray_ArrayOrder_ArrayOrder_MAX;
  static constexpr int ArrayOrder_ARRAYSIZE =
    NDArray_ArrayOrder_ArrayOrder_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ArrayOrder_descriptor() {
    return NDArray_ArrayOrder_descriptor();
  }
  template<typename T>
  static inline const std::string& ArrayOrder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ArrayOrder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ArrayOrder_Name.");
    return NDArray_ArrayOrder_Name(enum_t_value);
  }
  static inline bool ArrayOrder_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ArrayOrder* value) {
    return NDArray_ArrayOrder_Parse(name, value);
  }

  typedef NDArray_ByteOrder ByteOrder;
  static constexpr ByteOrder LITTLE_ENDIAN_ORDER =
    NDArray_ByteOrder_LITTLE_ENDIAN_ORDER;
  static constexpr ByteOrder BIG_ENDIAN_ORDER =
    NDArray_ByteOrder_BIG_ENDIAN_ORDER;
  static inline bool ByteOrder_IsValid(int value) {
    return NDArray_ByteOrder_IsValid(value);
  }
  static constexpr ByteOrder ByteOrder_MIN =
    NDArray_ByteOrder_ByteOrder_MIN;
  static constexpr ByteOrder ByteOrder_MAX =
    NDArray_ByteOrder_ByteOrder_MAX;
  static constexpr int ByteOrder_ARRAYSIZE =
    NDArray_ByteOrder_ByteOrder_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ByteOrder_descriptor() {
    return NDArray_ByteOrder_descriptor();
  }
  template<typename T>
  static inline const std::string& ByteOrder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ByteOrder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ByteOrder_Name.");
    return NDArray_ByteOrder_Name(enum_t_value);
  }
  static inline bool ByteOrder_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ByteOrder* value) {
    return NDArray_ByteOrder_Parse(name, value);
  }

  typedef NDArray_DataType DataType;
  static constexpr DataType int8 =
    NDArray_DataType_int8;
  static constexpr DataType int16 =
    NDArray_DataType_int16;
  static constexpr DataType int32 =
    NDArray_DataType_int32;
  static constexpr DataType int64 =
    NDArray_DataType_int64;
  static constexpr DataType uint8 =
    NDArray_DataType_uint8;
  static constexpr DataType uint16 =
    NDArray_DataType_uint16;
  static constexpr DataType uint32 =
    NDArray_DataType_uint32;
  static constexpr DataType uint64 =
    NDArray_DataType_uint64;
  static constexpr DataType float16 =
    NDArray_DataType_float16;
  static constexpr DataType float32 =
    NDArray_DataType_float32;
  static constexpr DataType float64 =
    NDArray_DataType_float64;
  static constexpr DataType complex64 =
    NDArray_DataType_complex64;
  static constexpr DataType complex128 =
    NDArray_DataType_complex128;
  static constexpr DataType S8 =
    NDArray_DataType_S8;
  static constexpr DataType S16 =
    NDArray_DataType_S16;
  static constexpr DataType S32 =
    NDArray_DataType_S32;
  static constexpr DataType S64 =
    NDArray_DataType_S64;
  static constexpr DataType S128 =
    NDArray_DataType_S128;
  static inline bool DataType_IsValid(int value) {
    return NDArray_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    NDArray_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    NDArray_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    NDArray_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return NDArray_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return NDArray_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return NDArray_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 4,
    kDataFieldNumber = 5,
    kArrayOrderFieldNumber = 1,
    kByteOrderFieldNumber = 2,
    kDataTypeFieldNumber = 3,
    kCompressedDeflateFieldNumber = 6,
    kCompressedSnappyFieldNumber = 7,
  };
  // repeated uint32 shape = 4;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // required bytes data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .robertslab.pbuf.NDArray.ArrayOrder array_order = 1 [default = ROW_MAJOR];
  bool has_array_order() const;
  private:
  bool _internal_has_array_order() const;
  public:
  void clear_array_order();
  ::robertslab::pbuf::NDArray_ArrayOrder array_order() const;
  void set_array_order(::robertslab::pbuf::NDArray_ArrayOrder value);
  private:
  ::robertslab::pbuf::NDArray_ArrayOrder _internal_array_order() const;
  void _internal_set_array_order(::robertslab::pbuf::NDArray_ArrayOrder value);
  public:

  // optional .robertslab.pbuf.NDArray.ByteOrder byte_order = 2 [default = LITTLE_ENDIAN_ORDER];
  bool has_byte_order() const;
  private:
  bool _internal_has_byte_order() const;
  public:
  void clear_byte_order();
  ::robertslab::pbuf::NDArray_ByteOrder byte_order() const;
  void set_byte_order(::robertslab::pbuf::NDArray_ByteOrder value);
  private:
  ::robertslab::pbuf::NDArray_ByteOrder _internal_byte_order() const;
  void _internal_set_byte_order(::robertslab::pbuf::NDArray_ByteOrder value);
  public:

  // required .robertslab.pbuf.NDArray.DataType data_type = 3;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::robertslab::pbuf::NDArray_DataType data_type() const;
  void set_data_type(::robertslab::pbuf::NDArray_DataType value);
  private:
  ::robertslab::pbuf::NDArray_DataType _internal_data_type() const;
  void _internal_set_data_type(::robertslab::pbuf::NDArray_DataType value);
  public:

  // optional bool compressed_deflate = 6 [default = false];
  bool has_compressed_deflate() const;
  private:
  bool _internal_has_compressed_deflate() const;
  public:
  void clear_compressed_deflate();
  bool compressed_deflate() const;
  void set_compressed_deflate(bool value);
  private:
  bool _internal_compressed_deflate() const;
  void _internal_set_compressed_deflate(bool value);
  public:

  // optional bool compressed_snappy = 7 [default = false];
  bool has_compressed_snappy() const;
  private:
  bool _internal_has_compressed_snappy() const;
  public:
  void clear_compressed_snappy();
  bool compressed_snappy() const;
  void set_compressed_snappy(bool value);
  private:
  bool _internal_compressed_snappy() const;
  void _internal_set_compressed_snappy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:robertslab.pbuf.NDArray)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int array_order_;
  int byte_order_;
  int data_type_;
  bool compressed_deflate_;
  bool compressed_snappy_;
  friend struct ::TableStruct_robertslab_2fpbuf_2fNDArray_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NDArray

// optional .robertslab.pbuf.NDArray.ArrayOrder array_order = 1 [default = ROW_MAJOR];
inline bool NDArray::_internal_has_array_order() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NDArray::has_array_order() const {
  return _internal_has_array_order();
}
inline void NDArray::clear_array_order() {
  array_order_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::robertslab::pbuf::NDArray_ArrayOrder NDArray::_internal_array_order() const {
  return static_cast< ::robertslab::pbuf::NDArray_ArrayOrder >(array_order_);
}
inline ::robertslab::pbuf::NDArray_ArrayOrder NDArray::array_order() const {
  // @@protoc_insertion_point(field_get:robertslab.pbuf.NDArray.array_order)
  return _internal_array_order();
}
inline void NDArray::_internal_set_array_order(::robertslab::pbuf::NDArray_ArrayOrder value) {
  assert(::robertslab::pbuf::NDArray_ArrayOrder_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  array_order_ = value;
}
inline void NDArray::set_array_order(::robertslab::pbuf::NDArray_ArrayOrder value) {
  _internal_set_array_order(value);
  // @@protoc_insertion_point(field_set:robertslab.pbuf.NDArray.array_order)
}

// optional .robertslab.pbuf.NDArray.ByteOrder byte_order = 2 [default = LITTLE_ENDIAN_ORDER];
inline bool NDArray::_internal_has_byte_order() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NDArray::has_byte_order() const {
  return _internal_has_byte_order();
}
inline void NDArray::clear_byte_order() {
  byte_order_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::robertslab::pbuf::NDArray_ByteOrder NDArray::_internal_byte_order() const {
  return static_cast< ::robertslab::pbuf::NDArray_ByteOrder >(byte_order_);
}
inline ::robertslab::pbuf::NDArray_ByteOrder NDArray::byte_order() const {
  // @@protoc_insertion_point(field_get:robertslab.pbuf.NDArray.byte_order)
  return _internal_byte_order();
}
inline void NDArray::_internal_set_byte_order(::robertslab::pbuf::NDArray_ByteOrder value) {
  assert(::robertslab::pbuf::NDArray_ByteOrder_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  byte_order_ = value;
}
inline void NDArray::set_byte_order(::robertslab::pbuf::NDArray_ByteOrder value) {
  _internal_set_byte_order(value);
  // @@protoc_insertion_point(field_set:robertslab.pbuf.NDArray.byte_order)
}

// required .robertslab.pbuf.NDArray.DataType data_type = 3;
inline bool NDArray::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NDArray::has_data_type() const {
  return _internal_has_data_type();
}
inline void NDArray::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::robertslab::pbuf::NDArray_DataType NDArray::_internal_data_type() const {
  return static_cast< ::robertslab::pbuf::NDArray_DataType >(data_type_);
}
inline ::robertslab::pbuf::NDArray_DataType NDArray::data_type() const {
  // @@protoc_insertion_point(field_get:robertslab.pbuf.NDArray.data_type)
  return _internal_data_type();
}
inline void NDArray::_internal_set_data_type(::robertslab::pbuf::NDArray_DataType value) {
  assert(::robertslab::pbuf::NDArray_DataType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  data_type_ = value;
}
inline void NDArray::set_data_type(::robertslab::pbuf::NDArray_DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:robertslab.pbuf.NDArray.data_type)
}

// repeated uint32 shape = 4;
inline int NDArray::_internal_shape_size() const {
  return shape_.size();
}
inline int NDArray::shape_size() const {
  return _internal_shape_size();
}
inline void NDArray::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NDArray::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NDArray::shape(int index) const {
  // @@protoc_insertion_point(field_get:robertslab.pbuf.NDArray.shape)
  return _internal_shape(index);
}
inline void NDArray::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:robertslab.pbuf.NDArray.shape)
}
inline void NDArray::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void NDArray::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:robertslab.pbuf.NDArray.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NDArray::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NDArray::shape() const {
  // @@protoc_insertion_point(field_list:robertslab.pbuf.NDArray.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NDArray::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NDArray::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:robertslab.pbuf.NDArray.shape)
  return _internal_mutable_shape();
}

// required bytes data = 5;
inline bool NDArray::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NDArray::has_data() const {
  return _internal_has_data();
}
inline void NDArray::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NDArray::data() const {
  // @@protoc_insertion_point(field_get:robertslab.pbuf.NDArray.data)
  return _internal_data();
}
inline void NDArray::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:robertslab.pbuf.NDArray.data)
}
inline std::string* NDArray::mutable_data() {
  // @@protoc_insertion_point(field_mutable:robertslab.pbuf.NDArray.data)
  return _internal_mutable_data();
}
inline const std::string& NDArray::_internal_data() const {
  return data_.Get();
}
inline void NDArray::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NDArray::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:robertslab.pbuf.NDArray.data)
}
inline void NDArray::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:robertslab.pbuf.NDArray.data)
}
inline void NDArray::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:robertslab.pbuf.NDArray.data)
}
inline std::string* NDArray::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NDArray::release_data() {
  // @@protoc_insertion_point(field_release:robertslab.pbuf.NDArray.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NDArray::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:robertslab.pbuf.NDArray.data)
}

// optional bool compressed_deflate = 6 [default = false];
inline bool NDArray::_internal_has_compressed_deflate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NDArray::has_compressed_deflate() const {
  return _internal_has_compressed_deflate();
}
inline void NDArray::clear_compressed_deflate() {
  compressed_deflate_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool NDArray::_internal_compressed_deflate() const {
  return compressed_deflate_;
}
inline bool NDArray::compressed_deflate() const {
  // @@protoc_insertion_point(field_get:robertslab.pbuf.NDArray.compressed_deflate)
  return _internal_compressed_deflate();
}
inline void NDArray::_internal_set_compressed_deflate(bool value) {
  _has_bits_[0] |= 0x00000010u;
  compressed_deflate_ = value;
}
inline void NDArray::set_compressed_deflate(bool value) {
  _internal_set_compressed_deflate(value);
  // @@protoc_insertion_point(field_set:robertslab.pbuf.NDArray.compressed_deflate)
}

// optional bool compressed_snappy = 7 [default = false];
inline bool NDArray::_internal_has_compressed_snappy() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NDArray::has_compressed_snappy() const {
  return _internal_has_compressed_snappy();
}
inline void NDArray::clear_compressed_snappy() {
  compressed_snappy_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool NDArray::_internal_compressed_snappy() const {
  return compressed_snappy_;
}
inline bool NDArray::compressed_snappy() const {
  // @@protoc_insertion_point(field_get:robertslab.pbuf.NDArray.compressed_snappy)
  return _internal_compressed_snappy();
}
inline void NDArray::_internal_set_compressed_snappy(bool value) {
  _has_bits_[0] |= 0x00000020u;
  compressed_snappy_ = value;
}
inline void NDArray::set_compressed_snappy(bool value) {
  _internal_set_compressed_snappy(value);
  // @@protoc_insertion_point(field_set:robertslab.pbuf.NDArray.compressed_snappy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbuf
}  // namespace robertslab

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::robertslab::pbuf::NDArray_ArrayOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robertslab::pbuf::NDArray_ArrayOrder>() {
  return ::robertslab::pbuf::NDArray_ArrayOrder_descriptor();
}
template <> struct is_proto_enum< ::robertslab::pbuf::NDArray_ByteOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robertslab::pbuf::NDArray_ByteOrder>() {
  return ::robertslab::pbuf::NDArray_ByteOrder_descriptor();
}
template <> struct is_proto_enum< ::robertslab::pbuf::NDArray_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robertslab::pbuf::NDArray_DataType>() {
  return ::robertslab::pbuf::NDArray_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robertslab_2fpbuf_2fNDArray_2eproto
