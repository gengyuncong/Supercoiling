// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/ReactionModel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fReactionModel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fReactionModel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/model/NoiseModel.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fReactionModel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2finput_2fReactionModel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fReactionModel_2eproto;
namespace lm {
namespace input {
class ReactionModel;
class ReactionModelDefaultTypeInternal;
extern ReactionModelDefaultTypeInternal _ReactionModel_default_instance_;
class ReactionModel_Reaction;
class ReactionModel_ReactionDefaultTypeInternal;
extern ReactionModel_ReactionDefaultTypeInternal _ReactionModel_Reaction_default_instance_;
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::input::ReactionModel* Arena::CreateMaybeMessage<::lm::input::ReactionModel>(Arena*);
template<> ::lm::input::ReactionModel_Reaction* Arena::CreateMaybeMessage<::lm::input::ReactionModel_Reaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace input {

// ===================================================================

class ReactionModel_Reaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.input.ReactionModel.Reaction) */ {
 public:
  inline ReactionModel_Reaction() : ReactionModel_Reaction(nullptr) {}
  virtual ~ReactionModel_Reaction();

  ReactionModel_Reaction(const ReactionModel_Reaction& from);
  ReactionModel_Reaction(ReactionModel_Reaction&& from) noexcept
    : ReactionModel_Reaction() {
    *this = ::std::move(from);
  }

  inline ReactionModel_Reaction& operator=(const ReactionModel_Reaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReactionModel_Reaction& operator=(ReactionModel_Reaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReactionModel_Reaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReactionModel_Reaction* internal_default_instance() {
    return reinterpret_cast<const ReactionModel_Reaction*>(
               &_ReactionModel_Reaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReactionModel_Reaction& a, ReactionModel_Reaction& b) {
    a.Swap(&b);
  }
  inline void Swap(ReactionModel_Reaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReactionModel_Reaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReactionModel_Reaction* New() const final {
    return CreateMaybeMessage<ReactionModel_Reaction>(nullptr);
  }

  ReactionModel_Reaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReactionModel_Reaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReactionModel_Reaction& from);
  void MergeFrom(const ReactionModel_Reaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReactionModel_Reaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.input.ReactionModel.Reaction";
  }
  protected:
  explicit ReactionModel_Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2finput_2fReactionModel_2eproto);
    return ::descriptor_table_lm_2finput_2fReactionModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateConstantFieldNumber = 2,
    kNameFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // repeated double rate_constant = 2 [packed = true];
  int rate_constant_size() const;
  private:
  int _internal_rate_constant_size() const;
  public:
  void clear_rate_constant();
  private:
  double _internal_rate_constant(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rate_constant() const;
  void _internal_add_rate_constant(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rate_constant();
  public:
  double rate_constant(int index) const;
  void set_rate_constant(int index, double value);
  void add_rate_constant(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rate_constant() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rate_constant();

  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.input.ReactionModel.Reaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rate_constant_;
  mutable std::atomic<int> _rate_constant_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_lm_2finput_2fReactionModel_2eproto;
};
// -------------------------------------------------------------------

class ReactionModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.input.ReactionModel) */ {
 public:
  inline ReactionModel() : ReactionModel(nullptr) {}
  virtual ~ReactionModel();

  ReactionModel(const ReactionModel& from);
  ReactionModel(ReactionModel&& from) noexcept
    : ReactionModel() {
    *this = ::std::move(from);
  }

  inline ReactionModel& operator=(const ReactionModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReactionModel& operator=(ReactionModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReactionModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReactionModel* internal_default_instance() {
    return reinterpret_cast<const ReactionModel*>(
               &_ReactionModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReactionModel& a, ReactionModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ReactionModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReactionModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReactionModel* New() const final {
    return CreateMaybeMessage<ReactionModel>(nullptr);
  }

  ReactionModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReactionModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReactionModel& from);
  void MergeFrom(const ReactionModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReactionModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.input.ReactionModel";
  }
  protected:
  explicit ReactionModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2finput_2fReactionModel_2eproto);
    return ::descriptor_table_lm_2finput_2fReactionModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReactionModel_Reaction Reaction;

  // accessors -------------------------------------------------------

  enum : int {
    kInitialSpeciesCountFieldNumber = 3,
    kReactionFieldNumber = 4,
    kStoichiometricMatrixFieldNumber = 5,
    kDependencyMatrixFieldNumber = 6,
    kSpeciesNameFieldNumber = 7,
    kNoiseModelFieldNumber = 100,
    kNumberSpeciesFieldNumber = 1,
    kNumberReactionsFieldNumber = 2,
  };
  // repeated uint32 initial_species_count = 3 [packed = true];
  int initial_species_count_size() const;
  private:
  int _internal_initial_species_count_size() const;
  public:
  void clear_initial_species_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initial_species_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_initial_species_count() const;
  void _internal_add_initial_species_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_initial_species_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_species_count(int index) const;
  void set_initial_species_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_initial_species_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      initial_species_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_initial_species_count();

  // repeated .lm.input.ReactionModel.Reaction reaction = 4;
  int reaction_size() const;
  private:
  int _internal_reaction_size() const;
  public:
  void clear_reaction();
  ::lm::input::ReactionModel_Reaction* mutable_reaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::input::ReactionModel_Reaction >*
      mutable_reaction();
  private:
  const ::lm::input::ReactionModel_Reaction& _internal_reaction(int index) const;
  ::lm::input::ReactionModel_Reaction* _internal_add_reaction();
  public:
  const ::lm::input::ReactionModel_Reaction& reaction(int index) const;
  ::lm::input::ReactionModel_Reaction* add_reaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::input::ReactionModel_Reaction >&
      reaction() const;

  // repeated int32 stoichiometric_matrix = 5 [packed = true];
  int stoichiometric_matrix_size() const;
  private:
  int _internal_stoichiometric_matrix_size() const;
  public:
  void clear_stoichiometric_matrix();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stoichiometric_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stoichiometric_matrix() const;
  void _internal_add_stoichiometric_matrix(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stoichiometric_matrix();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stoichiometric_matrix(int index) const;
  void set_stoichiometric_matrix(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stoichiometric_matrix(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stoichiometric_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stoichiometric_matrix();

  // repeated uint32 dependency_matrix = 6 [packed = true];
  int dependency_matrix_size() const;
  private:
  int _internal_dependency_matrix_size() const;
  public:
  void clear_dependency_matrix();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dependency_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dependency_matrix() const;
  void _internal_add_dependency_matrix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dependency_matrix();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dependency_matrix(int index) const;
  void set_dependency_matrix(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dependency_matrix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dependency_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dependency_matrix();

  // repeated string species_name = 7;
  int species_name_size() const;
  private:
  int _internal_species_name_size() const;
  public:
  void clear_species_name();
  const std::string& species_name(int index) const;
  std::string* mutable_species_name(int index);
  void set_species_name(int index, const std::string& value);
  void set_species_name(int index, std::string&& value);
  void set_species_name(int index, const char* value);
  void set_species_name(int index, const char* value, size_t size);
  std::string* add_species_name();
  void add_species_name(const std::string& value);
  void add_species_name(std::string&& value);
  void add_species_name(const char* value);
  void add_species_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& species_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_species_name();
  private:
  const std::string& _internal_species_name(int index) const;
  std::string* _internal_add_species_name();
  public:

  // optional .lm.model.NoiseModel noise_model = 100;
  bool has_noise_model() const;
  private:
  bool _internal_has_noise_model() const;
  public:
  void clear_noise_model();
  const ::lm::model::NoiseModel& noise_model() const;
  ::lm::model::NoiseModel* release_noise_model();
  ::lm::model::NoiseModel* mutable_noise_model();
  void set_allocated_noise_model(::lm::model::NoiseModel* noise_model);
  private:
  const ::lm::model::NoiseModel& _internal_noise_model() const;
  ::lm::model::NoiseModel* _internal_mutable_noise_model();
  public:
  void unsafe_arena_set_allocated_noise_model(
      ::lm::model::NoiseModel* noise_model);
  ::lm::model::NoiseModel* unsafe_arena_release_noise_model();

  // required uint32 number_species = 1;
  bool has_number_species() const;
  private:
  bool _internal_has_number_species() const;
  public:
  void clear_number_species();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_species() const;
  void set_number_species(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_species() const;
  void _internal_set_number_species(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 number_reactions = 2;
  bool has_number_reactions() const;
  private:
  bool _internal_has_number_reactions() const;
  public:
  void clear_number_reactions();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_reactions() const;
  void set_number_reactions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_reactions() const;
  void _internal_set_number_reactions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.input.ReactionModel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > initial_species_count_;
  mutable std::atomic<int> _initial_species_count_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::input::ReactionModel_Reaction > reaction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stoichiometric_matrix_;
  mutable std::atomic<int> _stoichiometric_matrix_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dependency_matrix_;
  mutable std::atomic<int> _dependency_matrix_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> species_name_;
  ::lm::model::NoiseModel* noise_model_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_species_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_reactions_;
  friend struct ::TableStruct_lm_2finput_2fReactionModel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReactionModel_Reaction

// required uint32 type = 1;
inline bool ReactionModel_Reaction::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReactionModel_Reaction::has_type() const {
  return _internal_has_type();
}
inline void ReactionModel_Reaction::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel_Reaction::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel_Reaction::type() const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.Reaction.type)
  return _internal_type();
}
inline void ReactionModel_Reaction::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void ReactionModel_Reaction::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.Reaction.type)
}

// repeated double rate_constant = 2 [packed = true];
inline int ReactionModel_Reaction::_internal_rate_constant_size() const {
  return rate_constant_.size();
}
inline int ReactionModel_Reaction::rate_constant_size() const {
  return _internal_rate_constant_size();
}
inline void ReactionModel_Reaction::clear_rate_constant() {
  rate_constant_.Clear();
}
inline double ReactionModel_Reaction::_internal_rate_constant(int index) const {
  return rate_constant_.Get(index);
}
inline double ReactionModel_Reaction::rate_constant(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.Reaction.rate_constant)
  return _internal_rate_constant(index);
}
inline void ReactionModel_Reaction::set_rate_constant(int index, double value) {
  rate_constant_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.Reaction.rate_constant)
}
inline void ReactionModel_Reaction::_internal_add_rate_constant(double value) {
  rate_constant_.Add(value);
}
inline void ReactionModel_Reaction::add_rate_constant(double value) {
  _internal_add_rate_constant(value);
  // @@protoc_insertion_point(field_add:lm.input.ReactionModel.Reaction.rate_constant)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ReactionModel_Reaction::_internal_rate_constant() const {
  return rate_constant_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ReactionModel_Reaction::rate_constant() const {
  // @@protoc_insertion_point(field_list:lm.input.ReactionModel.Reaction.rate_constant)
  return _internal_rate_constant();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ReactionModel_Reaction::_internal_mutable_rate_constant() {
  return &rate_constant_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ReactionModel_Reaction::mutable_rate_constant() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.ReactionModel.Reaction.rate_constant)
  return _internal_mutable_rate_constant();
}

// optional string name = 6;
inline bool ReactionModel_Reaction::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReactionModel_Reaction::has_name() const {
  return _internal_has_name();
}
inline void ReactionModel_Reaction::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReactionModel_Reaction::name() const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.Reaction.name)
  return _internal_name();
}
inline void ReactionModel_Reaction::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.Reaction.name)
}
inline std::string* ReactionModel_Reaction::mutable_name() {
  // @@protoc_insertion_point(field_mutable:lm.input.ReactionModel.Reaction.name)
  return _internal_mutable_name();
}
inline const std::string& ReactionModel_Reaction::_internal_name() const {
  return name_.Get();
}
inline void ReactionModel_Reaction::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReactionModel_Reaction::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lm.input.ReactionModel.Reaction.name)
}
inline void ReactionModel_Reaction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lm.input.ReactionModel.Reaction.name)
}
inline void ReactionModel_Reaction::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lm.input.ReactionModel.Reaction.name)
}
inline std::string* ReactionModel_Reaction::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReactionModel_Reaction::release_name() {
  // @@protoc_insertion_point(field_release:lm.input.ReactionModel.Reaction.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReactionModel_Reaction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lm.input.ReactionModel.Reaction.name)
}

// -------------------------------------------------------------------

// ReactionModel

// required uint32 number_species = 1;
inline bool ReactionModel::_internal_has_number_species() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReactionModel::has_number_species() const {
  return _internal_has_number_species();
}
inline void ReactionModel::clear_number_species() {
  number_species_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::_internal_number_species() const {
  return number_species_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::number_species() const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.number_species)
  return _internal_number_species();
}
inline void ReactionModel::_internal_set_number_species(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_species_ = value;
}
inline void ReactionModel::set_number_species(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_species(value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.number_species)
}

// required uint32 number_reactions = 2;
inline bool ReactionModel::_internal_has_number_reactions() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReactionModel::has_number_reactions() const {
  return _internal_has_number_reactions();
}
inline void ReactionModel::clear_number_reactions() {
  number_reactions_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::_internal_number_reactions() const {
  return number_reactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::number_reactions() const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.number_reactions)
  return _internal_number_reactions();
}
inline void ReactionModel::_internal_set_number_reactions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  number_reactions_ = value;
}
inline void ReactionModel::set_number_reactions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_reactions(value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.number_reactions)
}

// repeated uint32 initial_species_count = 3 [packed = true];
inline int ReactionModel::_internal_initial_species_count_size() const {
  return initial_species_count_.size();
}
inline int ReactionModel::initial_species_count_size() const {
  return _internal_initial_species_count_size();
}
inline void ReactionModel::clear_initial_species_count() {
  initial_species_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::_internal_initial_species_count(int index) const {
  return initial_species_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::initial_species_count(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.initial_species_count)
  return _internal_initial_species_count(index);
}
inline void ReactionModel::set_initial_species_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  initial_species_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.initial_species_count)
}
inline void ReactionModel::_internal_add_initial_species_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  initial_species_count_.Add(value);
}
inline void ReactionModel::add_initial_species_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_initial_species_count(value);
  // @@protoc_insertion_point(field_add:lm.input.ReactionModel.initial_species_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ReactionModel::_internal_initial_species_count() const {
  return initial_species_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ReactionModel::initial_species_count() const {
  // @@protoc_insertion_point(field_list:lm.input.ReactionModel.initial_species_count)
  return _internal_initial_species_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ReactionModel::_internal_mutable_initial_species_count() {
  return &initial_species_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ReactionModel::mutable_initial_species_count() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.ReactionModel.initial_species_count)
  return _internal_mutable_initial_species_count();
}

// repeated string species_name = 7;
inline int ReactionModel::_internal_species_name_size() const {
  return species_name_.size();
}
inline int ReactionModel::species_name_size() const {
  return _internal_species_name_size();
}
inline void ReactionModel::clear_species_name() {
  species_name_.Clear();
}
inline std::string* ReactionModel::add_species_name() {
  // @@protoc_insertion_point(field_add_mutable:lm.input.ReactionModel.species_name)
  return _internal_add_species_name();
}
inline const std::string& ReactionModel::_internal_species_name(int index) const {
  return species_name_.Get(index);
}
inline const std::string& ReactionModel::species_name(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.species_name)
  return _internal_species_name(index);
}
inline std::string* ReactionModel::mutable_species_name(int index) {
  // @@protoc_insertion_point(field_mutable:lm.input.ReactionModel.species_name)
  return species_name_.Mutable(index);
}
inline void ReactionModel::set_species_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.species_name)
  species_name_.Mutable(index)->assign(value);
}
inline void ReactionModel::set_species_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.species_name)
  species_name_.Mutable(index)->assign(std::move(value));
}
inline void ReactionModel::set_species_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  species_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lm.input.ReactionModel.species_name)
}
inline void ReactionModel::set_species_name(int index, const char* value, size_t size) {
  species_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lm.input.ReactionModel.species_name)
}
inline std::string* ReactionModel::_internal_add_species_name() {
  return species_name_.Add();
}
inline void ReactionModel::add_species_name(const std::string& value) {
  species_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lm.input.ReactionModel.species_name)
}
inline void ReactionModel::add_species_name(std::string&& value) {
  species_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lm.input.ReactionModel.species_name)
}
inline void ReactionModel::add_species_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  species_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lm.input.ReactionModel.species_name)
}
inline void ReactionModel::add_species_name(const char* value, size_t size) {
  species_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lm.input.ReactionModel.species_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReactionModel::species_name() const {
  // @@protoc_insertion_point(field_list:lm.input.ReactionModel.species_name)
  return species_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReactionModel::mutable_species_name() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.ReactionModel.species_name)
  return &species_name_;
}

// repeated .lm.input.ReactionModel.Reaction reaction = 4;
inline int ReactionModel::_internal_reaction_size() const {
  return reaction_.size();
}
inline int ReactionModel::reaction_size() const {
  return _internal_reaction_size();
}
inline void ReactionModel::clear_reaction() {
  reaction_.Clear();
}
inline ::lm::input::ReactionModel_Reaction* ReactionModel::mutable_reaction(int index) {
  // @@protoc_insertion_point(field_mutable:lm.input.ReactionModel.reaction)
  return reaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::input::ReactionModel_Reaction >*
ReactionModel::mutable_reaction() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.ReactionModel.reaction)
  return &reaction_;
}
inline const ::lm::input::ReactionModel_Reaction& ReactionModel::_internal_reaction(int index) const {
  return reaction_.Get(index);
}
inline const ::lm::input::ReactionModel_Reaction& ReactionModel::reaction(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.reaction)
  return _internal_reaction(index);
}
inline ::lm::input::ReactionModel_Reaction* ReactionModel::_internal_add_reaction() {
  return reaction_.Add();
}
inline ::lm::input::ReactionModel_Reaction* ReactionModel::add_reaction() {
  // @@protoc_insertion_point(field_add:lm.input.ReactionModel.reaction)
  return _internal_add_reaction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::input::ReactionModel_Reaction >&
ReactionModel::reaction() const {
  // @@protoc_insertion_point(field_list:lm.input.ReactionModel.reaction)
  return reaction_;
}

// repeated int32 stoichiometric_matrix = 5 [packed = true];
inline int ReactionModel::_internal_stoichiometric_matrix_size() const {
  return stoichiometric_matrix_.size();
}
inline int ReactionModel::stoichiometric_matrix_size() const {
  return _internal_stoichiometric_matrix_size();
}
inline void ReactionModel::clear_stoichiometric_matrix() {
  stoichiometric_matrix_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReactionModel::_internal_stoichiometric_matrix(int index) const {
  return stoichiometric_matrix_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReactionModel::stoichiometric_matrix(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.stoichiometric_matrix)
  return _internal_stoichiometric_matrix(index);
}
inline void ReactionModel::set_stoichiometric_matrix(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stoichiometric_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.stoichiometric_matrix)
}
inline void ReactionModel::_internal_add_stoichiometric_matrix(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stoichiometric_matrix_.Add(value);
}
inline void ReactionModel::add_stoichiometric_matrix(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stoichiometric_matrix(value);
  // @@protoc_insertion_point(field_add:lm.input.ReactionModel.stoichiometric_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ReactionModel::_internal_stoichiometric_matrix() const {
  return stoichiometric_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ReactionModel::stoichiometric_matrix() const {
  // @@protoc_insertion_point(field_list:lm.input.ReactionModel.stoichiometric_matrix)
  return _internal_stoichiometric_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ReactionModel::_internal_mutable_stoichiometric_matrix() {
  return &stoichiometric_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ReactionModel::mutable_stoichiometric_matrix() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.ReactionModel.stoichiometric_matrix)
  return _internal_mutable_stoichiometric_matrix();
}

// repeated uint32 dependency_matrix = 6 [packed = true];
inline int ReactionModel::_internal_dependency_matrix_size() const {
  return dependency_matrix_.size();
}
inline int ReactionModel::dependency_matrix_size() const {
  return _internal_dependency_matrix_size();
}
inline void ReactionModel::clear_dependency_matrix() {
  dependency_matrix_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::_internal_dependency_matrix(int index) const {
  return dependency_matrix_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReactionModel::dependency_matrix(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.dependency_matrix)
  return _internal_dependency_matrix(index);
}
inline void ReactionModel::set_dependency_matrix(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dependency_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.ReactionModel.dependency_matrix)
}
inline void ReactionModel::_internal_add_dependency_matrix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dependency_matrix_.Add(value);
}
inline void ReactionModel::add_dependency_matrix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dependency_matrix(value);
  // @@protoc_insertion_point(field_add:lm.input.ReactionModel.dependency_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ReactionModel::_internal_dependency_matrix() const {
  return dependency_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ReactionModel::dependency_matrix() const {
  // @@protoc_insertion_point(field_list:lm.input.ReactionModel.dependency_matrix)
  return _internal_dependency_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ReactionModel::_internal_mutable_dependency_matrix() {
  return &dependency_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ReactionModel::mutable_dependency_matrix() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.ReactionModel.dependency_matrix)
  return _internal_mutable_dependency_matrix();
}

// optional .lm.model.NoiseModel noise_model = 100;
inline bool ReactionModel::_internal_has_noise_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || noise_model_ != nullptr);
  return value;
}
inline bool ReactionModel::has_noise_model() const {
  return _internal_has_noise_model();
}
inline const ::lm::model::NoiseModel& ReactionModel::_internal_noise_model() const {
  const ::lm::model::NoiseModel* p = noise_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::model::NoiseModel*>(
      &::lm::model::_NoiseModel_default_instance_);
}
inline const ::lm::model::NoiseModel& ReactionModel::noise_model() const {
  // @@protoc_insertion_point(field_get:lm.input.ReactionModel.noise_model)
  return _internal_noise_model();
}
inline void ReactionModel::unsafe_arena_set_allocated_noise_model(
    ::lm::model::NoiseModel* noise_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noise_model_);
  }
  noise_model_ = noise_model;
  if (noise_model) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.ReactionModel.noise_model)
}
inline ::lm::model::NoiseModel* ReactionModel::release_noise_model() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::model::NoiseModel* temp = noise_model_;
  noise_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::model::NoiseModel* ReactionModel::unsafe_arena_release_noise_model() {
  // @@protoc_insertion_point(field_release:lm.input.ReactionModel.noise_model)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::model::NoiseModel* temp = noise_model_;
  noise_model_ = nullptr;
  return temp;
}
inline ::lm::model::NoiseModel* ReactionModel::_internal_mutable_noise_model() {
  _has_bits_[0] |= 0x00000001u;
  if (noise_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::model::NoiseModel>(GetArena());
    noise_model_ = p;
  }
  return noise_model_;
}
inline ::lm::model::NoiseModel* ReactionModel::mutable_noise_model() {
  // @@protoc_insertion_point(field_mutable:lm.input.ReactionModel.noise_model)
  return _internal_mutable_noise_model();
}
inline void ReactionModel::set_allocated_noise_model(::lm::model::NoiseModel* noise_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(noise_model_);
  }
  if (noise_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noise_model)->GetArena();
    if (message_arena != submessage_arena) {
      noise_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noise_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  noise_model_ = noise_model;
  // @@protoc_insertion_point(field_set_allocated:lm.input.ReactionModel.noise_model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace input
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fReactionModel_2eproto
