// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/Input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fInput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fInput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/input/CMERestart.pb.h"
#include "lm/input/DiffusionModel.pb.h"
#include "lm/input/MicroenvironmentModel.pb.h"
#include "lm/input/OutputOptions.pb.h"
#include "lm/input/RDMERestart.pb.h"
#include "lm/input/ReactionModel.pb.h"
#include "lm/input/SimulationOptions.pb.h"
#include "lm/input/ffpilot/FFPilotOptions.pb.h"
#include "lm/types/OrderParameters.pb.h"
#include "lm/types/Tilings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fInput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2finput_2fInput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fInput_2eproto;
namespace lm {
namespace input {
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::input::Input* Arena::CreateMaybeMessage<::lm::input::Input>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace input {

// ===================================================================

class Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.input.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.input.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2finput_2fInput_2eproto);
    return ::descriptor_table_lm_2finput_2fInput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimulationOptionsFieldNumber = 1,
    kOutputOptionsFieldNumber = 2,
    kReactionModelFieldNumber = 10,
    kDiffusionModelFieldNumber = 11,
    kMicroenvModelFieldNumber = 12,
    kOrderParametersFieldNumber = 100,
    kTilingsFieldNumber = 101,
    kFfpilotOptionsFieldNumber = 200,
    kCmeRestartFieldNumber = 1000,
    kRdmeRestartFieldNumber = 1001,
  };
  // optional .lm.input.SimulationOptions simulation_options = 1;
  bool has_simulation_options() const;
  private:
  bool _internal_has_simulation_options() const;
  public:
  void clear_simulation_options();
  const ::lm::input::SimulationOptions& simulation_options() const;
  ::lm::input::SimulationOptions* release_simulation_options();
  ::lm::input::SimulationOptions* mutable_simulation_options();
  void set_allocated_simulation_options(::lm::input::SimulationOptions* simulation_options);
  private:
  const ::lm::input::SimulationOptions& _internal_simulation_options() const;
  ::lm::input::SimulationOptions* _internal_mutable_simulation_options();
  public:
  void unsafe_arena_set_allocated_simulation_options(
      ::lm::input::SimulationOptions* simulation_options);
  ::lm::input::SimulationOptions* unsafe_arena_release_simulation_options();

  // optional .lm.input.OutputOptions output_options = 2;
  bool has_output_options() const;
  private:
  bool _internal_has_output_options() const;
  public:
  void clear_output_options();
  const ::lm::input::OutputOptions& output_options() const;
  ::lm::input::OutputOptions* release_output_options();
  ::lm::input::OutputOptions* mutable_output_options();
  void set_allocated_output_options(::lm::input::OutputOptions* output_options);
  private:
  const ::lm::input::OutputOptions& _internal_output_options() const;
  ::lm::input::OutputOptions* _internal_mutable_output_options();
  public:
  void unsafe_arena_set_allocated_output_options(
      ::lm::input::OutputOptions* output_options);
  ::lm::input::OutputOptions* unsafe_arena_release_output_options();

  // optional .lm.input.ReactionModel reaction_model = 10;
  bool has_reaction_model() const;
  private:
  bool _internal_has_reaction_model() const;
  public:
  void clear_reaction_model();
  const ::lm::input::ReactionModel& reaction_model() const;
  ::lm::input::ReactionModel* release_reaction_model();
  ::lm::input::ReactionModel* mutable_reaction_model();
  void set_allocated_reaction_model(::lm::input::ReactionModel* reaction_model);
  private:
  const ::lm::input::ReactionModel& _internal_reaction_model() const;
  ::lm::input::ReactionModel* _internal_mutable_reaction_model();
  public:
  void unsafe_arena_set_allocated_reaction_model(
      ::lm::input::ReactionModel* reaction_model);
  ::lm::input::ReactionModel* unsafe_arena_release_reaction_model();

  // optional .lm.input.DiffusionModel diffusion_model = 11;
  bool has_diffusion_model() const;
  private:
  bool _internal_has_diffusion_model() const;
  public:
  void clear_diffusion_model();
  const ::lm::input::DiffusionModel& diffusion_model() const;
  ::lm::input::DiffusionModel* release_diffusion_model();
  ::lm::input::DiffusionModel* mutable_diffusion_model();
  void set_allocated_diffusion_model(::lm::input::DiffusionModel* diffusion_model);
  private:
  const ::lm::input::DiffusionModel& _internal_diffusion_model() const;
  ::lm::input::DiffusionModel* _internal_mutable_diffusion_model();
  public:
  void unsafe_arena_set_allocated_diffusion_model(
      ::lm::input::DiffusionModel* diffusion_model);
  ::lm::input::DiffusionModel* unsafe_arena_release_diffusion_model();

  // optional .lm.input.MicroenvironmentModel microenv_model = 12;
  bool has_microenv_model() const;
  private:
  bool _internal_has_microenv_model() const;
  public:
  void clear_microenv_model();
  const ::lm::input::MicroenvironmentModel& microenv_model() const;
  ::lm::input::MicroenvironmentModel* release_microenv_model();
  ::lm::input::MicroenvironmentModel* mutable_microenv_model();
  void set_allocated_microenv_model(::lm::input::MicroenvironmentModel* microenv_model);
  private:
  const ::lm::input::MicroenvironmentModel& _internal_microenv_model() const;
  ::lm::input::MicroenvironmentModel* _internal_mutable_microenv_model();
  public:
  void unsafe_arena_set_allocated_microenv_model(
      ::lm::input::MicroenvironmentModel* microenv_model);
  ::lm::input::MicroenvironmentModel* unsafe_arena_release_microenv_model();

  // optional .lm.types.OrderParameters order_parameters = 100;
  bool has_order_parameters() const;
  private:
  bool _internal_has_order_parameters() const;
  public:
  void clear_order_parameters();
  const ::lm::types::OrderParameters& order_parameters() const;
  ::lm::types::OrderParameters* release_order_parameters();
  ::lm::types::OrderParameters* mutable_order_parameters();
  void set_allocated_order_parameters(::lm::types::OrderParameters* order_parameters);
  private:
  const ::lm::types::OrderParameters& _internal_order_parameters() const;
  ::lm::types::OrderParameters* _internal_mutable_order_parameters();
  public:
  void unsafe_arena_set_allocated_order_parameters(
      ::lm::types::OrderParameters* order_parameters);
  ::lm::types::OrderParameters* unsafe_arena_release_order_parameters();

  // optional .lm.types.Tilings tilings = 101;
  bool has_tilings() const;
  private:
  bool _internal_has_tilings() const;
  public:
  void clear_tilings();
  const ::lm::types::Tilings& tilings() const;
  ::lm::types::Tilings* release_tilings();
  ::lm::types::Tilings* mutable_tilings();
  void set_allocated_tilings(::lm::types::Tilings* tilings);
  private:
  const ::lm::types::Tilings& _internal_tilings() const;
  ::lm::types::Tilings* _internal_mutable_tilings();
  public:
  void unsafe_arena_set_allocated_tilings(
      ::lm::types::Tilings* tilings);
  ::lm::types::Tilings* unsafe_arena_release_tilings();

  // optional .lm.input.ffpilot.FFPilotOptions ffpilot_options = 200;
  bool has_ffpilot_options() const;
  private:
  bool _internal_has_ffpilot_options() const;
  public:
  void clear_ffpilot_options();
  const ::lm::input::ffpilot::FFPilotOptions& ffpilot_options() const;
  ::lm::input::ffpilot::FFPilotOptions* release_ffpilot_options();
  ::lm::input::ffpilot::FFPilotOptions* mutable_ffpilot_options();
  void set_allocated_ffpilot_options(::lm::input::ffpilot::FFPilotOptions* ffpilot_options);
  private:
  const ::lm::input::ffpilot::FFPilotOptions& _internal_ffpilot_options() const;
  ::lm::input::ffpilot::FFPilotOptions* _internal_mutable_ffpilot_options();
  public:
  void unsafe_arena_set_allocated_ffpilot_options(
      ::lm::input::ffpilot::FFPilotOptions* ffpilot_options);
  ::lm::input::ffpilot::FFPilotOptions* unsafe_arena_release_ffpilot_options();

  // optional .lm.input.CMERestart cme_restart = 1000;
  bool has_cme_restart() const;
  private:
  bool _internal_has_cme_restart() const;
  public:
  void clear_cme_restart();
  const ::lm::input::CMERestart& cme_restart() const;
  ::lm::input::CMERestart* release_cme_restart();
  ::lm::input::CMERestart* mutable_cme_restart();
  void set_allocated_cme_restart(::lm::input::CMERestart* cme_restart);
  private:
  const ::lm::input::CMERestart& _internal_cme_restart() const;
  ::lm::input::CMERestart* _internal_mutable_cme_restart();
  public:
  void unsafe_arena_set_allocated_cme_restart(
      ::lm::input::CMERestart* cme_restart);
  ::lm::input::CMERestart* unsafe_arena_release_cme_restart();

  // optional .lm.input.RDMERestart rdme_restart = 1001;
  bool has_rdme_restart() const;
  private:
  bool _internal_has_rdme_restart() const;
  public:
  void clear_rdme_restart();
  const ::lm::input::RDMERestart& rdme_restart() const;
  ::lm::input::RDMERestart* release_rdme_restart();
  ::lm::input::RDMERestart* mutable_rdme_restart();
  void set_allocated_rdme_restart(::lm::input::RDMERestart* rdme_restart);
  private:
  const ::lm::input::RDMERestart& _internal_rdme_restart() const;
  ::lm::input::RDMERestart* _internal_mutable_rdme_restart();
  public:
  void unsafe_arena_set_allocated_rdme_restart(
      ::lm::input::RDMERestart* rdme_restart);
  ::lm::input::RDMERestart* unsafe_arena_release_rdme_restart();

  // @@protoc_insertion_point(class_scope:lm.input.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::lm::input::SimulationOptions* simulation_options_;
  ::lm::input::OutputOptions* output_options_;
  ::lm::input::ReactionModel* reaction_model_;
  ::lm::input::DiffusionModel* diffusion_model_;
  ::lm::input::MicroenvironmentModel* microenv_model_;
  ::lm::types::OrderParameters* order_parameters_;
  ::lm::types::Tilings* tilings_;
  ::lm::input::ffpilot::FFPilotOptions* ffpilot_options_;
  ::lm::input::CMERestart* cme_restart_;
  ::lm::input::RDMERestart* rdme_restart_;
  friend struct ::TableStruct_lm_2finput_2fInput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Input

// optional .lm.input.SimulationOptions simulation_options = 1;
inline bool Input::_internal_has_simulation_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || simulation_options_ != nullptr);
  return value;
}
inline bool Input::has_simulation_options() const {
  return _internal_has_simulation_options();
}
inline const ::lm::input::SimulationOptions& Input::_internal_simulation_options() const {
  const ::lm::input::SimulationOptions* p = simulation_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::SimulationOptions*>(
      &::lm::input::_SimulationOptions_default_instance_);
}
inline const ::lm::input::SimulationOptions& Input::simulation_options() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.simulation_options)
  return _internal_simulation_options();
}
inline void Input::unsafe_arena_set_allocated_simulation_options(
    ::lm::input::SimulationOptions* simulation_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simulation_options_);
  }
  simulation_options_ = simulation_options;
  if (simulation_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.simulation_options)
}
inline ::lm::input::SimulationOptions* Input::release_simulation_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::input::SimulationOptions* temp = simulation_options_;
  simulation_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::SimulationOptions* Input::unsafe_arena_release_simulation_options() {
  // @@protoc_insertion_point(field_release:lm.input.Input.simulation_options)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::input::SimulationOptions* temp = simulation_options_;
  simulation_options_ = nullptr;
  return temp;
}
inline ::lm::input::SimulationOptions* Input::_internal_mutable_simulation_options() {
  _has_bits_[0] |= 0x00000001u;
  if (simulation_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::SimulationOptions>(GetArena());
    simulation_options_ = p;
  }
  return simulation_options_;
}
inline ::lm::input::SimulationOptions* Input::mutable_simulation_options() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.simulation_options)
  return _internal_mutable_simulation_options();
}
inline void Input::set_allocated_simulation_options(::lm::input::SimulationOptions* simulation_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(simulation_options_);
  }
  if (simulation_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simulation_options)->GetArena();
    if (message_arena != submessage_arena) {
      simulation_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simulation_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  simulation_options_ = simulation_options;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.simulation_options)
}

// optional .lm.input.OutputOptions output_options = 2;
inline bool Input::_internal_has_output_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || output_options_ != nullptr);
  return value;
}
inline bool Input::has_output_options() const {
  return _internal_has_output_options();
}
inline const ::lm::input::OutputOptions& Input::_internal_output_options() const {
  const ::lm::input::OutputOptions* p = output_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::OutputOptions*>(
      &::lm::input::_OutputOptions_default_instance_);
}
inline const ::lm::input::OutputOptions& Input::output_options() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.output_options)
  return _internal_output_options();
}
inline void Input::unsafe_arena_set_allocated_output_options(
    ::lm::input::OutputOptions* output_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_options_);
  }
  output_options_ = output_options;
  if (output_options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.output_options)
}
inline ::lm::input::OutputOptions* Input::release_output_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::lm::input::OutputOptions* temp = output_options_;
  output_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::OutputOptions* Input::unsafe_arena_release_output_options() {
  // @@protoc_insertion_point(field_release:lm.input.Input.output_options)
  _has_bits_[0] &= ~0x00000002u;
  ::lm::input::OutputOptions* temp = output_options_;
  output_options_ = nullptr;
  return temp;
}
inline ::lm::input::OutputOptions* Input::_internal_mutable_output_options() {
  _has_bits_[0] |= 0x00000002u;
  if (output_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::OutputOptions>(GetArena());
    output_options_ = p;
  }
  return output_options_;
}
inline ::lm::input::OutputOptions* Input::mutable_output_options() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.output_options)
  return _internal_mutable_output_options();
}
inline void Input::set_allocated_output_options(::lm::input::OutputOptions* output_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_options_);
  }
  if (output_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_options)->GetArena();
    if (message_arena != submessage_arena) {
      output_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_options_ = output_options;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.output_options)
}

// optional .lm.input.ReactionModel reaction_model = 10;
inline bool Input::_internal_has_reaction_model() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reaction_model_ != nullptr);
  return value;
}
inline bool Input::has_reaction_model() const {
  return _internal_has_reaction_model();
}
inline const ::lm::input::ReactionModel& Input::_internal_reaction_model() const {
  const ::lm::input::ReactionModel* p = reaction_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::ReactionModel*>(
      &::lm::input::_ReactionModel_default_instance_);
}
inline const ::lm::input::ReactionModel& Input::reaction_model() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.reaction_model)
  return _internal_reaction_model();
}
inline void Input::unsafe_arena_set_allocated_reaction_model(
    ::lm::input::ReactionModel* reaction_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reaction_model_);
  }
  reaction_model_ = reaction_model;
  if (reaction_model) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.reaction_model)
}
inline ::lm::input::ReactionModel* Input::release_reaction_model() {
  _has_bits_[0] &= ~0x00000004u;
  ::lm::input::ReactionModel* temp = reaction_model_;
  reaction_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::ReactionModel* Input::unsafe_arena_release_reaction_model() {
  // @@protoc_insertion_point(field_release:lm.input.Input.reaction_model)
  _has_bits_[0] &= ~0x00000004u;
  ::lm::input::ReactionModel* temp = reaction_model_;
  reaction_model_ = nullptr;
  return temp;
}
inline ::lm::input::ReactionModel* Input::_internal_mutable_reaction_model() {
  _has_bits_[0] |= 0x00000004u;
  if (reaction_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::ReactionModel>(GetArena());
    reaction_model_ = p;
  }
  return reaction_model_;
}
inline ::lm::input::ReactionModel* Input::mutable_reaction_model() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.reaction_model)
  return _internal_mutable_reaction_model();
}
inline void Input::set_allocated_reaction_model(::lm::input::ReactionModel* reaction_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reaction_model_);
  }
  if (reaction_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reaction_model)->GetArena();
    if (message_arena != submessage_arena) {
      reaction_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reaction_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reaction_model_ = reaction_model;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.reaction_model)
}

// optional .lm.input.DiffusionModel diffusion_model = 11;
inline bool Input::_internal_has_diffusion_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || diffusion_model_ != nullptr);
  return value;
}
inline bool Input::has_diffusion_model() const {
  return _internal_has_diffusion_model();
}
inline const ::lm::input::DiffusionModel& Input::_internal_diffusion_model() const {
  const ::lm::input::DiffusionModel* p = diffusion_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::DiffusionModel*>(
      &::lm::input::_DiffusionModel_default_instance_);
}
inline const ::lm::input::DiffusionModel& Input::diffusion_model() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.diffusion_model)
  return _internal_diffusion_model();
}
inline void Input::unsafe_arena_set_allocated_diffusion_model(
    ::lm::input::DiffusionModel* diffusion_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_model_);
  }
  diffusion_model_ = diffusion_model;
  if (diffusion_model) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.diffusion_model)
}
inline ::lm::input::DiffusionModel* Input::release_diffusion_model() {
  _has_bits_[0] &= ~0x00000008u;
  ::lm::input::DiffusionModel* temp = diffusion_model_;
  diffusion_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::DiffusionModel* Input::unsafe_arena_release_diffusion_model() {
  // @@protoc_insertion_point(field_release:lm.input.Input.diffusion_model)
  _has_bits_[0] &= ~0x00000008u;
  ::lm::input::DiffusionModel* temp = diffusion_model_;
  diffusion_model_ = nullptr;
  return temp;
}
inline ::lm::input::DiffusionModel* Input::_internal_mutable_diffusion_model() {
  _has_bits_[0] |= 0x00000008u;
  if (diffusion_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::DiffusionModel>(GetArena());
    diffusion_model_ = p;
  }
  return diffusion_model_;
}
inline ::lm::input::DiffusionModel* Input::mutable_diffusion_model() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.diffusion_model)
  return _internal_mutable_diffusion_model();
}
inline void Input::set_allocated_diffusion_model(::lm::input::DiffusionModel* diffusion_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_model_);
  }
  if (diffusion_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_model)->GetArena();
    if (message_arena != submessage_arena) {
      diffusion_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffusion_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  diffusion_model_ = diffusion_model;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.diffusion_model)
}

// optional .lm.input.MicroenvironmentModel microenv_model = 12;
inline bool Input::_internal_has_microenv_model() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || microenv_model_ != nullptr);
  return value;
}
inline bool Input::has_microenv_model() const {
  return _internal_has_microenv_model();
}
inline const ::lm::input::MicroenvironmentModel& Input::_internal_microenv_model() const {
  const ::lm::input::MicroenvironmentModel* p = microenv_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::MicroenvironmentModel*>(
      &::lm::input::_MicroenvironmentModel_default_instance_);
}
inline const ::lm::input::MicroenvironmentModel& Input::microenv_model() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.microenv_model)
  return _internal_microenv_model();
}
inline void Input::unsafe_arena_set_allocated_microenv_model(
    ::lm::input::MicroenvironmentModel* microenv_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(microenv_model_);
  }
  microenv_model_ = microenv_model;
  if (microenv_model) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.microenv_model)
}
inline ::lm::input::MicroenvironmentModel* Input::release_microenv_model() {
  _has_bits_[0] &= ~0x00000010u;
  ::lm::input::MicroenvironmentModel* temp = microenv_model_;
  microenv_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::MicroenvironmentModel* Input::unsafe_arena_release_microenv_model() {
  // @@protoc_insertion_point(field_release:lm.input.Input.microenv_model)
  _has_bits_[0] &= ~0x00000010u;
  ::lm::input::MicroenvironmentModel* temp = microenv_model_;
  microenv_model_ = nullptr;
  return temp;
}
inline ::lm::input::MicroenvironmentModel* Input::_internal_mutable_microenv_model() {
  _has_bits_[0] |= 0x00000010u;
  if (microenv_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::MicroenvironmentModel>(GetArena());
    microenv_model_ = p;
  }
  return microenv_model_;
}
inline ::lm::input::MicroenvironmentModel* Input::mutable_microenv_model() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.microenv_model)
  return _internal_mutable_microenv_model();
}
inline void Input::set_allocated_microenv_model(::lm::input::MicroenvironmentModel* microenv_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(microenv_model_);
  }
  if (microenv_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(microenv_model)->GetArena();
    if (message_arena != submessage_arena) {
      microenv_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, microenv_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  microenv_model_ = microenv_model;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.microenv_model)
}

// optional .lm.types.OrderParameters order_parameters = 100;
inline bool Input::_internal_has_order_parameters() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || order_parameters_ != nullptr);
  return value;
}
inline bool Input::has_order_parameters() const {
  return _internal_has_order_parameters();
}
inline const ::lm::types::OrderParameters& Input::_internal_order_parameters() const {
  const ::lm::types::OrderParameters* p = order_parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::OrderParameters*>(
      &::lm::types::_OrderParameters_default_instance_);
}
inline const ::lm::types::OrderParameters& Input::order_parameters() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.order_parameters)
  return _internal_order_parameters();
}
inline void Input::unsafe_arena_set_allocated_order_parameters(
    ::lm::types::OrderParameters* order_parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameters_);
  }
  order_parameters_ = order_parameters;
  if (order_parameters) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.order_parameters)
}
inline ::lm::types::OrderParameters* Input::release_order_parameters() {
  _has_bits_[0] &= ~0x00000020u;
  ::lm::types::OrderParameters* temp = order_parameters_;
  order_parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::OrderParameters* Input::unsafe_arena_release_order_parameters() {
  // @@protoc_insertion_point(field_release:lm.input.Input.order_parameters)
  _has_bits_[0] &= ~0x00000020u;
  ::lm::types::OrderParameters* temp = order_parameters_;
  order_parameters_ = nullptr;
  return temp;
}
inline ::lm::types::OrderParameters* Input::_internal_mutable_order_parameters() {
  _has_bits_[0] |= 0x00000020u;
  if (order_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::OrderParameters>(GetArena());
    order_parameters_ = p;
  }
  return order_parameters_;
}
inline ::lm::types::OrderParameters* Input::mutable_order_parameters() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.order_parameters)
  return _internal_mutable_order_parameters();
}
inline void Input::set_allocated_order_parameters(::lm::types::OrderParameters* order_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameters_);
  }
  if (order_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameters)->GetArena();
    if (message_arena != submessage_arena) {
      order_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  order_parameters_ = order_parameters;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.order_parameters)
}

// optional .lm.types.Tilings tilings = 101;
inline bool Input::_internal_has_tilings() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tilings_ != nullptr);
  return value;
}
inline bool Input::has_tilings() const {
  return _internal_has_tilings();
}
inline const ::lm::types::Tilings& Input::_internal_tilings() const {
  const ::lm::types::Tilings* p = tilings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::Tilings*>(
      &::lm::types::_Tilings_default_instance_);
}
inline const ::lm::types::Tilings& Input::tilings() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.tilings)
  return _internal_tilings();
}
inline void Input::unsafe_arena_set_allocated_tilings(
    ::lm::types::Tilings* tilings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tilings_);
  }
  tilings_ = tilings;
  if (tilings) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.tilings)
}
inline ::lm::types::Tilings* Input::release_tilings() {
  _has_bits_[0] &= ~0x00000040u;
  ::lm::types::Tilings* temp = tilings_;
  tilings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::Tilings* Input::unsafe_arena_release_tilings() {
  // @@protoc_insertion_point(field_release:lm.input.Input.tilings)
  _has_bits_[0] &= ~0x00000040u;
  ::lm::types::Tilings* temp = tilings_;
  tilings_ = nullptr;
  return temp;
}
inline ::lm::types::Tilings* Input::_internal_mutable_tilings() {
  _has_bits_[0] |= 0x00000040u;
  if (tilings_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::Tilings>(GetArena());
    tilings_ = p;
  }
  return tilings_;
}
inline ::lm::types::Tilings* Input::mutable_tilings() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.tilings)
  return _internal_mutable_tilings();
}
inline void Input::set_allocated_tilings(::lm::types::Tilings* tilings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tilings_);
  }
  if (tilings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tilings)->GetArena();
    if (message_arena != submessage_arena) {
      tilings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tilings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tilings_ = tilings;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.tilings)
}

// optional .lm.input.ffpilot.FFPilotOptions ffpilot_options = 200;
inline bool Input::_internal_has_ffpilot_options() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || ffpilot_options_ != nullptr);
  return value;
}
inline bool Input::has_ffpilot_options() const {
  return _internal_has_ffpilot_options();
}
inline const ::lm::input::ffpilot::FFPilotOptions& Input::_internal_ffpilot_options() const {
  const ::lm::input::ffpilot::FFPilotOptions* p = ffpilot_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::ffpilot::FFPilotOptions*>(
      &::lm::input::ffpilot::_FFPilotOptions_default_instance_);
}
inline const ::lm::input::ffpilot::FFPilotOptions& Input::ffpilot_options() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.ffpilot_options)
  return _internal_ffpilot_options();
}
inline void Input::unsafe_arena_set_allocated_ffpilot_options(
    ::lm::input::ffpilot::FFPilotOptions* ffpilot_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ffpilot_options_);
  }
  ffpilot_options_ = ffpilot_options;
  if (ffpilot_options) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.ffpilot_options)
}
inline ::lm::input::ffpilot::FFPilotOptions* Input::release_ffpilot_options() {
  _has_bits_[0] &= ~0x00000080u;
  ::lm::input::ffpilot::FFPilotOptions* temp = ffpilot_options_;
  ffpilot_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::ffpilot::FFPilotOptions* Input::unsafe_arena_release_ffpilot_options() {
  // @@protoc_insertion_point(field_release:lm.input.Input.ffpilot_options)
  _has_bits_[0] &= ~0x00000080u;
  ::lm::input::ffpilot::FFPilotOptions* temp = ffpilot_options_;
  ffpilot_options_ = nullptr;
  return temp;
}
inline ::lm::input::ffpilot::FFPilotOptions* Input::_internal_mutable_ffpilot_options() {
  _has_bits_[0] |= 0x00000080u;
  if (ffpilot_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::ffpilot::FFPilotOptions>(GetArena());
    ffpilot_options_ = p;
  }
  return ffpilot_options_;
}
inline ::lm::input::ffpilot::FFPilotOptions* Input::mutable_ffpilot_options() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.ffpilot_options)
  return _internal_mutable_ffpilot_options();
}
inline void Input::set_allocated_ffpilot_options(::lm::input::ffpilot::FFPilotOptions* ffpilot_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ffpilot_options_);
  }
  if (ffpilot_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ffpilot_options)->GetArena();
    if (message_arena != submessage_arena) {
      ffpilot_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ffpilot_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ffpilot_options_ = ffpilot_options;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.ffpilot_options)
}

// optional .lm.input.CMERestart cme_restart = 1000;
inline bool Input::_internal_has_cme_restart() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || cme_restart_ != nullptr);
  return value;
}
inline bool Input::has_cme_restart() const {
  return _internal_has_cme_restart();
}
inline const ::lm::input::CMERestart& Input::_internal_cme_restart() const {
  const ::lm::input::CMERestart* p = cme_restart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::CMERestart*>(
      &::lm::input::_CMERestart_default_instance_);
}
inline const ::lm::input::CMERestart& Input::cme_restart() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.cme_restart)
  return _internal_cme_restart();
}
inline void Input::unsafe_arena_set_allocated_cme_restart(
    ::lm::input::CMERestart* cme_restart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cme_restart_);
  }
  cme_restart_ = cme_restart;
  if (cme_restart) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.cme_restart)
}
inline ::lm::input::CMERestart* Input::release_cme_restart() {
  _has_bits_[0] &= ~0x00000100u;
  ::lm::input::CMERestart* temp = cme_restart_;
  cme_restart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::CMERestart* Input::unsafe_arena_release_cme_restart() {
  // @@protoc_insertion_point(field_release:lm.input.Input.cme_restart)
  _has_bits_[0] &= ~0x00000100u;
  ::lm::input::CMERestart* temp = cme_restart_;
  cme_restart_ = nullptr;
  return temp;
}
inline ::lm::input::CMERestart* Input::_internal_mutable_cme_restart() {
  _has_bits_[0] |= 0x00000100u;
  if (cme_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::CMERestart>(GetArena());
    cme_restart_ = p;
  }
  return cme_restart_;
}
inline ::lm::input::CMERestart* Input::mutable_cme_restart() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.cme_restart)
  return _internal_mutable_cme_restart();
}
inline void Input::set_allocated_cme_restart(::lm::input::CMERestart* cme_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cme_restart_);
  }
  if (cme_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cme_restart)->GetArena();
    if (message_arena != submessage_arena) {
      cme_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cme_restart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  cme_restart_ = cme_restart;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.cme_restart)
}

// optional .lm.input.RDMERestart rdme_restart = 1001;
inline bool Input::_internal_has_rdme_restart() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || rdme_restart_ != nullptr);
  return value;
}
inline bool Input::has_rdme_restart() const {
  return _internal_has_rdme_restart();
}
inline const ::lm::input::RDMERestart& Input::_internal_rdme_restart() const {
  const ::lm::input::RDMERestart* p = rdme_restart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::RDMERestart*>(
      &::lm::input::_RDMERestart_default_instance_);
}
inline const ::lm::input::RDMERestart& Input::rdme_restart() const {
  // @@protoc_insertion_point(field_get:lm.input.Input.rdme_restart)
  return _internal_rdme_restart();
}
inline void Input::unsafe_arena_set_allocated_rdme_restart(
    ::lm::input::RDMERestart* rdme_restart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdme_restart_);
  }
  rdme_restart_ = rdme_restart;
  if (rdme_restart) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.Input.rdme_restart)
}
inline ::lm::input::RDMERestart* Input::release_rdme_restart() {
  _has_bits_[0] &= ~0x00000200u;
  ::lm::input::RDMERestart* temp = rdme_restart_;
  rdme_restart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::RDMERestart* Input::unsafe_arena_release_rdme_restart() {
  // @@protoc_insertion_point(field_release:lm.input.Input.rdme_restart)
  _has_bits_[0] &= ~0x00000200u;
  ::lm::input::RDMERestart* temp = rdme_restart_;
  rdme_restart_ = nullptr;
  return temp;
}
inline ::lm::input::RDMERestart* Input::_internal_mutable_rdme_restart() {
  _has_bits_[0] |= 0x00000200u;
  if (rdme_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::RDMERestart>(GetArena());
    rdme_restart_ = p;
  }
  return rdme_restart_;
}
inline ::lm::input::RDMERestart* Input::mutable_rdme_restart() {
  // @@protoc_insertion_point(field_mutable:lm.input.Input.rdme_restart)
  return _internal_mutable_rdme_restart();
}
inline void Input::set_allocated_rdme_restart(::lm::input::RDMERestart* rdme_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdme_restart_);
  }
  if (rdme_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdme_restart)->GetArena();
    if (message_arena != submessage_arena) {
      rdme_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rdme_restart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  rdme_restart_ = rdme_restart;
  // @@protoc_insertion_point(field_set_allocated:lm.input.Input.rdme_restart)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace input
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fInput_2eproto
