// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/OutputOptions.proto

#include "lm/input/OutputOptions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace lm {
namespace input {
class OutputOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputOptions> _instance;
} _OutputOptions_default_instance_;
}  // namespace input
}  // namespace lm
static void InitDefaultsscc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_OutputOptions_default_instance_;
    new (ptr) ::lm::input::OutputOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::OutputOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2finput_2fOutputOptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2finput_2fOutputOptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2finput_2fOutputOptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2finput_2fOutputOptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, record_name_prefix_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, write_initial_trajectory_state_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, write_final_trajectory_state_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, species_write_interval_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, lattice_write_interval_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, concentrations_write_interval_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, degree_advancement_write_interval_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, order_parameter_write_interval_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, stochastic_process_write_interval_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, fpt_species_to_track_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, fpt_order_parameter_to_track_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, histogram_begin_time_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, histogram_end_time_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OutputOptions, tiling_to_histogram_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  ~0u,
  9,
  10,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::lm::input::OutputOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_OutputOptions_default_instance_),
};

const char descriptor_table_protodef_lm_2finput_2fOutputOptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034lm/input/OutputOptions.proto\022\010lm.input"
  "\"\207\004\n\rOutputOptions\022\032\n\022record_name_prefix"
  "\030\001 \001(\t\022-\n\036write_initial_trajectory_state"
  "\030\013 \001(\010:\005false\022+\n\034write_final_trajectory_"
  "state\030\014 \001(\010:\005false\022\036\n\026species_write_inte"
  "rval\030\025 \001(\001\022\036\n\026lattice_write_interval\030\026 \001"
  "(\001\022%\n\035concentrations_write_interval\030\027 \001("
  "\001\022)\n!degree_advancement_write_interval\030\030"
  " \001(\001\022&\n\036order_parameter_write_interval\030\031"
  " \001(\001\022)\n!stochastic_process_write_interva"
  "l\030\032 \001(\001\022\034\n\024fpt_species_to_track\030  \003(\r\022$\n"
  "\034fpt_order_parameter_to_track\030! \003(\r\022\034\n\024h"
  "istogram_begin_time\030< \001(\001\022\032\n\022histogram_e"
  "nd_time\030= \001(\001\022\033\n\023tiling_to_histogram\030> \003"
  "(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2finput_2fOutputOptions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2finput_2fOutputOptions_2eproto_sccs[1] = {
  &scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2finput_2fOutputOptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fOutputOptions_2eproto = {
  false, false, descriptor_table_protodef_lm_2finput_2fOutputOptions_2eproto, "lm/input/OutputOptions.proto", 562,
  &descriptor_table_lm_2finput_2fOutputOptions_2eproto_once, descriptor_table_lm_2finput_2fOutputOptions_2eproto_sccs, descriptor_table_lm_2finput_2fOutputOptions_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_lm_2finput_2fOutputOptions_2eproto::offsets,
  file_level_metadata_lm_2finput_2fOutputOptions_2eproto, 1, file_level_enum_descriptors_lm_2finput_2fOutputOptions_2eproto, file_level_service_descriptors_lm_2finput_2fOutputOptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2finput_2fOutputOptions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2finput_2fOutputOptions_2eproto)), true);
namespace lm {
namespace input {

// ===================================================================

void OutputOptions::InitAsDefaultInstance() {
}
class OutputOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputOptions>()._has_bits_);
  static void set_has_record_name_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_write_initial_trajectory_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_write_final_trajectory_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_species_write_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lattice_write_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_concentrations_write_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_degree_advancement_write_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_order_parameter_write_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stochastic_process_write_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_histogram_begin_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_histogram_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

OutputOptions::OutputOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fpt_species_to_track_(arena),
  fpt_order_parameter_to_track_(arena),
  tiling_to_histogram_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.OutputOptions)
}
OutputOptions::OutputOptions(const OutputOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fpt_species_to_track_(from.fpt_species_to_track_),
      fpt_order_parameter_to_track_(from.fpt_order_parameter_to_track_),
      tiling_to_histogram_(from.tiling_to_histogram_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_record_name_prefix()) {
    record_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name_prefix(),
      GetArena());
  }
  ::memcpy(&write_initial_trajectory_state_, &from.write_initial_trajectory_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&histogram_end_time_) -
    reinterpret_cast<char*>(&write_initial_trajectory_state_)) + sizeof(histogram_end_time_));
  // @@protoc_insertion_point(copy_constructor:lm.input.OutputOptions)
}

void OutputOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto.base);
  record_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&write_initial_trajectory_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&histogram_end_time_) -
      reinterpret_cast<char*>(&write_initial_trajectory_state_)) + sizeof(histogram_end_time_));
}

OutputOptions::~OutputOptions() {
  // @@protoc_insertion_point(destructor:lm.input.OutputOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutputOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputOptions::ArenaDtor(void* object) {
  OutputOptions* _this = reinterpret_cast< OutputOptions* >(object);
  (void)_this;
}
void OutputOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputOptions& OutputOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto.base);
  return *internal_default_instance();
}


void OutputOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.OutputOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fpt_species_to_track_.Clear();
  fpt_order_parameter_to_track_.Clear();
  tiling_to_histogram_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    record_name_prefix_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&write_initial_trajectory_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_parameter_write_interval_) -
        reinterpret_cast<char*>(&write_initial_trajectory_state_)) + sizeof(order_parameter_write_interval_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&stochastic_process_write_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&histogram_end_time_) -
        reinterpret_cast<char*>(&stochastic_process_write_interval_)) + sizeof(histogram_end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string record_name_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_name_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lm.input.OutputOptions.record_name_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool write_initial_trajectory_state = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_write_initial_trajectory_state(&has_bits);
          write_initial_trajectory_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool write_final_trajectory_state = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_write_final_trajectory_state(&has_bits);
          write_final_trajectory_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double species_write_interval = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_species_write_interval(&has_bits);
          species_write_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lattice_write_interval = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_lattice_write_interval(&has_bits);
          lattice_write_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double concentrations_write_interval = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_concentrations_write_interval(&has_bits);
          concentrations_write_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double degree_advancement_write_interval = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_degree_advancement_write_interval(&has_bits);
          degree_advancement_write_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double order_parameter_write_interval = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_order_parameter_write_interval(&has_bits);
          order_parameter_write_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stochastic_process_write_interval = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_stochastic_process_write_interval(&has_bits);
          stochastic_process_write_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint32 fpt_species_to_track = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_fpt_species_to_track(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fpt_species_to_track(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 fpt_order_parameter_to_track = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_fpt_order_parameter_to_track(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fpt_order_parameter_to_track(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double histogram_begin_time = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_histogram_begin_time(&has_bits);
          histogram_begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double histogram_end_time = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_histogram_end_time(&has_bits);
          histogram_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint32 tiling_to_histogram = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_tiling_to_histogram(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<496>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tiling_to_histogram(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.OutputOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string record_name_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_record_name_prefix().data(), static_cast<int>(this->_internal_record_name_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lm.input.OutputOptions.record_name_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_record_name_prefix(), target);
  }

  // optional bool write_initial_trajectory_state = 11 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_write_initial_trajectory_state(), target);
  }

  // optional bool write_final_trajectory_state = 12 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_write_final_trajectory_state(), target);
  }

  // optional double species_write_interval = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_species_write_interval(), target);
  }

  // optional double lattice_write_interval = 22;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_lattice_write_interval(), target);
  }

  // optional double concentrations_write_interval = 23;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_concentrations_write_interval(), target);
  }

  // optional double degree_advancement_write_interval = 24;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_degree_advancement_write_interval(), target);
  }

  // optional double order_parameter_write_interval = 25;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_order_parameter_write_interval(), target);
  }

  // optional double stochastic_process_write_interval = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_stochastic_process_write_interval(), target);
  }

  // repeated uint32 fpt_species_to_track = 32;
  for (int i = 0, n = this->_internal_fpt_species_to_track_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_fpt_species_to_track(i), target);
  }

  // repeated uint32 fpt_order_parameter_to_track = 33;
  for (int i = 0, n = this->_internal_fpt_order_parameter_to_track_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_fpt_order_parameter_to_track(i), target);
  }

  // optional double histogram_begin_time = 60;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(60, this->_internal_histogram_begin_time(), target);
  }

  // optional double histogram_end_time = 61;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(61, this->_internal_histogram_end_time(), target);
  }

  // repeated uint32 tiling_to_histogram = 62;
  for (int i = 0, n = this->_internal_tiling_to_histogram_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_tiling_to_histogram(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.OutputOptions)
  return target;
}

size_t OutputOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.OutputOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 fpt_species_to_track = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fpt_species_to_track_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fpt_species_to_track_size());
    total_size += data_size;
  }

  // repeated uint32 fpt_order_parameter_to_track = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fpt_order_parameter_to_track_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fpt_order_parameter_to_track_size());
    total_size += data_size;
  }

  // repeated uint32 tiling_to_histogram = 62;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tiling_to_histogram_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tiling_to_histogram_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string record_name_prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_record_name_prefix());
    }

    // optional bool write_initial_trajectory_state = 11 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool write_final_trajectory_state = 12 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double species_write_interval = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double lattice_write_interval = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double concentrations_write_interval = 23;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double degree_advancement_write_interval = 24;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double order_parameter_write_interval = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double stochastic_process_write_interval = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double histogram_begin_time = 60;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double histogram_end_time = 61;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.OutputOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.OutputOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.OutputOptions)
    MergeFrom(*source);
  }
}

void OutputOptions::MergeFrom(const OutputOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.OutputOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fpt_species_to_track_.MergeFrom(from.fpt_species_to_track_);
  fpt_order_parameter_to_track_.MergeFrom(from.fpt_order_parameter_to_track_);
  tiling_to_histogram_.MergeFrom(from.tiling_to_histogram_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_record_name_prefix(from._internal_record_name_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      write_initial_trajectory_state_ = from.write_initial_trajectory_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      write_final_trajectory_state_ = from.write_final_trajectory_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      species_write_interval_ = from.species_write_interval_;
    }
    if (cached_has_bits & 0x00000010u) {
      lattice_write_interval_ = from.lattice_write_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      concentrations_write_interval_ = from.concentrations_write_interval_;
    }
    if (cached_has_bits & 0x00000040u) {
      degree_advancement_write_interval_ = from.degree_advancement_write_interval_;
    }
    if (cached_has_bits & 0x00000080u) {
      order_parameter_write_interval_ = from.order_parameter_write_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      stochastic_process_write_interval_ = from.stochastic_process_write_interval_;
    }
    if (cached_has_bits & 0x00000200u) {
      histogram_begin_time_ = from.histogram_begin_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      histogram_end_time_ = from.histogram_end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutputOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.OutputOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputOptions::CopyFrom(const OutputOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.OutputOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputOptions::IsInitialized() const {
  return true;
}

void OutputOptions::InternalSwap(OutputOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fpt_species_to_track_.InternalSwap(&other->fpt_species_to_track_);
  fpt_order_parameter_to_track_.InternalSwap(&other->fpt_order_parameter_to_track_);
  tiling_to_histogram_.InternalSwap(&other->tiling_to_histogram_);
  record_name_prefix_.Swap(&other->record_name_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputOptions, histogram_end_time_)
      + sizeof(OutputOptions::histogram_end_time_)
      - PROTOBUF_FIELD_OFFSET(OutputOptions, write_initial_trajectory_state_)>(
          reinterpret_cast<char*>(&write_initial_trajectory_state_),
          reinterpret_cast<char*>(&other->write_initial_trajectory_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::input::OutputOptions* Arena::CreateMaybeMessage< ::lm::input::OutputOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::OutputOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
