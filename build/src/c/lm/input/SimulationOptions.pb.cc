// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/SimulationOptions.proto

#include "lm/input/SimulationOptions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fSimulationOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarrierLimit_lm_2finput_2fSimulationOptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fSimulationOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderParameterLimit_lm_2finput_2fSimulationOptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fSimulationOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeciesLimit_lm_2finput_2fSimulationOptions_2eproto;
namespace lm {
namespace input {
class SimulationOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationOptions> _instance;
} _SimulationOptions_default_instance_;
class SpeciesLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeciesLimit> _instance;
} _SpeciesLimit_default_instance_;
class OrderParameterLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderParameterLimit> _instance;
} _OrderParameterLimit_default_instance_;
class BarrierLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarrierLimit> _instance;
} _BarrierLimit_default_instance_;
}  // namespace input
}  // namespace lm
static void InitDefaultsscc_info_BarrierLimit_lm_2finput_2fSimulationOptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_BarrierLimit_default_instance_;
    new (ptr) ::lm::input::BarrierLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::BarrierLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarrierLimit_lm_2finput_2fSimulationOptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BarrierLimit_lm_2finput_2fSimulationOptions_2eproto}, {}};

static void InitDefaultsscc_info_OrderParameterLimit_lm_2finput_2fSimulationOptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_OrderParameterLimit_default_instance_;
    new (ptr) ::lm::input::OrderParameterLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::OrderParameterLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderParameterLimit_lm_2finput_2fSimulationOptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderParameterLimit_lm_2finput_2fSimulationOptions_2eproto}, {}};

static void InitDefaultsscc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_SimulationOptions_default_instance_;
    new (ptr) ::lm::input::SimulationOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::SimulationOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto}, {
      &scc_info_SpeciesLimit_lm_2finput_2fSimulationOptions_2eproto.base,
      &scc_info_BarrierLimit_lm_2finput_2fSimulationOptions_2eproto.base,
      &scc_info_OrderParameterLimit_lm_2finput_2fSimulationOptions_2eproto.base,}};

static void InitDefaultsscc_info_SpeciesLimit_lm_2finput_2fSimulationOptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_SpeciesLimit_default_instance_;
    new (ptr) ::lm::input::SpeciesLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::SpeciesLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeciesLimit_lm_2finput_2fSimulationOptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeciesLimit_lm_2finput_2fSimulationOptions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2finput_2fSimulationOptions_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2finput_2fSimulationOptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2finput_2fSimulationOptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2finput_2fSimulationOptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, time_limit_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, species_upper_limit_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, species_lower_limit_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, tracking_barrier_crossing_limit_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, species_reflecting_barrier_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, order_parameter_reflecting_barrier_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, species_tracking_barrier_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, order_parameter_tracking_barrier_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, parts_per_work_unit_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SimulationOptions, steps_per_work_unit_part_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::lm::input::SpeciesLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SpeciesLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::SpeciesLimit, species_index_),
  PROTOBUF_FIELD_OFFSET(::lm::input::SpeciesLimit, limit_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::lm::input::OrderParameterLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OrderParameterLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::OrderParameterLimit, order_parameter_index_),
  PROTOBUF_FIELD_OFFSET(::lm::input::OrderParameterLimit, limit_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::lm::input::BarrierLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::BarrierLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::BarrierLimit, barrier_index_),
  PROTOBUF_FIELD_OFFSET(::lm::input::BarrierLimit, limit_value_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::lm::input::SimulationOptions)},
  { 25, 32, sizeof(::lm::input::SpeciesLimit)},
  { 34, 41, sizeof(::lm::input::OrderParameterLimit)},
  { 43, 50, sizeof(::lm::input::BarrierLimit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_SimulationOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_SpeciesLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_OrderParameterLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_BarrierLimit_default_instance_),
};

const char descriptor_table_protodef_lm_2finput_2fSimulationOptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n lm/input/SimulationOptions.proto\022\010lm.i"
  "nput\"\251\004\n\021SimulationOptions\022\022\n\ntime_limit"
  "\030\001 \001(\001\0223\n\023species_upper_limit\030\002 \003(\0132\026.lm"
  ".input.SpeciesLimit\0223\n\023species_lower_lim"
  "it\030\003 \003(\0132\026.lm.input.SpeciesLimit\022\?\n\037trac"
  "king_barrier_crossing_limit\030\006 \003(\0132\026.lm.i"
  "nput.BarrierLimit\022:\n\032species_reflecting_"
  "barrier\030\n \003(\0132\026.lm.input.SpeciesLimit\022I\n"
  "\"order_parameter_reflecting_barrier\030\013 \003("
  "\0132\035.lm.input.OrderParameterLimit\0228\n\030spec"
  "ies_tracking_barrier\030\014 \003(\0132\026.lm.input.Sp"
  "eciesLimit\022G\n order_parameter_tracking_b"
  "arrier\030\r \003(\0132\035.lm.input.OrderParameterLi"
  "mit\022\036\n\023parts_per_work_unit\030d \001(\004:\0011\022+\n\030s"
  "teps_per_work_unit_part\030e \001(\004:\t100000000"
  "\":\n\014SpeciesLimit\022\025\n\rspecies_index\030\001 \002(\r\022"
  "\023\n\013limit_value\030\002 \002(\005\"I\n\023OrderParameterLi"
  "mit\022\035\n\025order_parameter_index\030\001 \002(\r\022\023\n\013li"
  "mit_value\030\002 \002(\001\":\n\014BarrierLimit\022\025\n\rbarri"
  "er_index\030\001 \002(\r\022\023\n\013limit_value\030\002 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2finput_2fSimulationOptions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2finput_2fSimulationOptions_2eproto_sccs[4] = {
  &scc_info_BarrierLimit_lm_2finput_2fSimulationOptions_2eproto.base,
  &scc_info_OrderParameterLimit_lm_2finput_2fSimulationOptions_2eproto.base,
  &scc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto.base,
  &scc_info_SpeciesLimit_lm_2finput_2fSimulationOptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2finput_2fSimulationOptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fSimulationOptions_2eproto = {
  false, false, descriptor_table_protodef_lm_2finput_2fSimulationOptions_2eproto, "lm/input/SimulationOptions.proto", 795,
  &descriptor_table_lm_2finput_2fSimulationOptions_2eproto_once, descriptor_table_lm_2finput_2fSimulationOptions_2eproto_sccs, descriptor_table_lm_2finput_2fSimulationOptions_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_lm_2finput_2fSimulationOptions_2eproto::offsets,
  file_level_metadata_lm_2finput_2fSimulationOptions_2eproto, 4, file_level_enum_descriptors_lm_2finput_2fSimulationOptions_2eproto, file_level_service_descriptors_lm_2finput_2fSimulationOptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2finput_2fSimulationOptions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2finput_2fSimulationOptions_2eproto)), true);
namespace lm {
namespace input {

// ===================================================================

void SimulationOptions::InitAsDefaultInstance() {
}
class SimulationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulationOptions>()._has_bits_);
  static void set_has_time_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parts_per_work_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steps_per_work_unit_part(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SimulationOptions::SimulationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  species_upper_limit_(arena),
  species_lower_limit_(arena),
  tracking_barrier_crossing_limit_(arena),
  species_reflecting_barrier_(arena),
  order_parameter_reflecting_barrier_(arena),
  species_tracking_barrier_(arena),
  order_parameter_tracking_barrier_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.SimulationOptions)
}
SimulationOptions::SimulationOptions(const SimulationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      species_upper_limit_(from.species_upper_limit_),
      species_lower_limit_(from.species_lower_limit_),
      tracking_barrier_crossing_limit_(from.tracking_barrier_crossing_limit_),
      species_reflecting_barrier_(from.species_reflecting_barrier_),
      order_parameter_reflecting_barrier_(from.order_parameter_reflecting_barrier_),
      species_tracking_barrier_(from.species_tracking_barrier_),
      order_parameter_tracking_barrier_(from.order_parameter_tracking_barrier_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_limit_, &from.time_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&steps_per_work_unit_part_) -
    reinterpret_cast<char*>(&time_limit_)) + sizeof(steps_per_work_unit_part_));
  // @@protoc_insertion_point(copy_constructor:lm.input.SimulationOptions)
}

void SimulationOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto.base);
  time_limit_ = 0;
  parts_per_work_unit_ = PROTOBUF_ULONGLONG(1);
  steps_per_work_unit_part_ = PROTOBUF_ULONGLONG(100000000);
}

SimulationOptions::~SimulationOptions() {
  // @@protoc_insertion_point(destructor:lm.input.SimulationOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulationOptions::ArenaDtor(void* object) {
  SimulationOptions* _this = reinterpret_cast< SimulationOptions* >(object);
  (void)_this;
}
void SimulationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationOptions& SimulationOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto.base);
  return *internal_default_instance();
}


void SimulationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.SimulationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_upper_limit_.Clear();
  species_lower_limit_.Clear();
  tracking_barrier_crossing_limit_.Clear();
  species_reflecting_barrier_.Clear();
  order_parameter_reflecting_barrier_.Clear();
  species_tracking_barrier_.Clear();
  order_parameter_tracking_barrier_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    time_limit_ = 0;
    parts_per_work_unit_ = PROTOBUF_ULONGLONG(1);
    steps_per_work_unit_part_ = PROTOBUF_ULONGLONG(100000000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double time_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_time_limit(&has_bits);
          time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.SpeciesLimit species_upper_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_species_upper_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.SpeciesLimit species_lower_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_species_lower_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.BarrierLimit tracking_barrier_crossing_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracking_barrier_crossing_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.SpeciesLimit species_reflecting_barrier = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_species_reflecting_barrier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.OrderParameterLimit order_parameter_reflecting_barrier = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_parameter_reflecting_barrier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.SpeciesLimit species_tracking_barrier = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_species_tracking_barrier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.OrderParameterLimit order_parameter_tracking_barrier = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_parameter_tracking_barrier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 parts_per_work_unit = 100 [default = 1];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_parts_per_work_unit(&has_bits);
          parts_per_work_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 steps_per_work_unit_part = 101 [default = 100000000];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_steps_per_work_unit_part(&has_bits);
          steps_per_work_unit_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.SimulationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double time_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_limit(), target);
  }

  // repeated .lm.input.SpeciesLimit species_upper_limit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_species_upper_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_species_upper_limit(i), target, stream);
  }

  // repeated .lm.input.SpeciesLimit species_lower_limit = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_species_lower_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_species_lower_limit(i), target, stream);
  }

  // repeated .lm.input.BarrierLimit tracking_barrier_crossing_limit = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracking_barrier_crossing_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tracking_barrier_crossing_limit(i), target, stream);
  }

  // repeated .lm.input.SpeciesLimit species_reflecting_barrier = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_species_reflecting_barrier_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_species_reflecting_barrier(i), target, stream);
  }

  // repeated .lm.input.OrderParameterLimit order_parameter_reflecting_barrier = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_order_parameter_reflecting_barrier_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_order_parameter_reflecting_barrier(i), target, stream);
  }

  // repeated .lm.input.SpeciesLimit species_tracking_barrier = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_species_tracking_barrier_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_species_tracking_barrier(i), target, stream);
  }

  // repeated .lm.input.OrderParameterLimit order_parameter_tracking_barrier = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_order_parameter_tracking_barrier_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_order_parameter_tracking_barrier(i), target, stream);
  }

  // optional uint64 parts_per_work_unit = 100 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(100, this->_internal_parts_per_work_unit(), target);
  }

  // optional uint64 steps_per_work_unit_part = 101 [default = 100000000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(101, this->_internal_steps_per_work_unit_part(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.SimulationOptions)
  return target;
}

size_t SimulationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.SimulationOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.input.SpeciesLimit species_upper_limit = 2;
  total_size += 1UL * this->_internal_species_upper_limit_size();
  for (const auto& msg : this->species_upper_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.input.SpeciesLimit species_lower_limit = 3;
  total_size += 1UL * this->_internal_species_lower_limit_size();
  for (const auto& msg : this->species_lower_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.input.BarrierLimit tracking_barrier_crossing_limit = 6;
  total_size += 1UL * this->_internal_tracking_barrier_crossing_limit_size();
  for (const auto& msg : this->tracking_barrier_crossing_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.input.SpeciesLimit species_reflecting_barrier = 10;
  total_size += 1UL * this->_internal_species_reflecting_barrier_size();
  for (const auto& msg : this->species_reflecting_barrier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.input.OrderParameterLimit order_parameter_reflecting_barrier = 11;
  total_size += 1UL * this->_internal_order_parameter_reflecting_barrier_size();
  for (const auto& msg : this->order_parameter_reflecting_barrier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.input.SpeciesLimit species_tracking_barrier = 12;
  total_size += 1UL * this->_internal_species_tracking_barrier_size();
  for (const auto& msg : this->species_tracking_barrier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.input.OrderParameterLimit order_parameter_tracking_barrier = 13;
  total_size += 1UL * this->_internal_order_parameter_tracking_barrier_size();
  for (const auto& msg : this->order_parameter_tracking_barrier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double time_limit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 parts_per_work_unit = 100 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_parts_per_work_unit());
    }

    // optional uint64 steps_per_work_unit_part = 101 [default = 100000000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steps_per_work_unit_part());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.SimulationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.SimulationOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.SimulationOptions)
    MergeFrom(*source);
  }
}

void SimulationOptions::MergeFrom(const SimulationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.SimulationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  species_upper_limit_.MergeFrom(from.species_upper_limit_);
  species_lower_limit_.MergeFrom(from.species_lower_limit_);
  tracking_barrier_crossing_limit_.MergeFrom(from.tracking_barrier_crossing_limit_);
  species_reflecting_barrier_.MergeFrom(from.species_reflecting_barrier_);
  order_parameter_reflecting_barrier_.MergeFrom(from.order_parameter_reflecting_barrier_);
  species_tracking_barrier_.MergeFrom(from.species_tracking_barrier_);
  order_parameter_tracking_barrier_.MergeFrom(from.order_parameter_tracking_barrier_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_limit_ = from.time_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      parts_per_work_unit_ = from.parts_per_work_unit_;
    }
    if (cached_has_bits & 0x00000004u) {
      steps_per_work_unit_part_ = from.steps_per_work_unit_part_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulationOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.SimulationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationOptions::CopyFrom(const SimulationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.SimulationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationOptions::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(species_upper_limit_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(species_lower_limit_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tracking_barrier_crossing_limit_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(species_reflecting_barrier_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(order_parameter_reflecting_barrier_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(species_tracking_barrier_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(order_parameter_tracking_barrier_)) return false;
  return true;
}

void SimulationOptions::InternalSwap(SimulationOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  species_upper_limit_.InternalSwap(&other->species_upper_limit_);
  species_lower_limit_.InternalSwap(&other->species_lower_limit_);
  tracking_barrier_crossing_limit_.InternalSwap(&other->tracking_barrier_crossing_limit_);
  species_reflecting_barrier_.InternalSwap(&other->species_reflecting_barrier_);
  order_parameter_reflecting_barrier_.InternalSwap(&other->order_parameter_reflecting_barrier_);
  species_tracking_barrier_.InternalSwap(&other->species_tracking_barrier_);
  order_parameter_tracking_barrier_.InternalSwap(&other->order_parameter_tracking_barrier_);
  swap(time_limit_, other->time_limit_);
  swap(parts_per_work_unit_, other->parts_per_work_unit_);
  swap(steps_per_work_unit_part_, other->steps_per_work_unit_part_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeciesLimit::InitAsDefaultInstance() {
}
class SpeciesLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeciesLimit>()._has_bits_);
  static void set_has_species_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpeciesLimit::SpeciesLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.SpeciesLimit)
}
SpeciesLimit::SpeciesLimit(const SpeciesLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&species_index_, &from.species_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_value_) -
    reinterpret_cast<char*>(&species_index_)) + sizeof(limit_value_));
  // @@protoc_insertion_point(copy_constructor:lm.input.SpeciesLimit)
}

void SpeciesLimit::SharedCtor() {
  ::memset(&species_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_value_) -
      reinterpret_cast<char*>(&species_index_)) + sizeof(limit_value_));
}

SpeciesLimit::~SpeciesLimit() {
  // @@protoc_insertion_point(destructor:lm.input.SpeciesLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeciesLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeciesLimit::ArenaDtor(void* object) {
  SpeciesLimit* _this = reinterpret_cast< SpeciesLimit* >(object);
  (void)_this;
}
void SpeciesLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeciesLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeciesLimit& SpeciesLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeciesLimit_lm_2finput_2fSimulationOptions_2eproto.base);
  return *internal_default_instance();
}


void SpeciesLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.SpeciesLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&species_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_value_) -
        reinterpret_cast<char*>(&species_index_)) + sizeof(limit_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeciesLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 species_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_species_index(&has_bits);
          species_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 limit_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_limit_value(&has_bits);
          limit_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeciesLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.SpeciesLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 species_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_species_index(), target);
  }

  // required int32 limit_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.SpeciesLimit)
  return target;
}

size_t SpeciesLimit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.input.SpeciesLimit)
  size_t total_size = 0;

  if (_internal_has_species_index()) {
    // required uint32 species_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_species_index());
  }

  if (_internal_has_limit_value()) {
    // required int32 limit_value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit_value());
  }

  return total_size;
}
size_t SpeciesLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.SpeciesLimit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 species_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_species_index());

    // required int32 limit_value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeciesLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.SpeciesLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeciesLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeciesLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.SpeciesLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.SpeciesLimit)
    MergeFrom(*source);
  }
}

void SpeciesLimit::MergeFrom(const SpeciesLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.SpeciesLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      species_index_ = from.species_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      limit_value_ = from.limit_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeciesLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.SpeciesLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeciesLimit::CopyFrom(const SpeciesLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.SpeciesLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeciesLimit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpeciesLimit::InternalSwap(SpeciesLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeciesLimit, limit_value_)
      + sizeof(SpeciesLimit::limit_value_)
      - PROTOBUF_FIELD_OFFSET(SpeciesLimit, species_index_)>(
          reinterpret_cast<char*>(&species_index_),
          reinterpret_cast<char*>(&other->species_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeciesLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderParameterLimit::InitAsDefaultInstance() {
}
class OrderParameterLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderParameterLimit>()._has_bits_);
  static void set_has_order_parameter_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_limit_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

OrderParameterLimit::OrderParameterLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.OrderParameterLimit)
}
OrderParameterLimit::OrderParameterLimit(const OrderParameterLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&limit_value_, &from.limit_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_parameter_index_) -
    reinterpret_cast<char*>(&limit_value_)) + sizeof(order_parameter_index_));
  // @@protoc_insertion_point(copy_constructor:lm.input.OrderParameterLimit)
}

void OrderParameterLimit::SharedCtor() {
  ::memset(&limit_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_parameter_index_) -
      reinterpret_cast<char*>(&limit_value_)) + sizeof(order_parameter_index_));
}

OrderParameterLimit::~OrderParameterLimit() {
  // @@protoc_insertion_point(destructor:lm.input.OrderParameterLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderParameterLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderParameterLimit::ArenaDtor(void* object) {
  OrderParameterLimit* _this = reinterpret_cast< OrderParameterLimit* >(object);
  (void)_this;
}
void OrderParameterLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderParameterLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderParameterLimit& OrderParameterLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderParameterLimit_lm_2finput_2fSimulationOptions_2eproto.base);
  return *internal_default_instance();
}


void OrderParameterLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.OrderParameterLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&limit_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_parameter_index_) -
        reinterpret_cast<char*>(&limit_value_)) + sizeof(order_parameter_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderParameterLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 order_parameter_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_order_parameter_index(&has_bits);
          order_parameter_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double limit_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_limit_value(&has_bits);
          limit_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderParameterLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.OrderParameterLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 order_parameter_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_order_parameter_index(), target);
  }

  // required double limit_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_limit_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.OrderParameterLimit)
  return target;
}

size_t OrderParameterLimit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.input.OrderParameterLimit)
  size_t total_size = 0;

  if (_internal_has_limit_value()) {
    // required double limit_value = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_order_parameter_index()) {
    // required uint32 order_parameter_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_order_parameter_index());
  }

  return total_size;
}
size_t OrderParameterLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.OrderParameterLimit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double limit_value = 2;
    total_size += 1 + 8;

    // required uint32 order_parameter_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_order_parameter_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderParameterLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.OrderParameterLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderParameterLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderParameterLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.OrderParameterLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.OrderParameterLimit)
    MergeFrom(*source);
  }
}

void OrderParameterLimit::MergeFrom(const OrderParameterLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.OrderParameterLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      limit_value_ = from.limit_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_parameter_index_ = from.order_parameter_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderParameterLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.OrderParameterLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderParameterLimit::CopyFrom(const OrderParameterLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.OrderParameterLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderParameterLimit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OrderParameterLimit::InternalSwap(OrderParameterLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderParameterLimit, order_parameter_index_)
      + sizeof(OrderParameterLimit::order_parameter_index_)
      - PROTOBUF_FIELD_OFFSET(OrderParameterLimit, limit_value_)>(
          reinterpret_cast<char*>(&limit_value_),
          reinterpret_cast<char*>(&other->limit_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderParameterLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BarrierLimit::InitAsDefaultInstance() {
}
class BarrierLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<BarrierLimit>()._has_bits_);
  static void set_has_barrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

BarrierLimit::BarrierLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.BarrierLimit)
}
BarrierLimit::BarrierLimit(const BarrierLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&barrier_index_, &from.barrier_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_value_) -
    reinterpret_cast<char*>(&barrier_index_)) + sizeof(limit_value_));
  // @@protoc_insertion_point(copy_constructor:lm.input.BarrierLimit)
}

void BarrierLimit::SharedCtor() {
  ::memset(&barrier_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_value_) -
      reinterpret_cast<char*>(&barrier_index_)) + sizeof(limit_value_));
}

BarrierLimit::~BarrierLimit() {
  // @@protoc_insertion_point(destructor:lm.input.BarrierLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BarrierLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BarrierLimit::ArenaDtor(void* object) {
  BarrierLimit* _this = reinterpret_cast< BarrierLimit* >(object);
  (void)_this;
}
void BarrierLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarrierLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarrierLimit& BarrierLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarrierLimit_lm_2finput_2fSimulationOptions_2eproto.base);
  return *internal_default_instance();
}


void BarrierLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.BarrierLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&barrier_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_value_) -
        reinterpret_cast<char*>(&barrier_index_)) + sizeof(limit_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BarrierLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 barrier_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_barrier_index(&has_bits);
          barrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 limit_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_limit_value(&has_bits);
          limit_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarrierLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.BarrierLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 barrier_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_barrier_index(), target);
  }

  // required uint32 limit_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.BarrierLimit)
  return target;
}

size_t BarrierLimit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.input.BarrierLimit)
  size_t total_size = 0;

  if (_internal_has_barrier_index()) {
    // required uint32 barrier_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_barrier_index());
  }

  if (_internal_has_limit_value()) {
    // required uint32 limit_value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit_value());
  }

  return total_size;
}
size_t BarrierLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.BarrierLimit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 barrier_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_barrier_index());

    // required uint32 limit_value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrierLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.BarrierLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const BarrierLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarrierLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.BarrierLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.BarrierLimit)
    MergeFrom(*source);
  }
}

void BarrierLimit::MergeFrom(const BarrierLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.BarrierLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      barrier_index_ = from.barrier_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      limit_value_ = from.limit_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BarrierLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.BarrierLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrierLimit::CopyFrom(const BarrierLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.BarrierLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierLimit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BarrierLimit::InternalSwap(BarrierLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BarrierLimit, limit_value_)
      + sizeof(BarrierLimit::limit_value_)
      - PROTOBUF_FIELD_OFFSET(BarrierLimit, barrier_index_)>(
          reinterpret_cast<char*>(&barrier_index_),
          reinterpret_cast<char*>(&other->barrier_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BarrierLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::input::SimulationOptions* Arena::CreateMaybeMessage< ::lm::input::SimulationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::SimulationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::input::SpeciesLimit* Arena::CreateMaybeMessage< ::lm::input::SpeciesLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::SpeciesLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::input::OrderParameterLimit* Arena::CreateMaybeMessage< ::lm::input::OrderParameterLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::OrderParameterLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::input::BarrierLimit* Arena::CreateMaybeMessage< ::lm::input::BarrierLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::BarrierLimit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
