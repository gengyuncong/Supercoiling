// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/ffpilot/FFPilotPhaseLimit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto;
namespace lm {
namespace input {
namespace ffpilot {
class FFPilotPhaseLimit;
class FFPilotPhaseLimitDefaultTypeInternal;
extern FFPilotPhaseLimitDefaultTypeInternal _FFPilotPhaseLimit_default_instance_;
}  // namespace ffpilot
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::input::ffpilot::FFPilotPhaseLimit* Arena::CreateMaybeMessage<::lm::input::ffpilot::FFPilotPhaseLimit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace input {
namespace ffpilot {

enum FFPilotPhaseLimit_StopCondition : int {
  FFPilotPhaseLimit_StopCondition_FORWARD_FLUXES = 0,
  FFPilotPhaseLimit_StopCondition_TRAJECTORY_COUNT = 1,
  FFPilotPhaseLimit_StopCondition_TIME = 2
};
bool FFPilotPhaseLimit_StopCondition_IsValid(int value);
constexpr FFPilotPhaseLimit_StopCondition FFPilotPhaseLimit_StopCondition_StopCondition_MIN = FFPilotPhaseLimit_StopCondition_FORWARD_FLUXES;
constexpr FFPilotPhaseLimit_StopCondition FFPilotPhaseLimit_StopCondition_StopCondition_MAX = FFPilotPhaseLimit_StopCondition_TIME;
constexpr int FFPilotPhaseLimit_StopCondition_StopCondition_ARRAYSIZE = FFPilotPhaseLimit_StopCondition_StopCondition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotPhaseLimit_StopCondition_descriptor();
template<typename T>
inline const std::string& FFPilotPhaseLimit_StopCondition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FFPilotPhaseLimit_StopCondition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FFPilotPhaseLimit_StopCondition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FFPilotPhaseLimit_StopCondition_descriptor(), enum_t_value);
}
inline bool FFPilotPhaseLimit_StopCondition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FFPilotPhaseLimit_StopCondition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FFPilotPhaseLimit_StopCondition>(
    FFPilotPhaseLimit_StopCondition_descriptor(), name, value);
}
// ===================================================================

class FFPilotPhaseLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.input.ffpilot.FFPilotPhaseLimit) */ {
 public:
  inline FFPilotPhaseLimit() : FFPilotPhaseLimit(nullptr) {}
  virtual ~FFPilotPhaseLimit();

  FFPilotPhaseLimit(const FFPilotPhaseLimit& from);
  FFPilotPhaseLimit(FFPilotPhaseLimit&& from) noexcept
    : FFPilotPhaseLimit() {
    *this = ::std::move(from);
  }

  inline FFPilotPhaseLimit& operator=(const FFPilotPhaseLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline FFPilotPhaseLimit& operator=(FFPilotPhaseLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FFPilotPhaseLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FFPilotPhaseLimit* internal_default_instance() {
    return reinterpret_cast<const FFPilotPhaseLimit*>(
               &_FFPilotPhaseLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FFPilotPhaseLimit& a, FFPilotPhaseLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(FFPilotPhaseLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FFPilotPhaseLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FFPilotPhaseLimit* New() const final {
    return CreateMaybeMessage<FFPilotPhaseLimit>(nullptr);
  }

  FFPilotPhaseLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FFPilotPhaseLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FFPilotPhaseLimit& from);
  void MergeFrom(const FFPilotPhaseLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FFPilotPhaseLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.input.ffpilot.FFPilotPhaseLimit";
  }
  protected:
  explicit FFPilotPhaseLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto);
    return ::descriptor_table_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FFPilotPhaseLimit_StopCondition StopCondition;
  static constexpr StopCondition FORWARD_FLUXES =
    FFPilotPhaseLimit_StopCondition_FORWARD_FLUXES;
  static constexpr StopCondition TRAJECTORY_COUNT =
    FFPilotPhaseLimit_StopCondition_TRAJECTORY_COUNT;
  static constexpr StopCondition TIME =
    FFPilotPhaseLimit_StopCondition_TIME;
  static inline bool StopCondition_IsValid(int value) {
    return FFPilotPhaseLimit_StopCondition_IsValid(value);
  }
  static constexpr StopCondition StopCondition_MIN =
    FFPilotPhaseLimit_StopCondition_StopCondition_MIN;
  static constexpr StopCondition StopCondition_MAX =
    FFPilotPhaseLimit_StopCondition_StopCondition_MAX;
  static constexpr int StopCondition_ARRAYSIZE =
    FFPilotPhaseLimit_StopCondition_StopCondition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StopCondition_descriptor() {
    return FFPilotPhaseLimit_StopCondition_descriptor();
  }
  template<typename T>
  static inline const std::string& StopCondition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StopCondition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StopCondition_Name.");
    return FFPilotPhaseLimit_StopCondition_Name(enum_t_value);
  }
  static inline bool StopCondition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StopCondition* value) {
    return FFPilotPhaseLimit_StopCondition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopConditionFieldNumber = 11,
    kEventsPerTrajectoryFieldNumber = 21,
    kTrajectoriesPerPhaseFieldNumber = 22,
    kDvalueFieldNumber = 31,
    kUvalueFieldNumber = 32,
  };
  // optional .lm.input.ffpilot.FFPilotPhaseLimit.StopCondition stop_condition = 11 [default = FORWARD_FLUXES];
  bool has_stop_condition() const;
  private:
  bool _internal_has_stop_condition() const;
  public:
  void clear_stop_condition();
  ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition stop_condition() const;
  void set_stop_condition(::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition value);
  private:
  ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition _internal_stop_condition() const;
  void _internal_set_stop_condition(::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition value);
  public:

  // optional uint64 events_per_trajectory = 21;
  bool has_events_per_trajectory() const;
  private:
  bool _internal_has_events_per_trajectory() const;
  public:
  void clear_events_per_trajectory();
  ::PROTOBUF_NAMESPACE_ID::uint64 events_per_trajectory() const;
  void set_events_per_trajectory(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_events_per_trajectory() const;
  void _internal_set_events_per_trajectory(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 trajectories_per_phase = 22;
  bool has_trajectories_per_phase() const;
  private:
  bool _internal_has_trajectories_per_phase() const;
  public:
  void clear_trajectories_per_phase();
  ::PROTOBUF_NAMESPACE_ID::uint64 trajectories_per_phase() const;
  void set_trajectories_per_phase(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trajectories_per_phase() const;
  void _internal_set_trajectories_per_phase(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double dvalue = 31;
  bool has_dvalue() const;
  private:
  bool _internal_has_dvalue() const;
  public:
  void clear_dvalue();
  double dvalue() const;
  void set_dvalue(double value);
  private:
  double _internal_dvalue() const;
  void _internal_set_dvalue(double value);
  public:

  // optional uint64 uvalue = 32;
  bool has_uvalue() const;
  private:
  bool _internal_has_uvalue() const;
  public:
  void clear_uvalue();
  ::PROTOBUF_NAMESPACE_ID::uint64 uvalue() const;
  void set_uvalue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uvalue() const;
  void _internal_set_uvalue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.input.ffpilot.FFPilotPhaseLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int stop_condition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 events_per_trajectory_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trajectories_per_phase_;
  double dvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uvalue_;
  friend struct ::TableStruct_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FFPilotPhaseLimit

// optional .lm.input.ffpilot.FFPilotPhaseLimit.StopCondition stop_condition = 11 [default = FORWARD_FLUXES];
inline bool FFPilotPhaseLimit::_internal_has_stop_condition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FFPilotPhaseLimit::has_stop_condition() const {
  return _internal_has_stop_condition();
}
inline void FFPilotPhaseLimit::clear_stop_condition() {
  stop_condition_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition FFPilotPhaseLimit::_internal_stop_condition() const {
  return static_cast< ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition >(stop_condition_);
}
inline ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition FFPilotPhaseLimit::stop_condition() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotPhaseLimit.stop_condition)
  return _internal_stop_condition();
}
inline void FFPilotPhaseLimit::_internal_set_stop_condition(::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition value) {
  assert(::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  stop_condition_ = value;
}
inline void FFPilotPhaseLimit::set_stop_condition(::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition value) {
  _internal_set_stop_condition(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotPhaseLimit.stop_condition)
}

// optional uint64 events_per_trajectory = 21;
inline bool FFPilotPhaseLimit::_internal_has_events_per_trajectory() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FFPilotPhaseLimit::has_events_per_trajectory() const {
  return _internal_has_events_per_trajectory();
}
inline void FFPilotPhaseLimit::clear_events_per_trajectory() {
  events_per_trajectory_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseLimit::_internal_events_per_trajectory() const {
  return events_per_trajectory_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseLimit::events_per_trajectory() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotPhaseLimit.events_per_trajectory)
  return _internal_events_per_trajectory();
}
inline void FFPilotPhaseLimit::_internal_set_events_per_trajectory(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  events_per_trajectory_ = value;
}
inline void FFPilotPhaseLimit::set_events_per_trajectory(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_events_per_trajectory(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotPhaseLimit.events_per_trajectory)
}

// optional uint64 trajectories_per_phase = 22;
inline bool FFPilotPhaseLimit::_internal_has_trajectories_per_phase() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FFPilotPhaseLimit::has_trajectories_per_phase() const {
  return _internal_has_trajectories_per_phase();
}
inline void FFPilotPhaseLimit::clear_trajectories_per_phase() {
  trajectories_per_phase_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseLimit::_internal_trajectories_per_phase() const {
  return trajectories_per_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseLimit::trajectories_per_phase() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotPhaseLimit.trajectories_per_phase)
  return _internal_trajectories_per_phase();
}
inline void FFPilotPhaseLimit::_internal_set_trajectories_per_phase(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  trajectories_per_phase_ = value;
}
inline void FFPilotPhaseLimit::set_trajectories_per_phase(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trajectories_per_phase(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotPhaseLimit.trajectories_per_phase)
}

// optional double dvalue = 31;
inline bool FFPilotPhaseLimit::_internal_has_dvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FFPilotPhaseLimit::has_dvalue() const {
  return _internal_has_dvalue();
}
inline void FFPilotPhaseLimit::clear_dvalue() {
  dvalue_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FFPilotPhaseLimit::_internal_dvalue() const {
  return dvalue_;
}
inline double FFPilotPhaseLimit::dvalue() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotPhaseLimit.dvalue)
  return _internal_dvalue();
}
inline void FFPilotPhaseLimit::_internal_set_dvalue(double value) {
  _has_bits_[0] |= 0x00000008u;
  dvalue_ = value;
}
inline void FFPilotPhaseLimit::set_dvalue(double value) {
  _internal_set_dvalue(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotPhaseLimit.dvalue)
}

// optional uint64 uvalue = 32;
inline bool FFPilotPhaseLimit::_internal_has_uvalue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FFPilotPhaseLimit::has_uvalue() const {
  return _internal_has_uvalue();
}
inline void FFPilotPhaseLimit::clear_uvalue() {
  uvalue_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseLimit::_internal_uvalue() const {
  return uvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseLimit::uvalue() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotPhaseLimit.uvalue)
  return _internal_uvalue();
}
inline void FFPilotPhaseLimit::_internal_set_uvalue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  uvalue_ = value;
}
inline void FFPilotPhaseLimit::set_uvalue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uvalue(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotPhaseLimit.uvalue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ffpilot
}  // namespace input
}  // namespace lm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition>() {
  return ::lm::input::ffpilot::FFPilotPhaseLimit_StopCondition_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto
