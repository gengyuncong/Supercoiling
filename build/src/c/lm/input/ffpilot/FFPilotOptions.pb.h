// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/ffpilot/FFPilotOptions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "robertslab/pbuf/NDArray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto;
namespace lm {
namespace input {
namespace ffpilot {
class FFPilotOptions;
class FFPilotOptionsDefaultTypeInternal;
extern FFPilotOptionsDefaultTypeInternal _FFPilotOptions_default_instance_;
}  // namespace ffpilot
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::input::ffpilot::FFPilotOptions* Arena::CreateMaybeMessage<::lm::input::ffpilot::FFPilotOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace input {
namespace ffpilot {

enum FFPilotOptions_FallbackMethod : int {
  FFPilotOptions_FallbackMethod_FALLBACK_TILING_EDGE = 0,
  FFPilotOptions_FallbackMethod_FALLBACK_BASIN = 1
};
bool FFPilotOptions_FallbackMethod_IsValid(int value);
constexpr FFPilotOptions_FallbackMethod FFPilotOptions_FallbackMethod_FallbackMethod_MIN = FFPilotOptions_FallbackMethod_FALLBACK_TILING_EDGE;
constexpr FFPilotOptions_FallbackMethod FFPilotOptions_FallbackMethod_FallbackMethod_MAX = FFPilotOptions_FallbackMethod_FALLBACK_BASIN;
constexpr int FFPilotOptions_FallbackMethod_FallbackMethod_ARRAYSIZE = FFPilotOptions_FallbackMethod_FallbackMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotOptions_FallbackMethod_descriptor();
template<typename T>
inline const std::string& FFPilotOptions_FallbackMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FFPilotOptions_FallbackMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FFPilotOptions_FallbackMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FFPilotOptions_FallbackMethod_descriptor(), enum_t_value);
}
inline bool FFPilotOptions_FallbackMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FFPilotOptions_FallbackMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FFPilotOptions_FallbackMethod>(
    FFPilotOptions_FallbackMethod_descriptor(), name, value);
}
// ===================================================================

class FFPilotOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.input.ffpilot.FFPilotOptions) */ {
 public:
  inline FFPilotOptions() : FFPilotOptions(nullptr) {}
  virtual ~FFPilotOptions();

  FFPilotOptions(const FFPilotOptions& from);
  FFPilotOptions(FFPilotOptions&& from) noexcept
    : FFPilotOptions() {
    *this = ::std::move(from);
  }

  inline FFPilotOptions& operator=(const FFPilotOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FFPilotOptions& operator=(FFPilotOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FFPilotOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FFPilotOptions* internal_default_instance() {
    return reinterpret_cast<const FFPilotOptions*>(
               &_FFPilotOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FFPilotOptions& a, FFPilotOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FFPilotOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FFPilotOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FFPilotOptions* New() const final {
    return CreateMaybeMessage<FFPilotOptions>(nullptr);
  }

  FFPilotOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FFPilotOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FFPilotOptions& from);
  void MergeFrom(const FFPilotOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FFPilotOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.input.ffpilot.FFPilotOptions";
  }
  protected:
  explicit FFPilotOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto);
    return ::descriptor_table_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FFPilotOptions_FallbackMethod FallbackMethod;
  static constexpr FallbackMethod FALLBACK_TILING_EDGE =
    FFPilotOptions_FallbackMethod_FALLBACK_TILING_EDGE;
  static constexpr FallbackMethod FALLBACK_BASIN =
    FFPilotOptions_FallbackMethod_FALLBACK_BASIN;
  static inline bool FallbackMethod_IsValid(int value) {
    return FFPilotOptions_FallbackMethod_IsValid(value);
  }
  static constexpr FallbackMethod FallbackMethod_MIN =
    FFPilotOptions_FallbackMethod_FallbackMethod_MIN;
  static constexpr FallbackMethod FallbackMethod_MAX =
    FFPilotOptions_FallbackMethod_FallbackMethod_MAX;
  static constexpr int FallbackMethod_ARRAYSIZE =
    FFPilotOptions_FallbackMethod_FallbackMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FallbackMethod_descriptor() {
    return FFPilotOptions_FallbackMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& FallbackMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FallbackMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FallbackMethod_Name.");
    return FFPilotOptions_FallbackMethod_Name(enum_t_value);
  }
  static inline bool FallbackMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FallbackMethod* value) {
    return FFPilotOptions_FallbackMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseZeroBasinsFieldNumber = 100,
    kProdTrajectoryCountsFieldNumber = 401,
    kOptimizeSamplingMultipliersFieldNumber = 901,
    kOrderParameterIndexFieldNumber = 3,
    kTilingIndexFieldNumber = 4,
    kPhaseZeroTransitionBarrierFieldNumber = 101,
    kFallbackMethodFieldNumber = 7,
    kTrajectoryOutputFieldNumber = 5,
    kPilotSkipFieldNumber = 301,
    kProdSkipFieldNumber = 302,
    kOptimizeMinimizeCostFieldNumber = 902,
    kErrorGoalFieldNumber = 1,
    kErrorGoalConfidenceFieldNumber = 2,
    kMaxTrajectoriesPerWorkUnitFieldNumber = 6,
    kPhaseZeroEquilibrationCrossingsFieldNumber = 102,
    kPilotStageCrossingsFieldNumber = 300,
    kOptimizeMinimumTrajectoriesFieldNumber = 900,
  };
  // required .robertslab.pbuf.NDArray phase_zero_basins = 100;
  bool has_phase_zero_basins() const;
  private:
  bool _internal_has_phase_zero_basins() const;
  public:
  void clear_phase_zero_basins();
  const ::robertslab::pbuf::NDArray& phase_zero_basins() const;
  ::robertslab::pbuf::NDArray* release_phase_zero_basins();
  ::robertslab::pbuf::NDArray* mutable_phase_zero_basins();
  void set_allocated_phase_zero_basins(::robertslab::pbuf::NDArray* phase_zero_basins);
  private:
  const ::robertslab::pbuf::NDArray& _internal_phase_zero_basins() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_phase_zero_basins();
  public:
  void unsafe_arena_set_allocated_phase_zero_basins(
      ::robertslab::pbuf::NDArray* phase_zero_basins);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_phase_zero_basins();

  // optional .robertslab.pbuf.NDArray prod_trajectory_counts = 401;
  bool has_prod_trajectory_counts() const;
  private:
  bool _internal_has_prod_trajectory_counts() const;
  public:
  void clear_prod_trajectory_counts();
  const ::robertslab::pbuf::NDArray& prod_trajectory_counts() const;
  ::robertslab::pbuf::NDArray* release_prod_trajectory_counts();
  ::robertslab::pbuf::NDArray* mutable_prod_trajectory_counts();
  void set_allocated_prod_trajectory_counts(::robertslab::pbuf::NDArray* prod_trajectory_counts);
  private:
  const ::robertslab::pbuf::NDArray& _internal_prod_trajectory_counts() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_prod_trajectory_counts();
  public:
  void unsafe_arena_set_allocated_prod_trajectory_counts(
      ::robertslab::pbuf::NDArray* prod_trajectory_counts);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_prod_trajectory_counts();

  // optional .robertslab.pbuf.NDArray optimize_sampling_multipliers = 901;
  bool has_optimize_sampling_multipliers() const;
  private:
  bool _internal_has_optimize_sampling_multipliers() const;
  public:
  void clear_optimize_sampling_multipliers();
  const ::robertslab::pbuf::NDArray& optimize_sampling_multipliers() const;
  ::robertslab::pbuf::NDArray* release_optimize_sampling_multipliers();
  ::robertslab::pbuf::NDArray* mutable_optimize_sampling_multipliers();
  void set_allocated_optimize_sampling_multipliers(::robertslab::pbuf::NDArray* optimize_sampling_multipliers);
  private:
  const ::robertslab::pbuf::NDArray& _internal_optimize_sampling_multipliers() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_optimize_sampling_multipliers();
  public:
  void unsafe_arena_set_allocated_optimize_sampling_multipliers(
      ::robertslab::pbuf::NDArray* optimize_sampling_multipliers);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_optimize_sampling_multipliers();

  // optional int32 order_parameter_index = 3 [default = 0];
  bool has_order_parameter_index() const;
  private:
  bool _internal_has_order_parameter_index() const;
  public:
  void clear_order_parameter_index();
  ::PROTOBUF_NAMESPACE_ID::int32 order_parameter_index() const;
  void set_order_parameter_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_parameter_index() const;
  void _internal_set_order_parameter_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tiling_index = 4 [default = 0];
  bool has_tiling_index() const;
  private:
  bool _internal_has_tiling_index() const;
  public:
  void clear_tiling_index();
  ::PROTOBUF_NAMESPACE_ID::int32 tiling_index() const;
  void set_tiling_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiling_index() const;
  void _internal_set_tiling_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double phase_zero_transition_barrier = 101;
  bool has_phase_zero_transition_barrier() const;
  private:
  bool _internal_has_phase_zero_transition_barrier() const;
  public:
  void clear_phase_zero_transition_barrier();
  double phase_zero_transition_barrier() const;
  void set_phase_zero_transition_barrier(double value);
  private:
  double _internal_phase_zero_transition_barrier() const;
  void _internal_set_phase_zero_transition_barrier(double value);
  public:

  // optional .lm.input.ffpilot.FFPilotOptions.FallbackMethod fallback_method = 7 [default = FALLBACK_TILING_EDGE];
  bool has_fallback_method() const;
  private:
  bool _internal_has_fallback_method() const;
  public:
  void clear_fallback_method();
  ::lm::input::ffpilot::FFPilotOptions_FallbackMethod fallback_method() const;
  void set_fallback_method(::lm::input::ffpilot::FFPilotOptions_FallbackMethod value);
  private:
  ::lm::input::ffpilot::FFPilotOptions_FallbackMethod _internal_fallback_method() const;
  void _internal_set_fallback_method(::lm::input::ffpilot::FFPilotOptions_FallbackMethod value);
  public:

  // optional bool trajectory_output = 5 [default = false];
  bool has_trajectory_output() const;
  private:
  bool _internal_has_trajectory_output() const;
  public:
  void clear_trajectory_output();
  bool trajectory_output() const;
  void set_trajectory_output(bool value);
  private:
  bool _internal_trajectory_output() const;
  void _internal_set_trajectory_output(bool value);
  public:

  // optional bool pilot_skip = 301 [default = false];
  bool has_pilot_skip() const;
  private:
  bool _internal_has_pilot_skip() const;
  public:
  void clear_pilot_skip();
  bool pilot_skip() const;
  void set_pilot_skip(bool value);
  private:
  bool _internal_pilot_skip() const;
  void _internal_set_pilot_skip(bool value);
  public:

  // optional bool prod_skip = 302 [default = false];
  bool has_prod_skip() const;
  private:
  bool _internal_has_prod_skip() const;
  public:
  void clear_prod_skip();
  bool prod_skip() const;
  void set_prod_skip(bool value);
  private:
  bool _internal_prod_skip() const;
  void _internal_set_prod_skip(bool value);
  public:

  // optional bool optimize_minimize_cost = 902 [default = true];
  bool has_optimize_minimize_cost() const;
  private:
  bool _internal_has_optimize_minimize_cost() const;
  public:
  void clear_optimize_minimize_cost();
  bool optimize_minimize_cost() const;
  void set_optimize_minimize_cost(bool value);
  private:
  bool _internal_optimize_minimize_cost() const;
  void _internal_set_optimize_minimize_cost(bool value);
  public:

  // optional double error_goal = 1 [default = 0.05];
  bool has_error_goal() const;
  private:
  bool _internal_has_error_goal() const;
  public:
  void clear_error_goal();
  double error_goal() const;
  void set_error_goal(double value);
  private:
  double _internal_error_goal() const;
  void _internal_set_error_goal(double value);
  public:

  // optional double error_goal_confidence = 2 [default = 0.95];
  bool has_error_goal_confidence() const;
  private:
  bool _internal_has_error_goal_confidence() const;
  public:
  void clear_error_goal_confidence();
  double error_goal_confidence() const;
  void set_error_goal_confidence(double value);
  private:
  double _internal_error_goal_confidence() const;
  void _internal_set_error_goal_confidence(double value);
  public:

  // optional uint64 max_trajectories_per_work_unit = 6 [default = 10000];
  bool has_max_trajectories_per_work_unit() const;
  private:
  bool _internal_has_max_trajectories_per_work_unit() const;
  public:
  void clear_max_trajectories_per_work_unit();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_trajectories_per_work_unit() const;
  void set_max_trajectories_per_work_unit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_trajectories_per_work_unit() const;
  void _internal_set_max_trajectories_per_work_unit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 phase_zero_equilibration_crossings = 102 [default = 10];
  bool has_phase_zero_equilibration_crossings() const;
  private:
  bool _internal_has_phase_zero_equilibration_crossings() const;
  public:
  void clear_phase_zero_equilibration_crossings();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_zero_equilibration_crossings() const;
  void set_phase_zero_equilibration_crossings(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_zero_equilibration_crossings() const;
  void _internal_set_phase_zero_equilibration_crossings(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pilot_stage_crossings = 300 [default = 1000];
  bool has_pilot_stage_crossings() const;
  private:
  bool _internal_has_pilot_stage_crossings() const;
  public:
  void clear_pilot_stage_crossings();
  ::PROTOBUF_NAMESPACE_ID::int32 pilot_stage_crossings() const;
  void set_pilot_stage_crossings(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pilot_stage_crossings() const;
  void _internal_set_pilot_stage_crossings(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 optimize_minimum_trajectories = 900 [default = 1000];
  bool has_optimize_minimum_trajectories() const;
  private:
  bool _internal_has_optimize_minimum_trajectories() const;
  public:
  void clear_optimize_minimum_trajectories();
  ::PROTOBUF_NAMESPACE_ID::uint64 optimize_minimum_trajectories() const;
  void set_optimize_minimum_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_optimize_minimum_trajectories() const;
  void _internal_set_optimize_minimum_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.input.ffpilot.FFPilotOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::robertslab::pbuf::NDArray* phase_zero_basins_;
  ::robertslab::pbuf::NDArray* prod_trajectory_counts_;
  ::robertslab::pbuf::NDArray* optimize_sampling_multipliers_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_parameter_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 tiling_index_;
  double phase_zero_transition_barrier_;
  int fallback_method_;
  bool trajectory_output_;
  bool pilot_skip_;
  bool prod_skip_;
  bool optimize_minimize_cost_;
  double error_goal_;
  double error_goal_confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_trajectories_per_work_unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_zero_equilibration_crossings_;
  ::PROTOBUF_NAMESPACE_ID::int32 pilot_stage_crossings_;
  ::PROTOBUF_NAMESPACE_ID::uint64 optimize_minimum_trajectories_;
  friend struct ::TableStruct_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FFPilotOptions

// optional double error_goal = 1 [default = 0.05];
inline bool FFPilotOptions::_internal_has_error_goal() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FFPilotOptions::has_error_goal() const {
  return _internal_has_error_goal();
}
inline void FFPilotOptions::clear_error_goal() {
  error_goal_ = 0.05;
  _has_bits_[0] &= ~0x00000800u;
}
inline double FFPilotOptions::_internal_error_goal() const {
  return error_goal_;
}
inline double FFPilotOptions::error_goal() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.error_goal)
  return _internal_error_goal();
}
inline void FFPilotOptions::_internal_set_error_goal(double value) {
  _has_bits_[0] |= 0x00000800u;
  error_goal_ = value;
}
inline void FFPilotOptions::set_error_goal(double value) {
  _internal_set_error_goal(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.error_goal)
}

// optional double error_goal_confidence = 2 [default = 0.95];
inline bool FFPilotOptions::_internal_has_error_goal_confidence() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FFPilotOptions::has_error_goal_confidence() const {
  return _internal_has_error_goal_confidence();
}
inline void FFPilotOptions::clear_error_goal_confidence() {
  error_goal_confidence_ = 0.95;
  _has_bits_[0] &= ~0x00001000u;
}
inline double FFPilotOptions::_internal_error_goal_confidence() const {
  return error_goal_confidence_;
}
inline double FFPilotOptions::error_goal_confidence() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.error_goal_confidence)
  return _internal_error_goal_confidence();
}
inline void FFPilotOptions::_internal_set_error_goal_confidence(double value) {
  _has_bits_[0] |= 0x00001000u;
  error_goal_confidence_ = value;
}
inline void FFPilotOptions::set_error_goal_confidence(double value) {
  _internal_set_error_goal_confidence(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.error_goal_confidence)
}

// optional int32 order_parameter_index = 3 [default = 0];
inline bool FFPilotOptions::_internal_has_order_parameter_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FFPilotOptions::has_order_parameter_index() const {
  return _internal_has_order_parameter_index();
}
inline void FFPilotOptions::clear_order_parameter_index() {
  order_parameter_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::_internal_order_parameter_index() const {
  return order_parameter_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::order_parameter_index() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.order_parameter_index)
  return _internal_order_parameter_index();
}
inline void FFPilotOptions::_internal_set_order_parameter_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  order_parameter_index_ = value;
}
inline void FFPilotOptions::set_order_parameter_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_parameter_index(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.order_parameter_index)
}

// optional int32 tiling_index = 4 [default = 0];
inline bool FFPilotOptions::_internal_has_tiling_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FFPilotOptions::has_tiling_index() const {
  return _internal_has_tiling_index();
}
inline void FFPilotOptions::clear_tiling_index() {
  tiling_index_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::_internal_tiling_index() const {
  return tiling_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::tiling_index() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.tiling_index)
  return _internal_tiling_index();
}
inline void FFPilotOptions::_internal_set_tiling_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  tiling_index_ = value;
}
inline void FFPilotOptions::set_tiling_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tiling_index(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.tiling_index)
}

// optional bool trajectory_output = 5 [default = false];
inline bool FFPilotOptions::_internal_has_trajectory_output() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FFPilotOptions::has_trajectory_output() const {
  return _internal_has_trajectory_output();
}
inline void FFPilotOptions::clear_trajectory_output() {
  trajectory_output_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FFPilotOptions::_internal_trajectory_output() const {
  return trajectory_output_;
}
inline bool FFPilotOptions::trajectory_output() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.trajectory_output)
  return _internal_trajectory_output();
}
inline void FFPilotOptions::_internal_set_trajectory_output(bool value) {
  _has_bits_[0] |= 0x00000080u;
  trajectory_output_ = value;
}
inline void FFPilotOptions::set_trajectory_output(bool value) {
  _internal_set_trajectory_output(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.trajectory_output)
}

// optional uint64 max_trajectories_per_work_unit = 6 [default = 10000];
inline bool FFPilotOptions::_internal_has_max_trajectories_per_work_unit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FFPilotOptions::has_max_trajectories_per_work_unit() const {
  return _internal_has_max_trajectories_per_work_unit();
}
inline void FFPilotOptions::clear_max_trajectories_per_work_unit() {
  max_trajectories_per_work_unit_ = PROTOBUF_ULONGLONG(10000);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotOptions::_internal_max_trajectories_per_work_unit() const {
  return max_trajectories_per_work_unit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotOptions::max_trajectories_per_work_unit() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.max_trajectories_per_work_unit)
  return _internal_max_trajectories_per_work_unit();
}
inline void FFPilotOptions::_internal_set_max_trajectories_per_work_unit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  max_trajectories_per_work_unit_ = value;
}
inline void FFPilotOptions::set_max_trajectories_per_work_unit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_trajectories_per_work_unit(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.max_trajectories_per_work_unit)
}

// optional .lm.input.ffpilot.FFPilotOptions.FallbackMethod fallback_method = 7 [default = FALLBACK_TILING_EDGE];
inline bool FFPilotOptions::_internal_has_fallback_method() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FFPilotOptions::has_fallback_method() const {
  return _internal_has_fallback_method();
}
inline void FFPilotOptions::clear_fallback_method() {
  fallback_method_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::lm::input::ffpilot::FFPilotOptions_FallbackMethod FFPilotOptions::_internal_fallback_method() const {
  return static_cast< ::lm::input::ffpilot::FFPilotOptions_FallbackMethod >(fallback_method_);
}
inline ::lm::input::ffpilot::FFPilotOptions_FallbackMethod FFPilotOptions::fallback_method() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.fallback_method)
  return _internal_fallback_method();
}
inline void FFPilotOptions::_internal_set_fallback_method(::lm::input::ffpilot::FFPilotOptions_FallbackMethod value) {
  assert(::lm::input::ffpilot::FFPilotOptions_FallbackMethod_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  fallback_method_ = value;
}
inline void FFPilotOptions::set_fallback_method(::lm::input::ffpilot::FFPilotOptions_FallbackMethod value) {
  _internal_set_fallback_method(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.fallback_method)
}

// required .robertslab.pbuf.NDArray phase_zero_basins = 100;
inline bool FFPilotOptions::_internal_has_phase_zero_basins() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || phase_zero_basins_ != nullptr);
  return value;
}
inline bool FFPilotOptions::has_phase_zero_basins() const {
  return _internal_has_phase_zero_basins();
}
inline const ::robertslab::pbuf::NDArray& FFPilotOptions::_internal_phase_zero_basins() const {
  const ::robertslab::pbuf::NDArray* p = phase_zero_basins_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotOptions::phase_zero_basins() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.phase_zero_basins)
  return _internal_phase_zero_basins();
}
inline void FFPilotOptions::unsafe_arena_set_allocated_phase_zero_basins(
    ::robertslab::pbuf::NDArray* phase_zero_basins) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase_zero_basins_);
  }
  phase_zero_basins_ = phase_zero_basins;
  if (phase_zero_basins) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.ffpilot.FFPilotOptions.phase_zero_basins)
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::release_phase_zero_basins() {
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = phase_zero_basins_;
  phase_zero_basins_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::unsafe_arena_release_phase_zero_basins() {
  // @@protoc_insertion_point(field_release:lm.input.ffpilot.FFPilotOptions.phase_zero_basins)
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = phase_zero_basins_;
  phase_zero_basins_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::_internal_mutable_phase_zero_basins() {
  _has_bits_[0] |= 0x00000001u;
  if (phase_zero_basins_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    phase_zero_basins_ = p;
  }
  return phase_zero_basins_;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::mutable_phase_zero_basins() {
  // @@protoc_insertion_point(field_mutable:lm.input.ffpilot.FFPilotOptions.phase_zero_basins)
  return _internal_mutable_phase_zero_basins();
}
inline void FFPilotOptions::set_allocated_phase_zero_basins(::robertslab::pbuf::NDArray* phase_zero_basins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase_zero_basins_);
  }
  if (phase_zero_basins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase_zero_basins)->GetArena();
    if (message_arena != submessage_arena) {
      phase_zero_basins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase_zero_basins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phase_zero_basins_ = phase_zero_basins;
  // @@protoc_insertion_point(field_set_allocated:lm.input.ffpilot.FFPilotOptions.phase_zero_basins)
}

// optional double phase_zero_transition_barrier = 101;
inline bool FFPilotOptions::_internal_has_phase_zero_transition_barrier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FFPilotOptions::has_phase_zero_transition_barrier() const {
  return _internal_has_phase_zero_transition_barrier();
}
inline void FFPilotOptions::clear_phase_zero_transition_barrier() {
  phase_zero_transition_barrier_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double FFPilotOptions::_internal_phase_zero_transition_barrier() const {
  return phase_zero_transition_barrier_;
}
inline double FFPilotOptions::phase_zero_transition_barrier() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.phase_zero_transition_barrier)
  return _internal_phase_zero_transition_barrier();
}
inline void FFPilotOptions::_internal_set_phase_zero_transition_barrier(double value) {
  _has_bits_[0] |= 0x00000020u;
  phase_zero_transition_barrier_ = value;
}
inline void FFPilotOptions::set_phase_zero_transition_barrier(double value) {
  _internal_set_phase_zero_transition_barrier(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.phase_zero_transition_barrier)
}

// optional int32 phase_zero_equilibration_crossings = 102 [default = 10];
inline bool FFPilotOptions::_internal_has_phase_zero_equilibration_crossings() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FFPilotOptions::has_phase_zero_equilibration_crossings() const {
  return _internal_has_phase_zero_equilibration_crossings();
}
inline void FFPilotOptions::clear_phase_zero_equilibration_crossings() {
  phase_zero_equilibration_crossings_ = 10;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::_internal_phase_zero_equilibration_crossings() const {
  return phase_zero_equilibration_crossings_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::phase_zero_equilibration_crossings() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.phase_zero_equilibration_crossings)
  return _internal_phase_zero_equilibration_crossings();
}
inline void FFPilotOptions::_internal_set_phase_zero_equilibration_crossings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  phase_zero_equilibration_crossings_ = value;
}
inline void FFPilotOptions::set_phase_zero_equilibration_crossings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_zero_equilibration_crossings(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.phase_zero_equilibration_crossings)
}

// optional int32 pilot_stage_crossings = 300 [default = 1000];
inline bool FFPilotOptions::_internal_has_pilot_stage_crossings() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FFPilotOptions::has_pilot_stage_crossings() const {
  return _internal_has_pilot_stage_crossings();
}
inline void FFPilotOptions::clear_pilot_stage_crossings() {
  pilot_stage_crossings_ = 1000;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::_internal_pilot_stage_crossings() const {
  return pilot_stage_crossings_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotOptions::pilot_stage_crossings() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.pilot_stage_crossings)
  return _internal_pilot_stage_crossings();
}
inline void FFPilotOptions::_internal_set_pilot_stage_crossings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  pilot_stage_crossings_ = value;
}
inline void FFPilotOptions::set_pilot_stage_crossings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pilot_stage_crossings(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.pilot_stage_crossings)
}

// optional bool pilot_skip = 301 [default = false];
inline bool FFPilotOptions::_internal_has_pilot_skip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FFPilotOptions::has_pilot_skip() const {
  return _internal_has_pilot_skip();
}
inline void FFPilotOptions::clear_pilot_skip() {
  pilot_skip_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FFPilotOptions::_internal_pilot_skip() const {
  return pilot_skip_;
}
inline bool FFPilotOptions::pilot_skip() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.pilot_skip)
  return _internal_pilot_skip();
}
inline void FFPilotOptions::_internal_set_pilot_skip(bool value) {
  _has_bits_[0] |= 0x00000100u;
  pilot_skip_ = value;
}
inline void FFPilotOptions::set_pilot_skip(bool value) {
  _internal_set_pilot_skip(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.pilot_skip)
}

// optional .robertslab.pbuf.NDArray prod_trajectory_counts = 401;
inline bool FFPilotOptions::_internal_has_prod_trajectory_counts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || prod_trajectory_counts_ != nullptr);
  return value;
}
inline bool FFPilotOptions::has_prod_trajectory_counts() const {
  return _internal_has_prod_trajectory_counts();
}
inline const ::robertslab::pbuf::NDArray& FFPilotOptions::_internal_prod_trajectory_counts() const {
  const ::robertslab::pbuf::NDArray* p = prod_trajectory_counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotOptions::prod_trajectory_counts() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.prod_trajectory_counts)
  return _internal_prod_trajectory_counts();
}
inline void FFPilotOptions::unsafe_arena_set_allocated_prod_trajectory_counts(
    ::robertslab::pbuf::NDArray* prod_trajectory_counts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prod_trajectory_counts_);
  }
  prod_trajectory_counts_ = prod_trajectory_counts;
  if (prod_trajectory_counts) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.ffpilot.FFPilotOptions.prod_trajectory_counts)
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::release_prod_trajectory_counts() {
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = prod_trajectory_counts_;
  prod_trajectory_counts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::unsafe_arena_release_prod_trajectory_counts() {
  // @@protoc_insertion_point(field_release:lm.input.ffpilot.FFPilotOptions.prod_trajectory_counts)
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = prod_trajectory_counts_;
  prod_trajectory_counts_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::_internal_mutable_prod_trajectory_counts() {
  _has_bits_[0] |= 0x00000002u;
  if (prod_trajectory_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    prod_trajectory_counts_ = p;
  }
  return prod_trajectory_counts_;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::mutable_prod_trajectory_counts() {
  // @@protoc_insertion_point(field_mutable:lm.input.ffpilot.FFPilotOptions.prod_trajectory_counts)
  return _internal_mutable_prod_trajectory_counts();
}
inline void FFPilotOptions::set_allocated_prod_trajectory_counts(::robertslab::pbuf::NDArray* prod_trajectory_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prod_trajectory_counts_);
  }
  if (prod_trajectory_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prod_trajectory_counts)->GetArena();
    if (message_arena != submessage_arena) {
      prod_trajectory_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prod_trajectory_counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prod_trajectory_counts_ = prod_trajectory_counts;
  // @@protoc_insertion_point(field_set_allocated:lm.input.ffpilot.FFPilotOptions.prod_trajectory_counts)
}

// optional bool prod_skip = 302 [default = false];
inline bool FFPilotOptions::_internal_has_prod_skip() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FFPilotOptions::has_prod_skip() const {
  return _internal_has_prod_skip();
}
inline void FFPilotOptions::clear_prod_skip() {
  prod_skip_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool FFPilotOptions::_internal_prod_skip() const {
  return prod_skip_;
}
inline bool FFPilotOptions::prod_skip() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.prod_skip)
  return _internal_prod_skip();
}
inline void FFPilotOptions::_internal_set_prod_skip(bool value) {
  _has_bits_[0] |= 0x00000200u;
  prod_skip_ = value;
}
inline void FFPilotOptions::set_prod_skip(bool value) {
  _internal_set_prod_skip(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.prod_skip)
}

// optional uint64 optimize_minimum_trajectories = 900 [default = 1000];
inline bool FFPilotOptions::_internal_has_optimize_minimum_trajectories() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FFPilotOptions::has_optimize_minimum_trajectories() const {
  return _internal_has_optimize_minimum_trajectories();
}
inline void FFPilotOptions::clear_optimize_minimum_trajectories() {
  optimize_minimum_trajectories_ = PROTOBUF_ULONGLONG(1000);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotOptions::_internal_optimize_minimum_trajectories() const {
  return optimize_minimum_trajectories_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotOptions::optimize_minimum_trajectories() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.optimize_minimum_trajectories)
  return _internal_optimize_minimum_trajectories();
}
inline void FFPilotOptions::_internal_set_optimize_minimum_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  optimize_minimum_trajectories_ = value;
}
inline void FFPilotOptions::set_optimize_minimum_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_optimize_minimum_trajectories(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.optimize_minimum_trajectories)
}

// optional .robertslab.pbuf.NDArray optimize_sampling_multipliers = 901;
inline bool FFPilotOptions::_internal_has_optimize_sampling_multipliers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || optimize_sampling_multipliers_ != nullptr);
  return value;
}
inline bool FFPilotOptions::has_optimize_sampling_multipliers() const {
  return _internal_has_optimize_sampling_multipliers();
}
inline const ::robertslab::pbuf::NDArray& FFPilotOptions::_internal_optimize_sampling_multipliers() const {
  const ::robertslab::pbuf::NDArray* p = optimize_sampling_multipliers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotOptions::optimize_sampling_multipliers() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.optimize_sampling_multipliers)
  return _internal_optimize_sampling_multipliers();
}
inline void FFPilotOptions::unsafe_arena_set_allocated_optimize_sampling_multipliers(
    ::robertslab::pbuf::NDArray* optimize_sampling_multipliers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimize_sampling_multipliers_);
  }
  optimize_sampling_multipliers_ = optimize_sampling_multipliers;
  if (optimize_sampling_multipliers) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.ffpilot.FFPilotOptions.optimize_sampling_multipliers)
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::release_optimize_sampling_multipliers() {
  _has_bits_[0] &= ~0x00000004u;
  ::robertslab::pbuf::NDArray* temp = optimize_sampling_multipliers_;
  optimize_sampling_multipliers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::unsafe_arena_release_optimize_sampling_multipliers() {
  // @@protoc_insertion_point(field_release:lm.input.ffpilot.FFPilotOptions.optimize_sampling_multipliers)
  _has_bits_[0] &= ~0x00000004u;
  ::robertslab::pbuf::NDArray* temp = optimize_sampling_multipliers_;
  optimize_sampling_multipliers_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::_internal_mutable_optimize_sampling_multipliers() {
  _has_bits_[0] |= 0x00000004u;
  if (optimize_sampling_multipliers_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    optimize_sampling_multipliers_ = p;
  }
  return optimize_sampling_multipliers_;
}
inline ::robertslab::pbuf::NDArray* FFPilotOptions::mutable_optimize_sampling_multipliers() {
  // @@protoc_insertion_point(field_mutable:lm.input.ffpilot.FFPilotOptions.optimize_sampling_multipliers)
  return _internal_mutable_optimize_sampling_multipliers();
}
inline void FFPilotOptions::set_allocated_optimize_sampling_multipliers(::robertslab::pbuf::NDArray* optimize_sampling_multipliers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimize_sampling_multipliers_);
  }
  if (optimize_sampling_multipliers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimize_sampling_multipliers)->GetArena();
    if (message_arena != submessage_arena) {
      optimize_sampling_multipliers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimize_sampling_multipliers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optimize_sampling_multipliers_ = optimize_sampling_multipliers;
  // @@protoc_insertion_point(field_set_allocated:lm.input.ffpilot.FFPilotOptions.optimize_sampling_multipliers)
}

// optional bool optimize_minimize_cost = 902 [default = true];
inline bool FFPilotOptions::_internal_has_optimize_minimize_cost() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FFPilotOptions::has_optimize_minimize_cost() const {
  return _internal_has_optimize_minimize_cost();
}
inline void FFPilotOptions::clear_optimize_minimize_cost() {
  optimize_minimize_cost_ = true;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool FFPilotOptions::_internal_optimize_minimize_cost() const {
  return optimize_minimize_cost_;
}
inline bool FFPilotOptions::optimize_minimize_cost() const {
  // @@protoc_insertion_point(field_get:lm.input.ffpilot.FFPilotOptions.optimize_minimize_cost)
  return _internal_optimize_minimize_cost();
}
inline void FFPilotOptions::_internal_set_optimize_minimize_cost(bool value) {
  _has_bits_[0] |= 0x00000400u;
  optimize_minimize_cost_ = value;
}
inline void FFPilotOptions::set_optimize_minimize_cost(bool value) {
  _internal_set_optimize_minimize_cost(value);
  // @@protoc_insertion_point(field_set:lm.input.ffpilot.FFPilotOptions.optimize_minimize_cost)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ffpilot
}  // namespace input
}  // namespace lm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lm::input::ffpilot::FFPilotOptions_FallbackMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::input::ffpilot::FFPilotOptions_FallbackMethod>() {
  return ::lm::input::ffpilot::FFPilotOptions_FallbackMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto
