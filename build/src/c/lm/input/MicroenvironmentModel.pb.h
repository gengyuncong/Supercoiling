// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/MicroenvironmentModel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fMicroenvironmentModel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fMicroenvironmentModel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/types/BoundaryConditions.pb.h"
#include "robertslab/pbuf/NDArray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fMicroenvironmentModel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2finput_2fMicroenvironmentModel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fMicroenvironmentModel_2eproto;
namespace lm {
namespace input {
class MicroenvironmentModel;
class MicroenvironmentModelDefaultTypeInternal;
extern MicroenvironmentModelDefaultTypeInternal _MicroenvironmentModel_default_instance_;
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::input::MicroenvironmentModel* Arena::CreateMaybeMessage<::lm::input::MicroenvironmentModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace input {

// ===================================================================

class MicroenvironmentModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.input.MicroenvironmentModel) */ {
 public:
  inline MicroenvironmentModel() : MicroenvironmentModel(nullptr) {}
  virtual ~MicroenvironmentModel();

  MicroenvironmentModel(const MicroenvironmentModel& from);
  MicroenvironmentModel(MicroenvironmentModel&& from) noexcept
    : MicroenvironmentModel() {
    *this = ::std::move(from);
  }

  inline MicroenvironmentModel& operator=(const MicroenvironmentModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MicroenvironmentModel& operator=(MicroenvironmentModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MicroenvironmentModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MicroenvironmentModel* internal_default_instance() {
    return reinterpret_cast<const MicroenvironmentModel*>(
               &_MicroenvironmentModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MicroenvironmentModel& a, MicroenvironmentModel& b) {
    a.Swap(&b);
  }
  inline void Swap(MicroenvironmentModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MicroenvironmentModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MicroenvironmentModel* New() const final {
    return CreateMaybeMessage<MicroenvironmentModel>(nullptr);
  }

  MicroenvironmentModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MicroenvironmentModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MicroenvironmentModel& from);
  void MergeFrom(const MicroenvironmentModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MicroenvironmentModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.input.MicroenvironmentModel";
  }
  protected:
  explicit MicroenvironmentModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2finput_2fMicroenvironmentModel_2eproto);
    return ::descriptor_table_lm_2finput_2fMicroenvironmentModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridShapeFieldNumber = 1,
    kSpeciesIndexFieldNumber = 4,
    kDiffusionCoefficientsFieldNumber = 5,
    kInitialConcentrationsFieldNumber = 6,
    kBoundariesFieldNumber = 3,
    kCellInitialSpeciesCountsFieldNumber = 9,
    kCellCoordinatesFieldNumber = 10,
    kCellVolumeFieldNumber = 11,
    kGridSpacingFieldNumber = 2,
    kSynchronizationTimestepFieldNumber = 7,
    kInitialTimeFieldNumber = 12,
    kNumberCellsFieldNumber = 8,
  };
  // repeated int32 grid_shape = 1;
  int grid_shape_size() const;
  private:
  int _internal_grid_shape_size() const;
  public:
  void clear_grid_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grid_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_grid_shape() const;
  void _internal_add_grid_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_grid_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 grid_shape(int index) const;
  void set_grid_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_grid_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      grid_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_grid_shape();

  // repeated int32 species_index = 4;
  int species_index_size() const;
  private:
  int _internal_species_index_size() const;
  public:
  void clear_species_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_species_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_species_index() const;
  void _internal_add_species_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_species_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 species_index(int index) const;
  void set_species_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_species_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      species_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_species_index();

  // repeated double diffusion_coefficients = 5;
  int diffusion_coefficients_size() const;
  private:
  int _internal_diffusion_coefficients_size() const;
  public:
  void clear_diffusion_coefficients();
  private:
  double _internal_diffusion_coefficients(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_diffusion_coefficients() const;
  void _internal_add_diffusion_coefficients(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_diffusion_coefficients();
  public:
  double diffusion_coefficients(int index) const;
  void set_diffusion_coefficients(int index, double value);
  void add_diffusion_coefficients(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      diffusion_coefficients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_diffusion_coefficients();

  // repeated .robertslab.pbuf.NDArray initial_concentrations = 6;
  int initial_concentrations_size() const;
  private:
  int _internal_initial_concentrations_size() const;
  public:
  void clear_initial_concentrations();
  ::robertslab::pbuf::NDArray* mutable_initial_concentrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >*
      mutable_initial_concentrations();
  private:
  const ::robertslab::pbuf::NDArray& _internal_initial_concentrations(int index) const;
  ::robertslab::pbuf::NDArray* _internal_add_initial_concentrations();
  public:
  const ::robertslab::pbuf::NDArray& initial_concentrations(int index) const;
  ::robertslab::pbuf::NDArray* add_initial_concentrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >&
      initial_concentrations() const;

  // required .lm.types.BoundaryConditions boundaries = 3;
  bool has_boundaries() const;
  private:
  bool _internal_has_boundaries() const;
  public:
  void clear_boundaries();
  const ::lm::types::BoundaryConditions& boundaries() const;
  ::lm::types::BoundaryConditions* release_boundaries();
  ::lm::types::BoundaryConditions* mutable_boundaries();
  void set_allocated_boundaries(::lm::types::BoundaryConditions* boundaries);
  private:
  const ::lm::types::BoundaryConditions& _internal_boundaries() const;
  ::lm::types::BoundaryConditions* _internal_mutable_boundaries();
  public:
  void unsafe_arena_set_allocated_boundaries(
      ::lm::types::BoundaryConditions* boundaries);
  ::lm::types::BoundaryConditions* unsafe_arena_release_boundaries();

  // optional .robertslab.pbuf.NDArray cell_initial_species_counts = 9;
  bool has_cell_initial_species_counts() const;
  private:
  bool _internal_has_cell_initial_species_counts() const;
  public:
  void clear_cell_initial_species_counts();
  const ::robertslab::pbuf::NDArray& cell_initial_species_counts() const;
  ::robertslab::pbuf::NDArray* release_cell_initial_species_counts();
  ::robertslab::pbuf::NDArray* mutable_cell_initial_species_counts();
  void set_allocated_cell_initial_species_counts(::robertslab::pbuf::NDArray* cell_initial_species_counts);
  private:
  const ::robertslab::pbuf::NDArray& _internal_cell_initial_species_counts() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_cell_initial_species_counts();
  public:
  void unsafe_arena_set_allocated_cell_initial_species_counts(
      ::robertslab::pbuf::NDArray* cell_initial_species_counts);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_cell_initial_species_counts();

  // optional .robertslab.pbuf.NDArray cell_coordinates = 10;
  bool has_cell_coordinates() const;
  private:
  bool _internal_has_cell_coordinates() const;
  public:
  void clear_cell_coordinates();
  const ::robertslab::pbuf::NDArray& cell_coordinates() const;
  ::robertslab::pbuf::NDArray* release_cell_coordinates();
  ::robertslab::pbuf::NDArray* mutable_cell_coordinates();
  void set_allocated_cell_coordinates(::robertslab::pbuf::NDArray* cell_coordinates);
  private:
  const ::robertslab::pbuf::NDArray& _internal_cell_coordinates() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_cell_coordinates();
  public:
  void unsafe_arena_set_allocated_cell_coordinates(
      ::robertslab::pbuf::NDArray* cell_coordinates);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_cell_coordinates();

  // optional .robertslab.pbuf.NDArray cell_volume = 11;
  bool has_cell_volume() const;
  private:
  bool _internal_has_cell_volume() const;
  public:
  void clear_cell_volume();
  const ::robertslab::pbuf::NDArray& cell_volume() const;
  ::robertslab::pbuf::NDArray* release_cell_volume();
  ::robertslab::pbuf::NDArray* mutable_cell_volume();
  void set_allocated_cell_volume(::robertslab::pbuf::NDArray* cell_volume);
  private:
  const ::robertslab::pbuf::NDArray& _internal_cell_volume() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_cell_volume();
  public:
  void unsafe_arena_set_allocated_cell_volume(
      ::robertslab::pbuf::NDArray* cell_volume);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_cell_volume();

  // required double grid_spacing = 2;
  bool has_grid_spacing() const;
  private:
  bool _internal_has_grid_spacing() const;
  public:
  void clear_grid_spacing();
  double grid_spacing() const;
  void set_grid_spacing(double value);
  private:
  double _internal_grid_spacing() const;
  void _internal_set_grid_spacing(double value);
  public:

  // required double synchronization_timestep = 7;
  bool has_synchronization_timestep() const;
  private:
  bool _internal_has_synchronization_timestep() const;
  public:
  void clear_synchronization_timestep();
  double synchronization_timestep() const;
  void set_synchronization_timestep(double value);
  private:
  double _internal_synchronization_timestep() const;
  void _internal_set_synchronization_timestep(double value);
  public:

  // optional double initial_time = 12 [default = 0];
  bool has_initial_time() const;
  private:
  bool _internal_has_initial_time() const;
  public:
  void clear_initial_time();
  double initial_time() const;
  void set_initial_time(double value);
  private:
  double _internal_initial_time() const;
  void _internal_set_initial_time(double value);
  public:

  // optional uint32 number_cells = 8 [default = 0];
  bool has_number_cells() const;
  private:
  bool _internal_has_number_cells() const;
  public:
  void clear_number_cells();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_cells() const;
  void set_number_cells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_cells() const;
  void _internal_set_number_cells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.input.MicroenvironmentModel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > grid_shape_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > species_index_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > diffusion_coefficients_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray > initial_concentrations_;
  ::lm::types::BoundaryConditions* boundaries_;
  ::robertslab::pbuf::NDArray* cell_initial_species_counts_;
  ::robertslab::pbuf::NDArray* cell_coordinates_;
  ::robertslab::pbuf::NDArray* cell_volume_;
  double grid_spacing_;
  double synchronization_timestep_;
  double initial_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_cells_;
  friend struct ::TableStruct_lm_2finput_2fMicroenvironmentModel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MicroenvironmentModel

// optional double initial_time = 12 [default = 0];
inline bool MicroenvironmentModel::_internal_has_initial_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MicroenvironmentModel::has_initial_time() const {
  return _internal_has_initial_time();
}
inline void MicroenvironmentModel::clear_initial_time() {
  initial_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double MicroenvironmentModel::_internal_initial_time() const {
  return initial_time_;
}
inline double MicroenvironmentModel::initial_time() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.initial_time)
  return _internal_initial_time();
}
inline void MicroenvironmentModel::_internal_set_initial_time(double value) {
  _has_bits_[0] |= 0x00000040u;
  initial_time_ = value;
}
inline void MicroenvironmentModel::set_initial_time(double value) {
  _internal_set_initial_time(value);
  // @@protoc_insertion_point(field_set:lm.input.MicroenvironmentModel.initial_time)
}

// repeated int32 grid_shape = 1;
inline int MicroenvironmentModel::_internal_grid_shape_size() const {
  return grid_shape_.size();
}
inline int MicroenvironmentModel::grid_shape_size() const {
  return _internal_grid_shape_size();
}
inline void MicroenvironmentModel::clear_grid_shape() {
  grid_shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MicroenvironmentModel::_internal_grid_shape(int index) const {
  return grid_shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MicroenvironmentModel::grid_shape(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.grid_shape)
  return _internal_grid_shape(index);
}
inline void MicroenvironmentModel::set_grid_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  grid_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.MicroenvironmentModel.grid_shape)
}
inline void MicroenvironmentModel::_internal_add_grid_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  grid_shape_.Add(value);
}
inline void MicroenvironmentModel::add_grid_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_grid_shape(value);
  // @@protoc_insertion_point(field_add:lm.input.MicroenvironmentModel.grid_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MicroenvironmentModel::_internal_grid_shape() const {
  return grid_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MicroenvironmentModel::grid_shape() const {
  // @@protoc_insertion_point(field_list:lm.input.MicroenvironmentModel.grid_shape)
  return _internal_grid_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MicroenvironmentModel::_internal_mutable_grid_shape() {
  return &grid_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MicroenvironmentModel::mutable_grid_shape() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.MicroenvironmentModel.grid_shape)
  return _internal_mutable_grid_shape();
}

// required double grid_spacing = 2;
inline bool MicroenvironmentModel::_internal_has_grid_spacing() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MicroenvironmentModel::has_grid_spacing() const {
  return _internal_has_grid_spacing();
}
inline void MicroenvironmentModel::clear_grid_spacing() {
  grid_spacing_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double MicroenvironmentModel::_internal_grid_spacing() const {
  return grid_spacing_;
}
inline double MicroenvironmentModel::grid_spacing() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.grid_spacing)
  return _internal_grid_spacing();
}
inline void MicroenvironmentModel::_internal_set_grid_spacing(double value) {
  _has_bits_[0] |= 0x00000010u;
  grid_spacing_ = value;
}
inline void MicroenvironmentModel::set_grid_spacing(double value) {
  _internal_set_grid_spacing(value);
  // @@protoc_insertion_point(field_set:lm.input.MicroenvironmentModel.grid_spacing)
}

// required .lm.types.BoundaryConditions boundaries = 3;
inline bool MicroenvironmentModel::_internal_has_boundaries() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || boundaries_ != nullptr);
  return value;
}
inline bool MicroenvironmentModel::has_boundaries() const {
  return _internal_has_boundaries();
}
inline const ::lm::types::BoundaryConditions& MicroenvironmentModel::_internal_boundaries() const {
  const ::lm::types::BoundaryConditions* p = boundaries_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::BoundaryConditions*>(
      &::lm::types::_BoundaryConditions_default_instance_);
}
inline const ::lm::types::BoundaryConditions& MicroenvironmentModel::boundaries() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.boundaries)
  return _internal_boundaries();
}
inline void MicroenvironmentModel::unsafe_arena_set_allocated_boundaries(
    ::lm::types::BoundaryConditions* boundaries) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundaries_);
  }
  boundaries_ = boundaries;
  if (boundaries) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.MicroenvironmentModel.boundaries)
}
inline ::lm::types::BoundaryConditions* MicroenvironmentModel::release_boundaries() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::types::BoundaryConditions* temp = boundaries_;
  boundaries_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::BoundaryConditions* MicroenvironmentModel::unsafe_arena_release_boundaries() {
  // @@protoc_insertion_point(field_release:lm.input.MicroenvironmentModel.boundaries)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::types::BoundaryConditions* temp = boundaries_;
  boundaries_ = nullptr;
  return temp;
}
inline ::lm::types::BoundaryConditions* MicroenvironmentModel::_internal_mutable_boundaries() {
  _has_bits_[0] |= 0x00000001u;
  if (boundaries_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::BoundaryConditions>(GetArena());
    boundaries_ = p;
  }
  return boundaries_;
}
inline ::lm::types::BoundaryConditions* MicroenvironmentModel::mutable_boundaries() {
  // @@protoc_insertion_point(field_mutable:lm.input.MicroenvironmentModel.boundaries)
  return _internal_mutable_boundaries();
}
inline void MicroenvironmentModel::set_allocated_boundaries(::lm::types::BoundaryConditions* boundaries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundaries_);
  }
  if (boundaries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundaries)->GetArena();
    if (message_arena != submessage_arena) {
      boundaries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundaries, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  boundaries_ = boundaries;
  // @@protoc_insertion_point(field_set_allocated:lm.input.MicroenvironmentModel.boundaries)
}

// repeated int32 species_index = 4;
inline int MicroenvironmentModel::_internal_species_index_size() const {
  return species_index_.size();
}
inline int MicroenvironmentModel::species_index_size() const {
  return _internal_species_index_size();
}
inline void MicroenvironmentModel::clear_species_index() {
  species_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MicroenvironmentModel::_internal_species_index(int index) const {
  return species_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MicroenvironmentModel::species_index(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.species_index)
  return _internal_species_index(index);
}
inline void MicroenvironmentModel::set_species_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  species_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.MicroenvironmentModel.species_index)
}
inline void MicroenvironmentModel::_internal_add_species_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  species_index_.Add(value);
}
inline void MicroenvironmentModel::add_species_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_species_index(value);
  // @@protoc_insertion_point(field_add:lm.input.MicroenvironmentModel.species_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MicroenvironmentModel::_internal_species_index() const {
  return species_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MicroenvironmentModel::species_index() const {
  // @@protoc_insertion_point(field_list:lm.input.MicroenvironmentModel.species_index)
  return _internal_species_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MicroenvironmentModel::_internal_mutable_species_index() {
  return &species_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MicroenvironmentModel::mutable_species_index() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.MicroenvironmentModel.species_index)
  return _internal_mutable_species_index();
}

// repeated double diffusion_coefficients = 5;
inline int MicroenvironmentModel::_internal_diffusion_coefficients_size() const {
  return diffusion_coefficients_.size();
}
inline int MicroenvironmentModel::diffusion_coefficients_size() const {
  return _internal_diffusion_coefficients_size();
}
inline void MicroenvironmentModel::clear_diffusion_coefficients() {
  diffusion_coefficients_.Clear();
}
inline double MicroenvironmentModel::_internal_diffusion_coefficients(int index) const {
  return diffusion_coefficients_.Get(index);
}
inline double MicroenvironmentModel::diffusion_coefficients(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.diffusion_coefficients)
  return _internal_diffusion_coefficients(index);
}
inline void MicroenvironmentModel::set_diffusion_coefficients(int index, double value) {
  diffusion_coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.MicroenvironmentModel.diffusion_coefficients)
}
inline void MicroenvironmentModel::_internal_add_diffusion_coefficients(double value) {
  diffusion_coefficients_.Add(value);
}
inline void MicroenvironmentModel::add_diffusion_coefficients(double value) {
  _internal_add_diffusion_coefficients(value);
  // @@protoc_insertion_point(field_add:lm.input.MicroenvironmentModel.diffusion_coefficients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MicroenvironmentModel::_internal_diffusion_coefficients() const {
  return diffusion_coefficients_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MicroenvironmentModel::diffusion_coefficients() const {
  // @@protoc_insertion_point(field_list:lm.input.MicroenvironmentModel.diffusion_coefficients)
  return _internal_diffusion_coefficients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MicroenvironmentModel::_internal_mutable_diffusion_coefficients() {
  return &diffusion_coefficients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MicroenvironmentModel::mutable_diffusion_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.MicroenvironmentModel.diffusion_coefficients)
  return _internal_mutable_diffusion_coefficients();
}

// repeated .robertslab.pbuf.NDArray initial_concentrations = 6;
inline int MicroenvironmentModel::_internal_initial_concentrations_size() const {
  return initial_concentrations_.size();
}
inline int MicroenvironmentModel::initial_concentrations_size() const {
  return _internal_initial_concentrations_size();
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::mutable_initial_concentrations(int index) {
  // @@protoc_insertion_point(field_mutable:lm.input.MicroenvironmentModel.initial_concentrations)
  return initial_concentrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >*
MicroenvironmentModel::mutable_initial_concentrations() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.MicroenvironmentModel.initial_concentrations)
  return &initial_concentrations_;
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::_internal_initial_concentrations(int index) const {
  return initial_concentrations_.Get(index);
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::initial_concentrations(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.initial_concentrations)
  return _internal_initial_concentrations(index);
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::_internal_add_initial_concentrations() {
  return initial_concentrations_.Add();
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::add_initial_concentrations() {
  // @@protoc_insertion_point(field_add:lm.input.MicroenvironmentModel.initial_concentrations)
  return _internal_add_initial_concentrations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >&
MicroenvironmentModel::initial_concentrations() const {
  // @@protoc_insertion_point(field_list:lm.input.MicroenvironmentModel.initial_concentrations)
  return initial_concentrations_;
}

// required double synchronization_timestep = 7;
inline bool MicroenvironmentModel::_internal_has_synchronization_timestep() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MicroenvironmentModel::has_synchronization_timestep() const {
  return _internal_has_synchronization_timestep();
}
inline void MicroenvironmentModel::clear_synchronization_timestep() {
  synchronization_timestep_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double MicroenvironmentModel::_internal_synchronization_timestep() const {
  return synchronization_timestep_;
}
inline double MicroenvironmentModel::synchronization_timestep() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.synchronization_timestep)
  return _internal_synchronization_timestep();
}
inline void MicroenvironmentModel::_internal_set_synchronization_timestep(double value) {
  _has_bits_[0] |= 0x00000020u;
  synchronization_timestep_ = value;
}
inline void MicroenvironmentModel::set_synchronization_timestep(double value) {
  _internal_set_synchronization_timestep(value);
  // @@protoc_insertion_point(field_set:lm.input.MicroenvironmentModel.synchronization_timestep)
}

// optional uint32 number_cells = 8 [default = 0];
inline bool MicroenvironmentModel::_internal_has_number_cells() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MicroenvironmentModel::has_number_cells() const {
  return _internal_has_number_cells();
}
inline void MicroenvironmentModel::clear_number_cells() {
  number_cells_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MicroenvironmentModel::_internal_number_cells() const {
  return number_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MicroenvironmentModel::number_cells() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.number_cells)
  return _internal_number_cells();
}
inline void MicroenvironmentModel::_internal_set_number_cells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  number_cells_ = value;
}
inline void MicroenvironmentModel::set_number_cells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_cells(value);
  // @@protoc_insertion_point(field_set:lm.input.MicroenvironmentModel.number_cells)
}

// optional .robertslab.pbuf.NDArray cell_initial_species_counts = 9;
inline bool MicroenvironmentModel::_internal_has_cell_initial_species_counts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_initial_species_counts_ != nullptr);
  return value;
}
inline bool MicroenvironmentModel::has_cell_initial_species_counts() const {
  return _internal_has_cell_initial_species_counts();
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::_internal_cell_initial_species_counts() const {
  const ::robertslab::pbuf::NDArray* p = cell_initial_species_counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::cell_initial_species_counts() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.cell_initial_species_counts)
  return _internal_cell_initial_species_counts();
}
inline void MicroenvironmentModel::unsafe_arena_set_allocated_cell_initial_species_counts(
    ::robertslab::pbuf::NDArray* cell_initial_species_counts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_initial_species_counts_);
  }
  cell_initial_species_counts_ = cell_initial_species_counts;
  if (cell_initial_species_counts) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.MicroenvironmentModel.cell_initial_species_counts)
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::release_cell_initial_species_counts() {
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = cell_initial_species_counts_;
  cell_initial_species_counts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::unsafe_arena_release_cell_initial_species_counts() {
  // @@protoc_insertion_point(field_release:lm.input.MicroenvironmentModel.cell_initial_species_counts)
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = cell_initial_species_counts_;
  cell_initial_species_counts_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::_internal_mutable_cell_initial_species_counts() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_initial_species_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    cell_initial_species_counts_ = p;
  }
  return cell_initial_species_counts_;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::mutable_cell_initial_species_counts() {
  // @@protoc_insertion_point(field_mutable:lm.input.MicroenvironmentModel.cell_initial_species_counts)
  return _internal_mutable_cell_initial_species_counts();
}
inline void MicroenvironmentModel::set_allocated_cell_initial_species_counts(::robertslab::pbuf::NDArray* cell_initial_species_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_initial_species_counts_);
  }
  if (cell_initial_species_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_initial_species_counts)->GetArena();
    if (message_arena != submessage_arena) {
      cell_initial_species_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_initial_species_counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_initial_species_counts_ = cell_initial_species_counts;
  // @@protoc_insertion_point(field_set_allocated:lm.input.MicroenvironmentModel.cell_initial_species_counts)
}

// optional .robertslab.pbuf.NDArray cell_coordinates = 10;
inline bool MicroenvironmentModel::_internal_has_cell_coordinates() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cell_coordinates_ != nullptr);
  return value;
}
inline bool MicroenvironmentModel::has_cell_coordinates() const {
  return _internal_has_cell_coordinates();
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::_internal_cell_coordinates() const {
  const ::robertslab::pbuf::NDArray* p = cell_coordinates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::cell_coordinates() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.cell_coordinates)
  return _internal_cell_coordinates();
}
inline void MicroenvironmentModel::unsafe_arena_set_allocated_cell_coordinates(
    ::robertslab::pbuf::NDArray* cell_coordinates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_coordinates_);
  }
  cell_coordinates_ = cell_coordinates;
  if (cell_coordinates) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.MicroenvironmentModel.cell_coordinates)
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::release_cell_coordinates() {
  _has_bits_[0] &= ~0x00000004u;
  ::robertslab::pbuf::NDArray* temp = cell_coordinates_;
  cell_coordinates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::unsafe_arena_release_cell_coordinates() {
  // @@protoc_insertion_point(field_release:lm.input.MicroenvironmentModel.cell_coordinates)
  _has_bits_[0] &= ~0x00000004u;
  ::robertslab::pbuf::NDArray* temp = cell_coordinates_;
  cell_coordinates_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::_internal_mutable_cell_coordinates() {
  _has_bits_[0] |= 0x00000004u;
  if (cell_coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    cell_coordinates_ = p;
  }
  return cell_coordinates_;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::mutable_cell_coordinates() {
  // @@protoc_insertion_point(field_mutable:lm.input.MicroenvironmentModel.cell_coordinates)
  return _internal_mutable_cell_coordinates();
}
inline void MicroenvironmentModel::set_allocated_cell_coordinates(::robertslab::pbuf::NDArray* cell_coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_coordinates_);
  }
  if (cell_coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_coordinates)->GetArena();
    if (message_arena != submessage_arena) {
      cell_coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_coordinates, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cell_coordinates_ = cell_coordinates;
  // @@protoc_insertion_point(field_set_allocated:lm.input.MicroenvironmentModel.cell_coordinates)
}

// optional .robertslab.pbuf.NDArray cell_volume = 11;
inline bool MicroenvironmentModel::_internal_has_cell_volume() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || cell_volume_ != nullptr);
  return value;
}
inline bool MicroenvironmentModel::has_cell_volume() const {
  return _internal_has_cell_volume();
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::_internal_cell_volume() const {
  const ::robertslab::pbuf::NDArray* p = cell_volume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& MicroenvironmentModel::cell_volume() const {
  // @@protoc_insertion_point(field_get:lm.input.MicroenvironmentModel.cell_volume)
  return _internal_cell_volume();
}
inline void MicroenvironmentModel::unsafe_arena_set_allocated_cell_volume(
    ::robertslab::pbuf::NDArray* cell_volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_volume_);
  }
  cell_volume_ = cell_volume;
  if (cell_volume) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.input.MicroenvironmentModel.cell_volume)
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::release_cell_volume() {
  _has_bits_[0] &= ~0x00000008u;
  ::robertslab::pbuf::NDArray* temp = cell_volume_;
  cell_volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::unsafe_arena_release_cell_volume() {
  // @@protoc_insertion_point(field_release:lm.input.MicroenvironmentModel.cell_volume)
  _has_bits_[0] &= ~0x00000008u;
  ::robertslab::pbuf::NDArray* temp = cell_volume_;
  cell_volume_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::_internal_mutable_cell_volume() {
  _has_bits_[0] |= 0x00000008u;
  if (cell_volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    cell_volume_ = p;
  }
  return cell_volume_;
}
inline ::robertslab::pbuf::NDArray* MicroenvironmentModel::mutable_cell_volume() {
  // @@protoc_insertion_point(field_mutable:lm.input.MicroenvironmentModel.cell_volume)
  return _internal_mutable_cell_volume();
}
inline void MicroenvironmentModel::set_allocated_cell_volume(::robertslab::pbuf::NDArray* cell_volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_volume_);
  }
  if (cell_volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_volume)->GetArena();
    if (message_arena != submessage_arena) {
      cell_volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_volume, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cell_volume_ = cell_volume;
  // @@protoc_insertion_point(field_set_allocated:lm.input.MicroenvironmentModel.cell_volume)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace input
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fMicroenvironmentModel_2eproto
