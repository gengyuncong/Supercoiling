// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/DiffusionModel.proto

#include "lm/input/DiffusionModel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fBoundaryConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fLattice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lattice_lm_2ftypes_2fLattice_2eproto;
namespace lm {
namespace input {
class DiffusionModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiffusionModel> _instance;
} _DiffusionModel_default_instance_;
}  // namespace input
}  // namespace lm
static void InitDefaultsscc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_DiffusionModel_default_instance_;
    new (ptr) ::lm::input::DiffusionModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::DiffusionModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto}, {
      &scc_info_Lattice_lm_2ftypes_2fLattice_2eproto.base,
      &scc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2finput_2fDiffusionModel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2finput_2fDiffusionModel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2finput_2fDiffusionModel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2finput_2fDiffusionModel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, number_species_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, number_reactions_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, number_site_types_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, diffusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, reaction_location_matrix_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, lattice_spacing_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, initial_lattice_),
  PROTOBUF_FIELD_OFFSET(::lm::input::DiffusionModel, boundary_conditions_),
  2,
  3,
  5,
  ~0u,
  ~0u,
  4,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::lm::input::DiffusionModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_DiffusionModel_default_instance_),
};

const char descriptor_table_protodef_lm_2finput_2fDiffusionModel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035lm/input/DiffusionModel.proto\022\010lm.inpu"
  "t\032!lm/types/BoundaryConditions.proto\032\026lm"
  "/types/Lattice.proto\"\241\002\n\016DiffusionModel\022"
  "\026\n\016number_species\030\001 \002(\005\022\030\n\020number_reacti"
  "ons\030\002 \002(\005\022\031\n\021number_site_types\030\003 \002(\005\022\034\n\020"
  "diffusion_matrix\030\004 \003(\001B\002\020\001\022$\n\030reaction_l"
  "ocation_matrix\030\005 \003(\rB\002\020\001\022\027\n\017lattice_spac"
  "ing\030\006 \002(\001\022*\n\017initial_lattice\030\007 \002(\0132\021.lm."
  "types.Lattice\0229\n\023boundary_conditions\030\010 \001"
  "(\0132\034.lm.types.BoundaryConditions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2finput_2fDiffusionModel_2eproto_deps[2] = {
  &::descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto,
  &::descriptor_table_lm_2ftypes_2fLattice_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2finput_2fDiffusionModel_2eproto_sccs[1] = {
  &scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2finput_2fDiffusionModel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fDiffusionModel_2eproto = {
  false, false, descriptor_table_protodef_lm_2finput_2fDiffusionModel_2eproto, "lm/input/DiffusionModel.proto", 392,
  &descriptor_table_lm_2finput_2fDiffusionModel_2eproto_once, descriptor_table_lm_2finput_2fDiffusionModel_2eproto_sccs, descriptor_table_lm_2finput_2fDiffusionModel_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_lm_2finput_2fDiffusionModel_2eproto::offsets,
  file_level_metadata_lm_2finput_2fDiffusionModel_2eproto, 1, file_level_enum_descriptors_lm_2finput_2fDiffusionModel_2eproto, file_level_service_descriptors_lm_2finput_2fDiffusionModel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2finput_2fDiffusionModel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2finput_2fDiffusionModel_2eproto)), true);
namespace lm {
namespace input {

// ===================================================================

void DiffusionModel::InitAsDefaultInstance() {
  ::lm::input::_DiffusionModel_default_instance_._instance.get_mutable()->initial_lattice_ = const_cast< ::lm::types::Lattice*>(
      ::lm::types::Lattice::internal_default_instance());
  ::lm::input::_DiffusionModel_default_instance_._instance.get_mutable()->boundary_conditions_ = const_cast< ::lm::types::BoundaryConditions*>(
      ::lm::types::BoundaryConditions::internal_default_instance());
}
class DiffusionModel::_Internal {
 public:
  using HasBits = decltype(std::declval<DiffusionModel>()._has_bits_);
  static void set_has_number_species(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_number_reactions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_number_site_types(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lattice_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::lm::types::Lattice& initial_lattice(const DiffusionModel* msg);
  static void set_has_initial_lattice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::lm::types::BoundaryConditions& boundary_conditions(const DiffusionModel* msg);
  static void set_has_boundary_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

const ::lm::types::Lattice&
DiffusionModel::_Internal::initial_lattice(const DiffusionModel* msg) {
  return *msg->initial_lattice_;
}
const ::lm::types::BoundaryConditions&
DiffusionModel::_Internal::boundary_conditions(const DiffusionModel* msg) {
  return *msg->boundary_conditions_;
}
void DiffusionModel::clear_initial_lattice() {
  if (initial_lattice_ != nullptr) initial_lattice_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DiffusionModel::clear_boundary_conditions() {
  if (boundary_conditions_ != nullptr) boundary_conditions_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DiffusionModel::DiffusionModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diffusion_matrix_(arena),
  reaction_location_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.DiffusionModel)
}
DiffusionModel::DiffusionModel(const DiffusionModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      diffusion_matrix_(from.diffusion_matrix_),
      reaction_location_matrix_(from.reaction_location_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initial_lattice()) {
    initial_lattice_ = new ::lm::types::Lattice(*from.initial_lattice_);
  } else {
    initial_lattice_ = nullptr;
  }
  if (from._internal_has_boundary_conditions()) {
    boundary_conditions_ = new ::lm::types::BoundaryConditions(*from.boundary_conditions_);
  } else {
    boundary_conditions_ = nullptr;
  }
  ::memcpy(&number_species_, &from.number_species_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_site_types_) -
    reinterpret_cast<char*>(&number_species_)) + sizeof(number_site_types_));
  // @@protoc_insertion_point(copy_constructor:lm.input.DiffusionModel)
}

void DiffusionModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto.base);
  ::memset(&initial_lattice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_site_types_) -
      reinterpret_cast<char*>(&initial_lattice_)) + sizeof(number_site_types_));
}

DiffusionModel::~DiffusionModel() {
  // @@protoc_insertion_point(destructor:lm.input.DiffusionModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiffusionModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete initial_lattice_;
  if (this != internal_default_instance()) delete boundary_conditions_;
}

void DiffusionModel::ArenaDtor(void* object) {
  DiffusionModel* _this = reinterpret_cast< DiffusionModel* >(object);
  (void)_this;
}
void DiffusionModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiffusionModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiffusionModel& DiffusionModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto.base);
  return *internal_default_instance();
}


void DiffusionModel::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.DiffusionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diffusion_matrix_.Clear();
  reaction_location_matrix_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(initial_lattice_ != nullptr);
      initial_lattice_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundary_conditions_ != nullptr);
      boundary_conditions_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&number_species_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_site_types_) -
        reinterpret_cast<char*>(&number_species_)) + sizeof(number_site_types_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiffusionModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 number_species = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number_species(&has_bits);
          number_species_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 number_reactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_reactions(&has_bits);
          number_reactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 number_site_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_site_types(&has_bits);
          number_site_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double diffusion_matrix = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_diffusion_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_diffusion_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint32 reaction_location_matrix = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reaction_location_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_reaction_location_matrix(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double lattice_spacing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lattice_spacing(&has_bits);
          lattice_spacing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .lm.types.Lattice initial_lattice = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_lattice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.BoundaryConditions boundary_conditions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiffusionModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.DiffusionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 number_species = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number_species(), target);
  }

  // required int32 number_reactions = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number_reactions(), target);
  }

  // required int32 number_site_types = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_number_site_types(), target);
  }

  // repeated double diffusion_matrix = 4 [packed = true];
  if (this->_internal_diffusion_matrix_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_diffusion_matrix(), target);
  }

  // repeated uint32 reaction_location_matrix = 5 [packed = true];
  {
    int byte_size = _reaction_location_matrix_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_reaction_location_matrix(), byte_size, target);
    }
  }

  // required double lattice_spacing = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lattice_spacing(), target);
  }

  // required .lm.types.Lattice initial_lattice = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::initial_lattice(this), target, stream);
  }

  // optional .lm.types.BoundaryConditions boundary_conditions = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::boundary_conditions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.DiffusionModel)
  return target;
}

size_t DiffusionModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.input.DiffusionModel)
  size_t total_size = 0;

  if (_internal_has_initial_lattice()) {
    // required .lm.types.Lattice initial_lattice = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_lattice_);
  }

  if (_internal_has_number_species()) {
    // required int32 number_species = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_species());
  }

  if (_internal_has_number_reactions()) {
    // required int32 number_reactions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_reactions());
  }

  if (_internal_has_lattice_spacing()) {
    // required double lattice_spacing = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_number_site_types()) {
    // required int32 number_site_types = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_site_types());
  }

  return total_size;
}
size_t DiffusionModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.DiffusionModel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required .lm.types.Lattice initial_lattice = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_lattice_);

    // required int32 number_species = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_species());

    // required int32 number_reactions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_reactions());

    // required double lattice_spacing = 6;
    total_size += 1 + 8;

    // required int32 number_site_types = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_site_types());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double diffusion_matrix = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_diffusion_matrix_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _diffusion_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 reaction_location_matrix = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reaction_location_matrix_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _reaction_location_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .lm.types.BoundaryConditions boundary_conditions = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundary_conditions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiffusionModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.DiffusionModel)
  GOOGLE_DCHECK_NE(&from, this);
  const DiffusionModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiffusionModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.DiffusionModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.DiffusionModel)
    MergeFrom(*source);
  }
}

void DiffusionModel::MergeFrom(const DiffusionModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.DiffusionModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diffusion_matrix_.MergeFrom(from.diffusion_matrix_);
  reaction_location_matrix_.MergeFrom(from.reaction_location_matrix_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_initial_lattice()->::lm::types::Lattice::MergeFrom(from._internal_initial_lattice());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_boundary_conditions()->::lm::types::BoundaryConditions::MergeFrom(from._internal_boundary_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      number_species_ = from.number_species_;
    }
    if (cached_has_bits & 0x00000008u) {
      number_reactions_ = from.number_reactions_;
    }
    if (cached_has_bits & 0x00000010u) {
      lattice_spacing_ = from.lattice_spacing_;
    }
    if (cached_has_bits & 0x00000020u) {
      number_site_types_ = from.number_site_types_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiffusionModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.DiffusionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiffusionModel::CopyFrom(const DiffusionModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.DiffusionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffusionModel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_initial_lattice()) {
    if (!initial_lattice_->IsInitialized()) return false;
  }
  if (_internal_has_boundary_conditions()) {
    if (!boundary_conditions_->IsInitialized()) return false;
  }
  return true;
}

void DiffusionModel::InternalSwap(DiffusionModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  diffusion_matrix_.InternalSwap(&other->diffusion_matrix_);
  reaction_location_matrix_.InternalSwap(&other->reaction_location_matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiffusionModel, number_site_types_)
      + sizeof(DiffusionModel::number_site_types_)
      - PROTOBUF_FIELD_OFFSET(DiffusionModel, initial_lattice_)>(
          reinterpret_cast<char*>(&initial_lattice_),
          reinterpret_cast<char*>(&other->initial_lattice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffusionModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::input::DiffusionModel* Arena::CreateMaybeMessage< ::lm::input::DiffusionModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::DiffusionModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
