// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/Input.proto

#include "lm/input/Input.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fCMERestart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMERestart_lm_2finput_2fCMERestart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fDiffusionModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fMicroenvironmentModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MicroenvironmentModel_lm_2finput_2fMicroenvironmentModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fOutputOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fRDMERestart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RDMERestart_lm_2finput_2fRDMERestart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fReactionModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fSimulationOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FFPilotOptions_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fOrderParameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTilings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tilings_lm_2ftypes_2fTilings_2eproto;
namespace lm {
namespace input {
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
}  // namespace input
}  // namespace lm
static void InitDefaultsscc_info_Input_lm_2finput_2fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_Input_default_instance_;
    new (ptr) ::lm::input::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Input_lm_2finput_2fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Input_lm_2finput_2fInput_2eproto}, {
      &scc_info_SimulationOptions_lm_2finput_2fSimulationOptions_2eproto.base,
      &scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto.base,
      &scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto.base,
      &scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto.base,
      &scc_info_MicroenvironmentModel_lm_2finput_2fMicroenvironmentModel_2eproto.base,
      &scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto.base,
      &scc_info_Tilings_lm_2ftypes_2fTilings_2eproto.base,
      &scc_info_FFPilotOptions_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto.base,
      &scc_info_CMERestart_lm_2finput_2fCMERestart_2eproto.base,
      &scc_info_RDMERestart_lm_2finput_2fRDMERestart_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2finput_2fInput_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2finput_2fInput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2finput_2fInput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2finput_2fInput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, simulation_options_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, output_options_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, reaction_model_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, diffusion_model_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, microenv_model_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, order_parameters_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, tilings_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, ffpilot_options_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, cme_restart_),
  PROTOBUF_FIELD_OFFSET(::lm::input::Input, rdme_restart_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::lm::input::Input)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_Input_default_instance_),
};

const char descriptor_table_protodef_lm_2finput_2fInput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024lm/input/Input.proto\022\010lm.input\032\031lm/inp"
  "ut/CMERestart.proto\032\035lm/input/DiffusionM"
  "odel.proto\032$lm/input/MicroenvironmentMod"
  "el.proto\032\034lm/input/OutputOptions.proto\032\032"
  "lm/input/RDMERestart.proto\032\034lm/input/Rea"
  "ctionModel.proto\032 lm/input/SimulationOpt"
  "ions.proto\032%lm/input/ffpilot/FFPilotOpti"
  "ons.proto\032\036lm/types/OrderParameters.prot"
  "o\032\026lm/types/Tilings.proto\"\375\003\n\005Input\0227\n\022s"
  "imulation_options\030\001 \001(\0132\033.lm.input.Simul"
  "ationOptions\022/\n\016output_options\030\002 \001(\0132\027.l"
  "m.input.OutputOptions\022/\n\016reaction_model\030"
  "\n \001(\0132\027.lm.input.ReactionModel\0221\n\017diffus"
  "ion_model\030\013 \001(\0132\030.lm.input.DiffusionMode"
  "l\0227\n\016microenv_model\030\014 \001(\0132\037.lm.input.Mic"
  "roenvironmentModel\0223\n\020order_parameters\030d"
  " \001(\0132\031.lm.types.OrderParameters\022\"\n\007tilin"
  "gs\030e \001(\0132\021.lm.types.Tilings\022:\n\017ffpilot_o"
  "ptions\030\310\001 \001(\0132 .lm.input.ffpilot.FFPilot"
  "Options\022*\n\013cme_restart\030\350\007 \001(\0132\024.lm.input"
  ".CMERestart\022,\n\014rdme_restart\030\351\007 \001(\0132\025.lm."
  "input.RDMERestart"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2finput_2fInput_2eproto_deps[10] = {
  &::descriptor_table_lm_2finput_2fCMERestart_2eproto,
  &::descriptor_table_lm_2finput_2fDiffusionModel_2eproto,
  &::descriptor_table_lm_2finput_2fMicroenvironmentModel_2eproto,
  &::descriptor_table_lm_2finput_2fOutputOptions_2eproto,
  &::descriptor_table_lm_2finput_2fRDMERestart_2eproto,
  &::descriptor_table_lm_2finput_2fReactionModel_2eproto,
  &::descriptor_table_lm_2finput_2fSimulationOptions_2eproto,
  &::descriptor_table_lm_2finput_2fffpilot_2fFFPilotOptions_2eproto,
  &::descriptor_table_lm_2ftypes_2fOrderParameters_2eproto,
  &::descriptor_table_lm_2ftypes_2fTilings_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2finput_2fInput_2eproto_sccs[1] = {
  &scc_info_Input_lm_2finput_2fInput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2finput_2fInput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fInput_2eproto = {
  false, false, descriptor_table_protodef_lm_2finput_2fInput_2eproto, "lm/input/Input.proto", 857,
  &descriptor_table_lm_2finput_2fInput_2eproto_once, descriptor_table_lm_2finput_2fInput_2eproto_sccs, descriptor_table_lm_2finput_2fInput_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_lm_2finput_2fInput_2eproto::offsets,
  file_level_metadata_lm_2finput_2fInput_2eproto, 1, file_level_enum_descriptors_lm_2finput_2fInput_2eproto, file_level_service_descriptors_lm_2finput_2fInput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2finput_2fInput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2finput_2fInput_2eproto)), true);
namespace lm {
namespace input {

// ===================================================================

void Input::InitAsDefaultInstance() {
  ::lm::input::_Input_default_instance_._instance.get_mutable()->simulation_options_ = const_cast< ::lm::input::SimulationOptions*>(
      ::lm::input::SimulationOptions::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->output_options_ = const_cast< ::lm::input::OutputOptions*>(
      ::lm::input::OutputOptions::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->reaction_model_ = const_cast< ::lm::input::ReactionModel*>(
      ::lm::input::ReactionModel::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->diffusion_model_ = const_cast< ::lm::input::DiffusionModel*>(
      ::lm::input::DiffusionModel::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->microenv_model_ = const_cast< ::lm::input::MicroenvironmentModel*>(
      ::lm::input::MicroenvironmentModel::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->order_parameters_ = const_cast< ::lm::types::OrderParameters*>(
      ::lm::types::OrderParameters::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->tilings_ = const_cast< ::lm::types::Tilings*>(
      ::lm::types::Tilings::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->ffpilot_options_ = const_cast< ::lm::input::ffpilot::FFPilotOptions*>(
      ::lm::input::ffpilot::FFPilotOptions::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->cme_restart_ = const_cast< ::lm::input::CMERestart*>(
      ::lm::input::CMERestart::internal_default_instance());
  ::lm::input::_Input_default_instance_._instance.get_mutable()->rdme_restart_ = const_cast< ::lm::input::RDMERestart*>(
      ::lm::input::RDMERestart::internal_default_instance());
}
class Input::_Internal {
 public:
  using HasBits = decltype(std::declval<Input>()._has_bits_);
  static const ::lm::input::SimulationOptions& simulation_options(const Input* msg);
  static void set_has_simulation_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::lm::input::OutputOptions& output_options(const Input* msg);
  static void set_has_output_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::lm::input::ReactionModel& reaction_model(const Input* msg);
  static void set_has_reaction_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::lm::input::DiffusionModel& diffusion_model(const Input* msg);
  static void set_has_diffusion_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::lm::input::MicroenvironmentModel& microenv_model(const Input* msg);
  static void set_has_microenv_model(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::lm::types::OrderParameters& order_parameters(const Input* msg);
  static void set_has_order_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::lm::types::Tilings& tilings(const Input* msg);
  static void set_has_tilings(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::lm::input::ffpilot::FFPilotOptions& ffpilot_options(const Input* msg);
  static void set_has_ffpilot_options(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::lm::input::CMERestart& cme_restart(const Input* msg);
  static void set_has_cme_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::lm::input::RDMERestart& rdme_restart(const Input* msg);
  static void set_has_rdme_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::lm::input::SimulationOptions&
Input::_Internal::simulation_options(const Input* msg) {
  return *msg->simulation_options_;
}
const ::lm::input::OutputOptions&
Input::_Internal::output_options(const Input* msg) {
  return *msg->output_options_;
}
const ::lm::input::ReactionModel&
Input::_Internal::reaction_model(const Input* msg) {
  return *msg->reaction_model_;
}
const ::lm::input::DiffusionModel&
Input::_Internal::diffusion_model(const Input* msg) {
  return *msg->diffusion_model_;
}
const ::lm::input::MicroenvironmentModel&
Input::_Internal::microenv_model(const Input* msg) {
  return *msg->microenv_model_;
}
const ::lm::types::OrderParameters&
Input::_Internal::order_parameters(const Input* msg) {
  return *msg->order_parameters_;
}
const ::lm::types::Tilings&
Input::_Internal::tilings(const Input* msg) {
  return *msg->tilings_;
}
const ::lm::input::ffpilot::FFPilotOptions&
Input::_Internal::ffpilot_options(const Input* msg) {
  return *msg->ffpilot_options_;
}
const ::lm::input::CMERestart&
Input::_Internal::cme_restart(const Input* msg) {
  return *msg->cme_restart_;
}
const ::lm::input::RDMERestart&
Input::_Internal::rdme_restart(const Input* msg) {
  return *msg->rdme_restart_;
}
void Input::clear_simulation_options() {
  if (simulation_options_ != nullptr) simulation_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Input::clear_output_options() {
  if (output_options_ != nullptr) output_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Input::clear_reaction_model() {
  if (reaction_model_ != nullptr) reaction_model_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Input::clear_diffusion_model() {
  if (diffusion_model_ != nullptr) diffusion_model_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Input::clear_microenv_model() {
  if (microenv_model_ != nullptr) microenv_model_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Input::clear_order_parameters() {
  if (order_parameters_ != nullptr) order_parameters_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Input::clear_tilings() {
  if (tilings_ != nullptr) tilings_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Input::clear_ffpilot_options() {
  if (ffpilot_options_ != nullptr) ffpilot_options_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Input::clear_cme_restart() {
  if (cme_restart_ != nullptr) cme_restart_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Input::clear_rdme_restart() {
  if (rdme_restart_ != nullptr) rdme_restart_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simulation_options()) {
    simulation_options_ = new ::lm::input::SimulationOptions(*from.simulation_options_);
  } else {
    simulation_options_ = nullptr;
  }
  if (from._internal_has_output_options()) {
    output_options_ = new ::lm::input::OutputOptions(*from.output_options_);
  } else {
    output_options_ = nullptr;
  }
  if (from._internal_has_reaction_model()) {
    reaction_model_ = new ::lm::input::ReactionModel(*from.reaction_model_);
  } else {
    reaction_model_ = nullptr;
  }
  if (from._internal_has_diffusion_model()) {
    diffusion_model_ = new ::lm::input::DiffusionModel(*from.diffusion_model_);
  } else {
    diffusion_model_ = nullptr;
  }
  if (from._internal_has_microenv_model()) {
    microenv_model_ = new ::lm::input::MicroenvironmentModel(*from.microenv_model_);
  } else {
    microenv_model_ = nullptr;
  }
  if (from._internal_has_order_parameters()) {
    order_parameters_ = new ::lm::types::OrderParameters(*from.order_parameters_);
  } else {
    order_parameters_ = nullptr;
  }
  if (from._internal_has_tilings()) {
    tilings_ = new ::lm::types::Tilings(*from.tilings_);
  } else {
    tilings_ = nullptr;
  }
  if (from._internal_has_ffpilot_options()) {
    ffpilot_options_ = new ::lm::input::ffpilot::FFPilotOptions(*from.ffpilot_options_);
  } else {
    ffpilot_options_ = nullptr;
  }
  if (from._internal_has_cme_restart()) {
    cme_restart_ = new ::lm::input::CMERestart(*from.cme_restart_);
  } else {
    cme_restart_ = nullptr;
  }
  if (from._internal_has_rdme_restart()) {
    rdme_restart_ = new ::lm::input::RDMERestart(*from.rdme_restart_);
  } else {
    rdme_restart_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lm.input.Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_lm_2finput_2fInput_2eproto.base);
  ::memset(&simulation_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rdme_restart_) -
      reinterpret_cast<char*>(&simulation_options_)) + sizeof(rdme_restart_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:lm.input.Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete simulation_options_;
  if (this != internal_default_instance()) delete output_options_;
  if (this != internal_default_instance()) delete reaction_model_;
  if (this != internal_default_instance()) delete diffusion_model_;
  if (this != internal_default_instance()) delete microenv_model_;
  if (this != internal_default_instance()) delete order_parameters_;
  if (this != internal_default_instance()) delete tilings_;
  if (this != internal_default_instance()) delete ffpilot_options_;
  if (this != internal_default_instance()) delete cme_restart_;
  if (this != internal_default_instance()) delete rdme_restart_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_lm_2finput_2fInput_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(simulation_options_ != nullptr);
      simulation_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_options_ != nullptr);
      output_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reaction_model_ != nullptr);
      reaction_model_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(diffusion_model_ != nullptr);
      diffusion_model_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(microenv_model_ != nullptr);
      microenv_model_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(order_parameters_ != nullptr);
      order_parameters_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tilings_ != nullptr);
      tilings_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ffpilot_options_ != nullptr);
      ffpilot_options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(cme_restart_ != nullptr);
      cme_restart_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(rdme_restart_ != nullptr);
      rdme_restart_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .lm.input.SimulationOptions simulation_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulation_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.OutputOptions output_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.ReactionModel reaction_model = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reaction_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.DiffusionModel diffusion_model = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffusion_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.MicroenvironmentModel microenv_model = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_microenv_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.OrderParameters order_parameters = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.Tilings tilings = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tilings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.ffpilot.FFPilotOptions ffpilot_options = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ffpilot_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.CMERestart cme_restart = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cme_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.RDMERestart rdme_restart = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rdme_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lm.input.SimulationOptions simulation_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simulation_options(this), target, stream);
  }

  // optional .lm.input.OutputOptions output_options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output_options(this), target, stream);
  }

  // optional .lm.input.ReactionModel reaction_model = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::reaction_model(this), target, stream);
  }

  // optional .lm.input.DiffusionModel diffusion_model = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::diffusion_model(this), target, stream);
  }

  // optional .lm.input.MicroenvironmentModel microenv_model = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::microenv_model(this), target, stream);
  }

  // optional .lm.types.OrderParameters order_parameters = 100;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::order_parameters(this), target, stream);
  }

  // optional .lm.types.Tilings tilings = 101;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::tilings(this), target, stream);
  }

  // optional .lm.input.ffpilot.FFPilotOptions ffpilot_options = 200;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::ffpilot_options(this), target, stream);
  }

  // optional .lm.input.CMERestart cme_restart = 1000;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1000, _Internal::cme_restart(this), target, stream);
  }

  // optional .lm.input.RDMERestart rdme_restart = 1001;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::rdme_restart(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .lm.input.SimulationOptions simulation_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simulation_options_);
    }

    // optional .lm.input.OutputOptions output_options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_options_);
    }

    // optional .lm.input.ReactionModel reaction_model = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reaction_model_);
    }

    // optional .lm.input.DiffusionModel diffusion_model = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diffusion_model_);
    }

    // optional .lm.input.MicroenvironmentModel microenv_model = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *microenv_model_);
    }

    // optional .lm.types.OrderParameters order_parameters = 100;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_parameters_);
    }

    // optional .lm.types.Tilings tilings = 101;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tilings_);
    }

    // optional .lm.input.ffpilot.FFPilotOptions ffpilot_options = 200;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ffpilot_options_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .lm.input.CMERestart cme_restart = 1000;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cme_restart_);
    }

    // optional .lm.input.RDMERestart rdme_restart = 1001;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rdme_restart_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_simulation_options()->::lm::input::SimulationOptions::MergeFrom(from._internal_simulation_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_output_options()->::lm::input::OutputOptions::MergeFrom(from._internal_output_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reaction_model()->::lm::input::ReactionModel::MergeFrom(from._internal_reaction_model());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_diffusion_model()->::lm::input::DiffusionModel::MergeFrom(from._internal_diffusion_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_microenv_model()->::lm::input::MicroenvironmentModel::MergeFrom(from._internal_microenv_model());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_order_parameters()->::lm::types::OrderParameters::MergeFrom(from._internal_order_parameters());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tilings()->::lm::types::Tilings::MergeFrom(from._internal_tilings());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_ffpilot_options()->::lm::input::ffpilot::FFPilotOptions::MergeFrom(from._internal_ffpilot_options());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_cme_restart()->::lm::input::CMERestart::MergeFrom(from._internal_cme_restart());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_rdme_restart()->::lm::input::RDMERestart::MergeFrom(from._internal_rdme_restart());
    }
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if (_internal_has_simulation_options()) {
    if (!simulation_options_->IsInitialized()) return false;
  }
  if (_internal_has_reaction_model()) {
    if (!reaction_model_->IsInitialized()) return false;
  }
  if (_internal_has_diffusion_model()) {
    if (!diffusion_model_->IsInitialized()) return false;
  }
  if (_internal_has_microenv_model()) {
    if (!microenv_model_->IsInitialized()) return false;
  }
  if (_internal_has_order_parameters()) {
    if (!order_parameters_->IsInitialized()) return false;
  }
  if (_internal_has_tilings()) {
    if (!tilings_->IsInitialized()) return false;
  }
  if (_internal_has_ffpilot_options()) {
    if (!ffpilot_options_->IsInitialized()) return false;
  }
  if (_internal_has_cme_restart()) {
    if (!cme_restart_->IsInitialized()) return false;
  }
  if (_internal_has_rdme_restart()) {
    if (!rdme_restart_->IsInitialized()) return false;
  }
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, rdme_restart_)
      + sizeof(Input::rdme_restart_)
      - PROTOBUF_FIELD_OFFSET(Input, simulation_options_)>(
          reinterpret_cast<char*>(&simulation_options_),
          reinterpret_cast<char*>(&other->simulation_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::input::Input* Arena::CreateMaybeMessage< ::lm::input::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::Input >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
