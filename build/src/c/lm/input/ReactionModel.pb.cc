// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/ReactionModel.proto

#include "lm/input/ReactionModel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fReactionModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmodel_2fNoiseModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NoiseModel_lm_2fmodel_2fNoiseModel_2eproto;
namespace lm {
namespace input {
class ReactionModel_ReactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReactionModel_Reaction> _instance;
} _ReactionModel_Reaction_default_instance_;
class ReactionModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReactionModel> _instance;
} _ReactionModel_default_instance_;
}  // namespace input
}  // namespace lm
static void InitDefaultsscc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_ReactionModel_default_instance_;
    new (ptr) ::lm::input::ReactionModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::ReactionModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto}, {
      &scc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto.base,
      &scc_info_NoiseModel_lm_2fmodel_2fNoiseModel_2eproto.base,}};

static void InitDefaultsscc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::input::_ReactionModel_Reaction_default_instance_;
    new (ptr) ::lm::input::ReactionModel_Reaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::input::ReactionModel_Reaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2finput_2fReactionModel_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2finput_2fReactionModel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2finput_2fReactionModel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2finput_2fReactionModel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel_Reaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel_Reaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel_Reaction, type_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel_Reaction, rate_constant_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel_Reaction, name_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, number_species_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, number_reactions_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, initial_species_count_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, species_name_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, reaction_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, stoichiometric_matrix_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, dependency_matrix_),
  PROTOBUF_FIELD_OFFSET(::lm::input::ReactionModel, noise_model_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::lm::input::ReactionModel_Reaction)},
  { 11, 24, sizeof(::lm::input::ReactionModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_ReactionModel_Reaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::input::_ReactionModel_default_instance_),
};

const char descriptor_table_protodef_lm_2finput_2fReactionModel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034lm/input/ReactionModel.proto\022\010lm.input"
  "\032\031lm/model/NoiseModel.proto\"\336\002\n\rReaction"
  "Model\022\026\n\016number_species\030\001 \002(\r\022\030\n\020number_"
  "reactions\030\002 \002(\r\022!\n\025initial_species_count"
  "\030\003 \003(\rB\002\020\001\022\024\n\014species_name\030\007 \003(\t\0222\n\010reac"
  "tion\030\004 \003(\0132 .lm.input.ReactionModel.Reac"
  "tion\022!\n\025stoichiometric_matrix\030\005 \003(\005B\002\020\001\022"
  "\035\n\021dependency_matrix\030\006 \003(\rB\002\020\001\022)\n\013noise_"
  "model\030d \001(\0132\024.lm.model.NoiseModel\032A\n\010Rea"
  "ction\022\014\n\004type\030\001 \002(\r\022\031\n\rrate_constant\030\002 \003"
  "(\001B\002\020\001\022\014\n\004name\030\006 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2finput_2fReactionModel_2eproto_deps[1] = {
  &::descriptor_table_lm_2fmodel_2fNoiseModel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2finput_2fReactionModel_2eproto_sccs[2] = {
  &scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto.base,
  &scc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2finput_2fReactionModel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fReactionModel_2eproto = {
  false, false, descriptor_table_protodef_lm_2finput_2fReactionModel_2eproto, "lm/input/ReactionModel.proto", 420,
  &descriptor_table_lm_2finput_2fReactionModel_2eproto_once, descriptor_table_lm_2finput_2fReactionModel_2eproto_sccs, descriptor_table_lm_2finput_2fReactionModel_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_lm_2finput_2fReactionModel_2eproto::offsets,
  file_level_metadata_lm_2finput_2fReactionModel_2eproto, 2, file_level_enum_descriptors_lm_2finput_2fReactionModel_2eproto, file_level_service_descriptors_lm_2finput_2fReactionModel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2finput_2fReactionModel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2finput_2fReactionModel_2eproto)), true);
namespace lm {
namespace input {

// ===================================================================

void ReactionModel_Reaction::InitAsDefaultInstance() {
}
class ReactionModel_Reaction::_Internal {
 public:
  using HasBits = decltype(std::declval<ReactionModel_Reaction>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ReactionModel_Reaction::ReactionModel_Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rate_constant_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.ReactionModel.Reaction)
}
ReactionModel_Reaction::ReactionModel_Reaction(const ReactionModel_Reaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rate_constant_(from.rate_constant_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:lm.input.ReactionModel.Reaction)
}

void ReactionModel_Reaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

ReactionModel_Reaction::~ReactionModel_Reaction() {
  // @@protoc_insertion_point(destructor:lm.input.ReactionModel.Reaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReactionModel_Reaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReactionModel_Reaction::ArenaDtor(void* object) {
  ReactionModel_Reaction* _this = reinterpret_cast< ReactionModel_Reaction* >(object);
  (void)_this;
}
void ReactionModel_Reaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReactionModel_Reaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReactionModel_Reaction& ReactionModel_Reaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReactionModel_Reaction_lm_2finput_2fReactionModel_2eproto.base);
  return *internal_default_instance();
}


void ReactionModel_Reaction::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.ReactionModel.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_constant_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReactionModel_Reaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double rate_constant = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rate_constant(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_rate_constant(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lm.input.ReactionModel.Reaction.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReactionModel_Reaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.ReactionModel.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated double rate_constant = 2 [packed = true];
  if (this->_internal_rate_constant_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_rate_constant(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lm.input.ReactionModel.Reaction.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.ReactionModel.Reaction)
  return target;
}

size_t ReactionModel_Reaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.ReactionModel.Reaction)
  size_t total_size = 0;

  // required uint32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double rate_constant = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rate_constant_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rate_constant_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string name = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReactionModel_Reaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.ReactionModel.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  const ReactionModel_Reaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReactionModel_Reaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.ReactionModel.Reaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.ReactionModel.Reaction)
    MergeFrom(*source);
  }
}

void ReactionModel_Reaction::MergeFrom(const ReactionModel_Reaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.ReactionModel.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rate_constant_.MergeFrom(from.rate_constant_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReactionModel_Reaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.ReactionModel.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReactionModel_Reaction::CopyFrom(const ReactionModel_Reaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.ReactionModel.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReactionModel_Reaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReactionModel_Reaction::InternalSwap(ReactionModel_Reaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rate_constant_.InternalSwap(&other->rate_constant_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReactionModel_Reaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReactionModel::InitAsDefaultInstance() {
  ::lm::input::_ReactionModel_default_instance_._instance.get_mutable()->noise_model_ = const_cast< ::lm::model::NoiseModel*>(
      ::lm::model::NoiseModel::internal_default_instance());
}
class ReactionModel::_Internal {
 public:
  using HasBits = decltype(std::declval<ReactionModel>()._has_bits_);
  static void set_has_number_species(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_reactions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::lm::model::NoiseModel& noise_model(const ReactionModel* msg);
  static void set_has_noise_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::lm::model::NoiseModel&
ReactionModel::_Internal::noise_model(const ReactionModel* msg) {
  return *msg->noise_model_;
}
void ReactionModel::clear_noise_model() {
  if (noise_model_ != nullptr) noise_model_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ReactionModel::ReactionModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  initial_species_count_(arena),
  reaction_(arena),
  stoichiometric_matrix_(arena),
  dependency_matrix_(arena),
  species_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.input.ReactionModel)
}
ReactionModel::ReactionModel(const ReactionModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      initial_species_count_(from.initial_species_count_),
      reaction_(from.reaction_),
      stoichiometric_matrix_(from.stoichiometric_matrix_),
      dependency_matrix_(from.dependency_matrix_),
      species_name_(from.species_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_noise_model()) {
    noise_model_ = new ::lm::model::NoiseModel(*from.noise_model_);
  } else {
    noise_model_ = nullptr;
  }
  ::memcpy(&number_species_, &from.number_species_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_reactions_) -
    reinterpret_cast<char*>(&number_species_)) + sizeof(number_reactions_));
  // @@protoc_insertion_point(copy_constructor:lm.input.ReactionModel)
}

void ReactionModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto.base);
  ::memset(&noise_model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_reactions_) -
      reinterpret_cast<char*>(&noise_model_)) + sizeof(number_reactions_));
}

ReactionModel::~ReactionModel() {
  // @@protoc_insertion_point(destructor:lm.input.ReactionModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReactionModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete noise_model_;
}

void ReactionModel::ArenaDtor(void* object) {
  ReactionModel* _this = reinterpret_cast< ReactionModel* >(object);
  (void)_this;
}
void ReactionModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReactionModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReactionModel& ReactionModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto.base);
  return *internal_default_instance();
}


void ReactionModel::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.input.ReactionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  initial_species_count_.Clear();
  reaction_.Clear();
  stoichiometric_matrix_.Clear();
  dependency_matrix_.Clear();
  species_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(noise_model_ != nullptr);
    noise_model_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&number_species_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_reactions_) -
        reinterpret_cast<char*>(&number_species_)) + sizeof(number_reactions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReactionModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 number_species = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number_species(&has_bits);
          number_species_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number_reactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_reactions(&has_bits);
          number_reactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 initial_species_count = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_initial_species_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_initial_species_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.input.ReactionModel.Reaction reaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 stoichiometric_matrix = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stoichiometric_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_stoichiometric_matrix(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dependency_matrix = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dependency_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_dependency_matrix(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string species_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_species_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lm.input.ReactionModel.species_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .lm.model.NoiseModel noise_model = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_noise_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReactionModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.input.ReactionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 number_species = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number_species(), target);
  }

  // required uint32 number_reactions = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_reactions(), target);
  }

  // repeated uint32 initial_species_count = 3 [packed = true];
  {
    int byte_size = _initial_species_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_initial_species_count(), byte_size, target);
    }
  }

  // repeated .lm.input.ReactionModel.Reaction reaction = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_reaction(i), target, stream);
  }

  // repeated int32 stoichiometric_matrix = 5 [packed = true];
  {
    int byte_size = _stoichiometric_matrix_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_stoichiometric_matrix(), byte_size, target);
    }
  }

  // repeated uint32 dependency_matrix = 6 [packed = true];
  {
    int byte_size = _dependency_matrix_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_dependency_matrix(), byte_size, target);
    }
  }

  // repeated string species_name = 7;
  for (int i = 0, n = this->_internal_species_name_size(); i < n; i++) {
    const auto& s = this->_internal_species_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lm.input.ReactionModel.species_name");
    target = stream->WriteString(7, s, target);
  }

  // optional .lm.model.NoiseModel noise_model = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::noise_model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.input.ReactionModel)
  return target;
}

size_t ReactionModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.input.ReactionModel)
  size_t total_size = 0;

  if (_internal_has_number_species()) {
    // required uint32 number_species = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_species());
  }

  if (_internal_has_number_reactions()) {
    // required uint32 number_reactions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_reactions());
  }

  return total_size;
}
size_t ReactionModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.input.ReactionModel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 number_species = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_species());

    // required uint32 number_reactions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_reactions());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 initial_species_count = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->initial_species_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _initial_species_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .lm.input.ReactionModel.Reaction reaction = 4;
  total_size += 1UL * this->_internal_reaction_size();
  for (const auto& msg : this->reaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 stoichiometric_matrix = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stoichiometric_matrix_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stoichiometric_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 dependency_matrix = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dependency_matrix_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dependency_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string species_name = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(species_name_.size());
  for (int i = 0, n = species_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      species_name_.Get(i));
  }

  // optional .lm.model.NoiseModel noise_model = 100;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *noise_model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReactionModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.input.ReactionModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ReactionModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReactionModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.input.ReactionModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.input.ReactionModel)
    MergeFrom(*source);
  }
}

void ReactionModel::MergeFrom(const ReactionModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.input.ReactionModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  initial_species_count_.MergeFrom(from.initial_species_count_);
  reaction_.MergeFrom(from.reaction_);
  stoichiometric_matrix_.MergeFrom(from.stoichiometric_matrix_);
  dependency_matrix_.MergeFrom(from.dependency_matrix_);
  species_name_.MergeFrom(from.species_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_noise_model()->::lm::model::NoiseModel::MergeFrom(from._internal_noise_model());
    }
    if (cached_has_bits & 0x00000002u) {
      number_species_ = from.number_species_;
    }
    if (cached_has_bits & 0x00000004u) {
      number_reactions_ = from.number_reactions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReactionModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.input.ReactionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReactionModel::CopyFrom(const ReactionModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.input.ReactionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReactionModel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reaction_)) return false;
  if (_internal_has_noise_model()) {
    if (!noise_model_->IsInitialized()) return false;
  }
  return true;
}

void ReactionModel::InternalSwap(ReactionModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  initial_species_count_.InternalSwap(&other->initial_species_count_);
  reaction_.InternalSwap(&other->reaction_);
  stoichiometric_matrix_.InternalSwap(&other->stoichiometric_matrix_);
  dependency_matrix_.InternalSwap(&other->dependency_matrix_);
  species_name_.InternalSwap(&other->species_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReactionModel, number_reactions_)
      + sizeof(ReactionModel::number_reactions_)
      - PROTOBUF_FIELD_OFFSET(ReactionModel, noise_model_)>(
          reinterpret_cast<char*>(&noise_model_),
          reinterpret_cast<char*>(&other->noise_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReactionModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::input::ReactionModel_Reaction* Arena::CreateMaybeMessage< ::lm::input::ReactionModel_Reaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::ReactionModel_Reaction >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::input::ReactionModel* Arena::CreateMaybeMessage< ::lm::input::ReactionModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::input::ReactionModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
