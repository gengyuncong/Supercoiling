// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/input/OutputOptions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fOutputOptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fOutputOptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fOutputOptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2finput_2fOutputOptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2finput_2fOutputOptions_2eproto;
namespace lm {
namespace input {
class OutputOptions;
class OutputOptionsDefaultTypeInternal;
extern OutputOptionsDefaultTypeInternal _OutputOptions_default_instance_;
}  // namespace input
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::input::OutputOptions* Arena::CreateMaybeMessage<::lm::input::OutputOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace input {

// ===================================================================

class OutputOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.input.OutputOptions) */ {
 public:
  inline OutputOptions() : OutputOptions(nullptr) {}
  virtual ~OutputOptions();

  OutputOptions(const OutputOptions& from);
  OutputOptions(OutputOptions&& from) noexcept
    : OutputOptions() {
    *this = ::std::move(from);
  }

  inline OutputOptions& operator=(const OutputOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputOptions& operator=(OutputOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputOptions* internal_default_instance() {
    return reinterpret_cast<const OutputOptions*>(
               &_OutputOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OutputOptions& a, OutputOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputOptions* New() const final {
    return CreateMaybeMessage<OutputOptions>(nullptr);
  }

  OutputOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputOptions& from);
  void MergeFrom(const OutputOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.input.OutputOptions";
  }
  protected:
  explicit OutputOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2finput_2fOutputOptions_2eproto);
    return ::descriptor_table_lm_2finput_2fOutputOptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFptSpeciesToTrackFieldNumber = 32,
    kFptOrderParameterToTrackFieldNumber = 33,
    kTilingToHistogramFieldNumber = 62,
    kRecordNamePrefixFieldNumber = 1,
    kWriteInitialTrajectoryStateFieldNumber = 11,
    kWriteFinalTrajectoryStateFieldNumber = 12,
    kSpeciesWriteIntervalFieldNumber = 21,
    kLatticeWriteIntervalFieldNumber = 22,
    kConcentrationsWriteIntervalFieldNumber = 23,
    kDegreeAdvancementWriteIntervalFieldNumber = 24,
    kOrderParameterWriteIntervalFieldNumber = 25,
    kStochasticProcessWriteIntervalFieldNumber = 26,
    kHistogramBeginTimeFieldNumber = 60,
    kHistogramEndTimeFieldNumber = 61,
  };
  // repeated uint32 fpt_species_to_track = 32;
  int fpt_species_to_track_size() const;
  private:
  int _internal_fpt_species_to_track_size() const;
  public:
  void clear_fpt_species_to_track();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fpt_species_to_track(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fpt_species_to_track() const;
  void _internal_add_fpt_species_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fpt_species_to_track();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fpt_species_to_track(int index) const;
  void set_fpt_species_to_track(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fpt_species_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fpt_species_to_track() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fpt_species_to_track();

  // repeated uint32 fpt_order_parameter_to_track = 33;
  int fpt_order_parameter_to_track_size() const;
  private:
  int _internal_fpt_order_parameter_to_track_size() const;
  public:
  void clear_fpt_order_parameter_to_track();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fpt_order_parameter_to_track(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fpt_order_parameter_to_track() const;
  void _internal_add_fpt_order_parameter_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fpt_order_parameter_to_track();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fpt_order_parameter_to_track(int index) const;
  void set_fpt_order_parameter_to_track(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fpt_order_parameter_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fpt_order_parameter_to_track() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fpt_order_parameter_to_track();

  // repeated uint32 tiling_to_histogram = 62;
  int tiling_to_histogram_size() const;
  private:
  int _internal_tiling_to_histogram_size() const;
  public:
  void clear_tiling_to_histogram();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tiling_to_histogram(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tiling_to_histogram() const;
  void _internal_add_tiling_to_histogram(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tiling_to_histogram();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tiling_to_histogram(int index) const;
  void set_tiling_to_histogram(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tiling_to_histogram(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tiling_to_histogram() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tiling_to_histogram();

  // optional string record_name_prefix = 1;
  bool has_record_name_prefix() const;
  private:
  bool _internal_has_record_name_prefix() const;
  public:
  void clear_record_name_prefix();
  const std::string& record_name_prefix() const;
  void set_record_name_prefix(const std::string& value);
  void set_record_name_prefix(std::string&& value);
  void set_record_name_prefix(const char* value);
  void set_record_name_prefix(const char* value, size_t size);
  std::string* mutable_record_name_prefix();
  std::string* release_record_name_prefix();
  void set_allocated_record_name_prefix(std::string* record_name_prefix);
  private:
  const std::string& _internal_record_name_prefix() const;
  void _internal_set_record_name_prefix(const std::string& value);
  std::string* _internal_mutable_record_name_prefix();
  public:

  // optional bool write_initial_trajectory_state = 11 [default = false];
  bool has_write_initial_trajectory_state() const;
  private:
  bool _internal_has_write_initial_trajectory_state() const;
  public:
  void clear_write_initial_trajectory_state();
  bool write_initial_trajectory_state() const;
  void set_write_initial_trajectory_state(bool value);
  private:
  bool _internal_write_initial_trajectory_state() const;
  void _internal_set_write_initial_trajectory_state(bool value);
  public:

  // optional bool write_final_trajectory_state = 12 [default = false];
  bool has_write_final_trajectory_state() const;
  private:
  bool _internal_has_write_final_trajectory_state() const;
  public:
  void clear_write_final_trajectory_state();
  bool write_final_trajectory_state() const;
  void set_write_final_trajectory_state(bool value);
  private:
  bool _internal_write_final_trajectory_state() const;
  void _internal_set_write_final_trajectory_state(bool value);
  public:

  // optional double species_write_interval = 21;
  bool has_species_write_interval() const;
  private:
  bool _internal_has_species_write_interval() const;
  public:
  void clear_species_write_interval();
  double species_write_interval() const;
  void set_species_write_interval(double value);
  private:
  double _internal_species_write_interval() const;
  void _internal_set_species_write_interval(double value);
  public:

  // optional double lattice_write_interval = 22;
  bool has_lattice_write_interval() const;
  private:
  bool _internal_has_lattice_write_interval() const;
  public:
  void clear_lattice_write_interval();
  double lattice_write_interval() const;
  void set_lattice_write_interval(double value);
  private:
  double _internal_lattice_write_interval() const;
  void _internal_set_lattice_write_interval(double value);
  public:

  // optional double concentrations_write_interval = 23;
  bool has_concentrations_write_interval() const;
  private:
  bool _internal_has_concentrations_write_interval() const;
  public:
  void clear_concentrations_write_interval();
  double concentrations_write_interval() const;
  void set_concentrations_write_interval(double value);
  private:
  double _internal_concentrations_write_interval() const;
  void _internal_set_concentrations_write_interval(double value);
  public:

  // optional double degree_advancement_write_interval = 24;
  bool has_degree_advancement_write_interval() const;
  private:
  bool _internal_has_degree_advancement_write_interval() const;
  public:
  void clear_degree_advancement_write_interval();
  double degree_advancement_write_interval() const;
  void set_degree_advancement_write_interval(double value);
  private:
  double _internal_degree_advancement_write_interval() const;
  void _internal_set_degree_advancement_write_interval(double value);
  public:

  // optional double order_parameter_write_interval = 25;
  bool has_order_parameter_write_interval() const;
  private:
  bool _internal_has_order_parameter_write_interval() const;
  public:
  void clear_order_parameter_write_interval();
  double order_parameter_write_interval() const;
  void set_order_parameter_write_interval(double value);
  private:
  double _internal_order_parameter_write_interval() const;
  void _internal_set_order_parameter_write_interval(double value);
  public:

  // optional double stochastic_process_write_interval = 26;
  bool has_stochastic_process_write_interval() const;
  private:
  bool _internal_has_stochastic_process_write_interval() const;
  public:
  void clear_stochastic_process_write_interval();
  double stochastic_process_write_interval() const;
  void set_stochastic_process_write_interval(double value);
  private:
  double _internal_stochastic_process_write_interval() const;
  void _internal_set_stochastic_process_write_interval(double value);
  public:

  // optional double histogram_begin_time = 60;
  bool has_histogram_begin_time() const;
  private:
  bool _internal_has_histogram_begin_time() const;
  public:
  void clear_histogram_begin_time();
  double histogram_begin_time() const;
  void set_histogram_begin_time(double value);
  private:
  double _internal_histogram_begin_time() const;
  void _internal_set_histogram_begin_time(double value);
  public:

  // optional double histogram_end_time = 61;
  bool has_histogram_end_time() const;
  private:
  bool _internal_has_histogram_end_time() const;
  public:
  void clear_histogram_end_time();
  double histogram_end_time() const;
  void set_histogram_end_time(double value);
  private:
  double _internal_histogram_end_time() const;
  void _internal_set_histogram_end_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:lm.input.OutputOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fpt_species_to_track_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fpt_order_parameter_to_track_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tiling_to_histogram_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_prefix_;
  bool write_initial_trajectory_state_;
  bool write_final_trajectory_state_;
  double species_write_interval_;
  double lattice_write_interval_;
  double concentrations_write_interval_;
  double degree_advancement_write_interval_;
  double order_parameter_write_interval_;
  double stochastic_process_write_interval_;
  double histogram_begin_time_;
  double histogram_end_time_;
  friend struct ::TableStruct_lm_2finput_2fOutputOptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OutputOptions

// optional string record_name_prefix = 1;
inline bool OutputOptions::_internal_has_record_name_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutputOptions::has_record_name_prefix() const {
  return _internal_has_record_name_prefix();
}
inline void OutputOptions::clear_record_name_prefix() {
  record_name_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutputOptions::record_name_prefix() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.record_name_prefix)
  return _internal_record_name_prefix();
}
inline void OutputOptions::set_record_name_prefix(const std::string& value) {
  _internal_set_record_name_prefix(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.record_name_prefix)
}
inline std::string* OutputOptions::mutable_record_name_prefix() {
  // @@protoc_insertion_point(field_mutable:lm.input.OutputOptions.record_name_prefix)
  return _internal_mutable_record_name_prefix();
}
inline const std::string& OutputOptions::_internal_record_name_prefix() const {
  return record_name_prefix_.Get();
}
inline void OutputOptions::_internal_set_record_name_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  record_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputOptions::set_record_name_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  record_name_prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lm.input.OutputOptions.record_name_prefix)
}
inline void OutputOptions::set_record_name_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  record_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lm.input.OutputOptions.record_name_prefix)
}
inline void OutputOptions::set_record_name_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  record_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lm.input.OutputOptions.record_name_prefix)
}
inline std::string* OutputOptions::_internal_mutable_record_name_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return record_name_prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputOptions::release_record_name_prefix() {
  // @@protoc_insertion_point(field_release:lm.input.OutputOptions.record_name_prefix)
  if (!_internal_has_record_name_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return record_name_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputOptions::set_allocated_record_name_prefix(std::string* record_name_prefix) {
  if (record_name_prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  record_name_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lm.input.OutputOptions.record_name_prefix)
}

// optional bool write_initial_trajectory_state = 11 [default = false];
inline bool OutputOptions::_internal_has_write_initial_trajectory_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OutputOptions::has_write_initial_trajectory_state() const {
  return _internal_has_write_initial_trajectory_state();
}
inline void OutputOptions::clear_write_initial_trajectory_state() {
  write_initial_trajectory_state_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OutputOptions::_internal_write_initial_trajectory_state() const {
  return write_initial_trajectory_state_;
}
inline bool OutputOptions::write_initial_trajectory_state() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.write_initial_trajectory_state)
  return _internal_write_initial_trajectory_state();
}
inline void OutputOptions::_internal_set_write_initial_trajectory_state(bool value) {
  _has_bits_[0] |= 0x00000002u;
  write_initial_trajectory_state_ = value;
}
inline void OutputOptions::set_write_initial_trajectory_state(bool value) {
  _internal_set_write_initial_trajectory_state(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.write_initial_trajectory_state)
}

// optional bool write_final_trajectory_state = 12 [default = false];
inline bool OutputOptions::_internal_has_write_final_trajectory_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OutputOptions::has_write_final_trajectory_state() const {
  return _internal_has_write_final_trajectory_state();
}
inline void OutputOptions::clear_write_final_trajectory_state() {
  write_final_trajectory_state_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool OutputOptions::_internal_write_final_trajectory_state() const {
  return write_final_trajectory_state_;
}
inline bool OutputOptions::write_final_trajectory_state() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.write_final_trajectory_state)
  return _internal_write_final_trajectory_state();
}
inline void OutputOptions::_internal_set_write_final_trajectory_state(bool value) {
  _has_bits_[0] |= 0x00000004u;
  write_final_trajectory_state_ = value;
}
inline void OutputOptions::set_write_final_trajectory_state(bool value) {
  _internal_set_write_final_trajectory_state(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.write_final_trajectory_state)
}

// optional double species_write_interval = 21;
inline bool OutputOptions::_internal_has_species_write_interval() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OutputOptions::has_species_write_interval() const {
  return _internal_has_species_write_interval();
}
inline void OutputOptions::clear_species_write_interval() {
  species_write_interval_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double OutputOptions::_internal_species_write_interval() const {
  return species_write_interval_;
}
inline double OutputOptions::species_write_interval() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.species_write_interval)
  return _internal_species_write_interval();
}
inline void OutputOptions::_internal_set_species_write_interval(double value) {
  _has_bits_[0] |= 0x00000008u;
  species_write_interval_ = value;
}
inline void OutputOptions::set_species_write_interval(double value) {
  _internal_set_species_write_interval(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.species_write_interval)
}

// optional double lattice_write_interval = 22;
inline bool OutputOptions::_internal_has_lattice_write_interval() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OutputOptions::has_lattice_write_interval() const {
  return _internal_has_lattice_write_interval();
}
inline void OutputOptions::clear_lattice_write_interval() {
  lattice_write_interval_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double OutputOptions::_internal_lattice_write_interval() const {
  return lattice_write_interval_;
}
inline double OutputOptions::lattice_write_interval() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.lattice_write_interval)
  return _internal_lattice_write_interval();
}
inline void OutputOptions::_internal_set_lattice_write_interval(double value) {
  _has_bits_[0] |= 0x00000010u;
  lattice_write_interval_ = value;
}
inline void OutputOptions::set_lattice_write_interval(double value) {
  _internal_set_lattice_write_interval(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.lattice_write_interval)
}

// optional double concentrations_write_interval = 23;
inline bool OutputOptions::_internal_has_concentrations_write_interval() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OutputOptions::has_concentrations_write_interval() const {
  return _internal_has_concentrations_write_interval();
}
inline void OutputOptions::clear_concentrations_write_interval() {
  concentrations_write_interval_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double OutputOptions::_internal_concentrations_write_interval() const {
  return concentrations_write_interval_;
}
inline double OutputOptions::concentrations_write_interval() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.concentrations_write_interval)
  return _internal_concentrations_write_interval();
}
inline void OutputOptions::_internal_set_concentrations_write_interval(double value) {
  _has_bits_[0] |= 0x00000020u;
  concentrations_write_interval_ = value;
}
inline void OutputOptions::set_concentrations_write_interval(double value) {
  _internal_set_concentrations_write_interval(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.concentrations_write_interval)
}

// optional double degree_advancement_write_interval = 24;
inline bool OutputOptions::_internal_has_degree_advancement_write_interval() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OutputOptions::has_degree_advancement_write_interval() const {
  return _internal_has_degree_advancement_write_interval();
}
inline void OutputOptions::clear_degree_advancement_write_interval() {
  degree_advancement_write_interval_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double OutputOptions::_internal_degree_advancement_write_interval() const {
  return degree_advancement_write_interval_;
}
inline double OutputOptions::degree_advancement_write_interval() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.degree_advancement_write_interval)
  return _internal_degree_advancement_write_interval();
}
inline void OutputOptions::_internal_set_degree_advancement_write_interval(double value) {
  _has_bits_[0] |= 0x00000040u;
  degree_advancement_write_interval_ = value;
}
inline void OutputOptions::set_degree_advancement_write_interval(double value) {
  _internal_set_degree_advancement_write_interval(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.degree_advancement_write_interval)
}

// optional double order_parameter_write_interval = 25;
inline bool OutputOptions::_internal_has_order_parameter_write_interval() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OutputOptions::has_order_parameter_write_interval() const {
  return _internal_has_order_parameter_write_interval();
}
inline void OutputOptions::clear_order_parameter_write_interval() {
  order_parameter_write_interval_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double OutputOptions::_internal_order_parameter_write_interval() const {
  return order_parameter_write_interval_;
}
inline double OutputOptions::order_parameter_write_interval() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.order_parameter_write_interval)
  return _internal_order_parameter_write_interval();
}
inline void OutputOptions::_internal_set_order_parameter_write_interval(double value) {
  _has_bits_[0] |= 0x00000080u;
  order_parameter_write_interval_ = value;
}
inline void OutputOptions::set_order_parameter_write_interval(double value) {
  _internal_set_order_parameter_write_interval(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.order_parameter_write_interval)
}

// optional double stochastic_process_write_interval = 26;
inline bool OutputOptions::_internal_has_stochastic_process_write_interval() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OutputOptions::has_stochastic_process_write_interval() const {
  return _internal_has_stochastic_process_write_interval();
}
inline void OutputOptions::clear_stochastic_process_write_interval() {
  stochastic_process_write_interval_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double OutputOptions::_internal_stochastic_process_write_interval() const {
  return stochastic_process_write_interval_;
}
inline double OutputOptions::stochastic_process_write_interval() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.stochastic_process_write_interval)
  return _internal_stochastic_process_write_interval();
}
inline void OutputOptions::_internal_set_stochastic_process_write_interval(double value) {
  _has_bits_[0] |= 0x00000100u;
  stochastic_process_write_interval_ = value;
}
inline void OutputOptions::set_stochastic_process_write_interval(double value) {
  _internal_set_stochastic_process_write_interval(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.stochastic_process_write_interval)
}

// repeated uint32 fpt_species_to_track = 32;
inline int OutputOptions::_internal_fpt_species_to_track_size() const {
  return fpt_species_to_track_.size();
}
inline int OutputOptions::fpt_species_to_track_size() const {
  return _internal_fpt_species_to_track_size();
}
inline void OutputOptions::clear_fpt_species_to_track() {
  fpt_species_to_track_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputOptions::_internal_fpt_species_to_track(int index) const {
  return fpt_species_to_track_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputOptions::fpt_species_to_track(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.fpt_species_to_track)
  return _internal_fpt_species_to_track(index);
}
inline void OutputOptions::set_fpt_species_to_track(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fpt_species_to_track_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.fpt_species_to_track)
}
inline void OutputOptions::_internal_add_fpt_species_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fpt_species_to_track_.Add(value);
}
inline void OutputOptions::add_fpt_species_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fpt_species_to_track(value);
  // @@protoc_insertion_point(field_add:lm.input.OutputOptions.fpt_species_to_track)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputOptions::_internal_fpt_species_to_track() const {
  return fpt_species_to_track_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputOptions::fpt_species_to_track() const {
  // @@protoc_insertion_point(field_list:lm.input.OutputOptions.fpt_species_to_track)
  return _internal_fpt_species_to_track();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputOptions::_internal_mutable_fpt_species_to_track() {
  return &fpt_species_to_track_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputOptions::mutable_fpt_species_to_track() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.OutputOptions.fpt_species_to_track)
  return _internal_mutable_fpt_species_to_track();
}

// repeated uint32 fpt_order_parameter_to_track = 33;
inline int OutputOptions::_internal_fpt_order_parameter_to_track_size() const {
  return fpt_order_parameter_to_track_.size();
}
inline int OutputOptions::fpt_order_parameter_to_track_size() const {
  return _internal_fpt_order_parameter_to_track_size();
}
inline void OutputOptions::clear_fpt_order_parameter_to_track() {
  fpt_order_parameter_to_track_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputOptions::_internal_fpt_order_parameter_to_track(int index) const {
  return fpt_order_parameter_to_track_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputOptions::fpt_order_parameter_to_track(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.fpt_order_parameter_to_track)
  return _internal_fpt_order_parameter_to_track(index);
}
inline void OutputOptions::set_fpt_order_parameter_to_track(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fpt_order_parameter_to_track_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.fpt_order_parameter_to_track)
}
inline void OutputOptions::_internal_add_fpt_order_parameter_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fpt_order_parameter_to_track_.Add(value);
}
inline void OutputOptions::add_fpt_order_parameter_to_track(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fpt_order_parameter_to_track(value);
  // @@protoc_insertion_point(field_add:lm.input.OutputOptions.fpt_order_parameter_to_track)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputOptions::_internal_fpt_order_parameter_to_track() const {
  return fpt_order_parameter_to_track_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputOptions::fpt_order_parameter_to_track() const {
  // @@protoc_insertion_point(field_list:lm.input.OutputOptions.fpt_order_parameter_to_track)
  return _internal_fpt_order_parameter_to_track();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputOptions::_internal_mutable_fpt_order_parameter_to_track() {
  return &fpt_order_parameter_to_track_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputOptions::mutable_fpt_order_parameter_to_track() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.OutputOptions.fpt_order_parameter_to_track)
  return _internal_mutable_fpt_order_parameter_to_track();
}

// optional double histogram_begin_time = 60;
inline bool OutputOptions::_internal_has_histogram_begin_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OutputOptions::has_histogram_begin_time() const {
  return _internal_has_histogram_begin_time();
}
inline void OutputOptions::clear_histogram_begin_time() {
  histogram_begin_time_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double OutputOptions::_internal_histogram_begin_time() const {
  return histogram_begin_time_;
}
inline double OutputOptions::histogram_begin_time() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.histogram_begin_time)
  return _internal_histogram_begin_time();
}
inline void OutputOptions::_internal_set_histogram_begin_time(double value) {
  _has_bits_[0] |= 0x00000200u;
  histogram_begin_time_ = value;
}
inline void OutputOptions::set_histogram_begin_time(double value) {
  _internal_set_histogram_begin_time(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.histogram_begin_time)
}

// optional double histogram_end_time = 61;
inline bool OutputOptions::_internal_has_histogram_end_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OutputOptions::has_histogram_end_time() const {
  return _internal_has_histogram_end_time();
}
inline void OutputOptions::clear_histogram_end_time() {
  histogram_end_time_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double OutputOptions::_internal_histogram_end_time() const {
  return histogram_end_time_;
}
inline double OutputOptions::histogram_end_time() const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.histogram_end_time)
  return _internal_histogram_end_time();
}
inline void OutputOptions::_internal_set_histogram_end_time(double value) {
  _has_bits_[0] |= 0x00000400u;
  histogram_end_time_ = value;
}
inline void OutputOptions::set_histogram_end_time(double value) {
  _internal_set_histogram_end_time(value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.histogram_end_time)
}

// repeated uint32 tiling_to_histogram = 62;
inline int OutputOptions::_internal_tiling_to_histogram_size() const {
  return tiling_to_histogram_.size();
}
inline int OutputOptions::tiling_to_histogram_size() const {
  return _internal_tiling_to_histogram_size();
}
inline void OutputOptions::clear_tiling_to_histogram() {
  tiling_to_histogram_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputOptions::_internal_tiling_to_histogram(int index) const {
  return tiling_to_histogram_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputOptions::tiling_to_histogram(int index) const {
  // @@protoc_insertion_point(field_get:lm.input.OutputOptions.tiling_to_histogram)
  return _internal_tiling_to_histogram(index);
}
inline void OutputOptions::set_tiling_to_histogram(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tiling_to_histogram_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.input.OutputOptions.tiling_to_histogram)
}
inline void OutputOptions::_internal_add_tiling_to_histogram(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tiling_to_histogram_.Add(value);
}
inline void OutputOptions::add_tiling_to_histogram(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tiling_to_histogram(value);
  // @@protoc_insertion_point(field_add:lm.input.OutputOptions.tiling_to_histogram)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputOptions::_internal_tiling_to_histogram() const {
  return tiling_to_histogram_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputOptions::tiling_to_histogram() const {
  // @@protoc_insertion_point(field_list:lm.input.OutputOptions.tiling_to_histogram)
  return _internal_tiling_to_histogram();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputOptions::_internal_mutable_tiling_to_histogram() {
  return &tiling_to_histogram_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputOptions::mutable_tiling_to_histogram() {
  // @@protoc_insertion_point(field_mutable_list:lm.input.OutputOptions.tiling_to_histogram)
  return _internal_mutable_tiling_to_histogram();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace input
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2finput_2fOutputOptions_2eproto
