// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/ResourcesAvailable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fResourcesAvailable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fResourcesAvailable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/message/Endpoint.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fResourcesAvailable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fmessage_2fResourcesAvailable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto;
namespace lm {
namespace message {
class ResourcesAvailable;
class ResourcesAvailableDefaultTypeInternal;
extern ResourcesAvailableDefaultTypeInternal _ResourcesAvailable_default_instance_;
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::message::ResourcesAvailable* Arena::CreateMaybeMessage<::lm::message::ResourcesAvailable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace message {

// ===================================================================

class ResourcesAvailable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.message.ResourcesAvailable) */ {
 public:
  inline ResourcesAvailable() : ResourcesAvailable(nullptr) {}
  virtual ~ResourcesAvailable();

  ResourcesAvailable(const ResourcesAvailable& from);
  ResourcesAvailable(ResourcesAvailable&& from) noexcept
    : ResourcesAvailable() {
    *this = ::std::move(from);
  }

  inline ResourcesAvailable& operator=(const ResourcesAvailable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcesAvailable& operator=(ResourcesAvailable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourcesAvailable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourcesAvailable* internal_default_instance() {
    return reinterpret_cast<const ResourcesAvailable*>(
               &_ResourcesAvailable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResourcesAvailable& a, ResourcesAvailable& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcesAvailable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcesAvailable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourcesAvailable* New() const final {
    return CreateMaybeMessage<ResourcesAvailable>(nullptr);
  }

  ResourcesAvailable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourcesAvailable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourcesAvailable& from);
  void MergeFrom(const ResourcesAvailable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcesAvailable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.message.ResourcesAvailable";
  }
  protected:
  explicit ResourcesAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto);
    return ::descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuCoresFieldNumber = 3,
    kGpuDevicesFieldNumber = 4,
    kHostnameFieldNumber = 1,
    kControllerAddressFieldNumber = 2,
  };
  // repeated int32 cpu_cores = 3;
  int cpu_cores_size() const;
  private:
  int _internal_cpu_cores_size() const;
  public:
  void clear_cpu_cores();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_cores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cpu_cores() const;
  void _internal_add_cpu_cores(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cpu_cores();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_cores(int index) const;
  void set_cpu_cores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cpu_cores(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cpu_cores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cpu_cores();

  // repeated int32 gpu_devices = 4;
  int gpu_devices_size() const;
  private:
  int _internal_gpu_devices_size() const;
  public:
  void clear_gpu_devices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu_devices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gpu_devices() const;
  void _internal_add_gpu_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gpu_devices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_devices(int index) const;
  void set_gpu_devices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gpu_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gpu_devices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gpu_devices();

  // required string hostname = 1;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // required .lm.message.Endpoint controller_address = 2;
  bool has_controller_address() const;
  private:
  bool _internal_has_controller_address() const;
  public:
  void clear_controller_address();
  const ::lm::message::Endpoint& controller_address() const;
  ::lm::message::Endpoint* release_controller_address();
  ::lm::message::Endpoint* mutable_controller_address();
  void set_allocated_controller_address(::lm::message::Endpoint* controller_address);
  private:
  const ::lm::message::Endpoint& _internal_controller_address() const;
  ::lm::message::Endpoint* _internal_mutable_controller_address();
  public:
  void unsafe_arena_set_allocated_controller_address(
      ::lm::message::Endpoint* controller_address);
  ::lm::message::Endpoint* unsafe_arena_release_controller_address();

  // @@protoc_insertion_point(class_scope:lm.message.ResourcesAvailable)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cpu_cores_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gpu_devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::lm::message::Endpoint* controller_address_;
  friend struct ::TableStruct_lm_2fmessage_2fResourcesAvailable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResourcesAvailable

// required string hostname = 1;
inline bool ResourcesAvailable::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourcesAvailable::has_hostname() const {
  return _internal_has_hostname();
}
inline void ResourcesAvailable::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourcesAvailable::hostname() const {
  // @@protoc_insertion_point(field_get:lm.message.ResourcesAvailable.hostname)
  return _internal_hostname();
}
inline void ResourcesAvailable::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:lm.message.ResourcesAvailable.hostname)
}
inline std::string* ResourcesAvailable::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:lm.message.ResourcesAvailable.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ResourcesAvailable::_internal_hostname() const {
  return hostname_.Get();
}
inline void ResourcesAvailable::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourcesAvailable::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lm.message.ResourcesAvailable.hostname)
}
inline void ResourcesAvailable::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lm.message.ResourcesAvailable.hostname)
}
inline void ResourcesAvailable::set_hostname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lm.message.ResourcesAvailable.hostname)
}
inline std::string* ResourcesAvailable::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourcesAvailable::release_hostname() {
  // @@protoc_insertion_point(field_release:lm.message.ResourcesAvailable.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourcesAvailable::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lm.message.ResourcesAvailable.hostname)
}

// required .lm.message.Endpoint controller_address = 2;
inline bool ResourcesAvailable::_internal_has_controller_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || controller_address_ != nullptr);
  return value;
}
inline bool ResourcesAvailable::has_controller_address() const {
  return _internal_has_controller_address();
}
inline const ::lm::message::Endpoint& ResourcesAvailable::_internal_controller_address() const {
  const ::lm::message::Endpoint* p = controller_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::Endpoint*>(
      &::lm::message::_Endpoint_default_instance_);
}
inline const ::lm::message::Endpoint& ResourcesAvailable::controller_address() const {
  // @@protoc_insertion_point(field_get:lm.message.ResourcesAvailable.controller_address)
  return _internal_controller_address();
}
inline void ResourcesAvailable::unsafe_arena_set_allocated_controller_address(
    ::lm::message::Endpoint* controller_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_address_);
  }
  controller_address_ = controller_address;
  if (controller_address) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.ResourcesAvailable.controller_address)
}
inline ::lm::message::Endpoint* ResourcesAvailable::release_controller_address() {
  _has_bits_[0] &= ~0x00000002u;
  ::lm::message::Endpoint* temp = controller_address_;
  controller_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::Endpoint* ResourcesAvailable::unsafe_arena_release_controller_address() {
  // @@protoc_insertion_point(field_release:lm.message.ResourcesAvailable.controller_address)
  _has_bits_[0] &= ~0x00000002u;
  ::lm::message::Endpoint* temp = controller_address_;
  controller_address_ = nullptr;
  return temp;
}
inline ::lm::message::Endpoint* ResourcesAvailable::_internal_mutable_controller_address() {
  _has_bits_[0] |= 0x00000002u;
  if (controller_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::Endpoint>(GetArena());
    controller_address_ = p;
  }
  return controller_address_;
}
inline ::lm::message::Endpoint* ResourcesAvailable::mutable_controller_address() {
  // @@protoc_insertion_point(field_mutable:lm.message.ResourcesAvailable.controller_address)
  return _internal_mutable_controller_address();
}
inline void ResourcesAvailable::set_allocated_controller_address(::lm::message::Endpoint* controller_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_address_);
  }
  if (controller_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_address)->GetArena();
    if (message_arena != submessage_arena) {
      controller_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_address_ = controller_address;
  // @@protoc_insertion_point(field_set_allocated:lm.message.ResourcesAvailable.controller_address)
}

// repeated int32 cpu_cores = 3;
inline int ResourcesAvailable::_internal_cpu_cores_size() const {
  return cpu_cores_.size();
}
inline int ResourcesAvailable::cpu_cores_size() const {
  return _internal_cpu_cores_size();
}
inline void ResourcesAvailable::clear_cpu_cores() {
  cpu_cores_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourcesAvailable::_internal_cpu_cores(int index) const {
  return cpu_cores_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourcesAvailable::cpu_cores(int index) const {
  // @@protoc_insertion_point(field_get:lm.message.ResourcesAvailable.cpu_cores)
  return _internal_cpu_cores(index);
}
inline void ResourcesAvailable::set_cpu_cores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpu_cores_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.message.ResourcesAvailable.cpu_cores)
}
inline void ResourcesAvailable::_internal_add_cpu_cores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpu_cores_.Add(value);
}
inline void ResourcesAvailable::add_cpu_cores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cpu_cores(value);
  // @@protoc_insertion_point(field_add:lm.message.ResourcesAvailable.cpu_cores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResourcesAvailable::_internal_cpu_cores() const {
  return cpu_cores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResourcesAvailable::cpu_cores() const {
  // @@protoc_insertion_point(field_list:lm.message.ResourcesAvailable.cpu_cores)
  return _internal_cpu_cores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResourcesAvailable::_internal_mutable_cpu_cores() {
  return &cpu_cores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResourcesAvailable::mutable_cpu_cores() {
  // @@protoc_insertion_point(field_mutable_list:lm.message.ResourcesAvailable.cpu_cores)
  return _internal_mutable_cpu_cores();
}

// repeated int32 gpu_devices = 4;
inline int ResourcesAvailable::_internal_gpu_devices_size() const {
  return gpu_devices_.size();
}
inline int ResourcesAvailable::gpu_devices_size() const {
  return _internal_gpu_devices_size();
}
inline void ResourcesAvailable::clear_gpu_devices() {
  gpu_devices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourcesAvailable::_internal_gpu_devices(int index) const {
  return gpu_devices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourcesAvailable::gpu_devices(int index) const {
  // @@protoc_insertion_point(field_get:lm.message.ResourcesAvailable.gpu_devices)
  return _internal_gpu_devices(index);
}
inline void ResourcesAvailable::set_gpu_devices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gpu_devices_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.message.ResourcesAvailable.gpu_devices)
}
inline void ResourcesAvailable::_internal_add_gpu_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gpu_devices_.Add(value);
}
inline void ResourcesAvailable::add_gpu_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gpu_devices(value);
  // @@protoc_insertion_point(field_add:lm.message.ResourcesAvailable.gpu_devices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResourcesAvailable::_internal_gpu_devices() const {
  return gpu_devices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResourcesAvailable::gpu_devices() const {
  // @@protoc_insertion_point(field_list:lm.message.ResourcesAvailable.gpu_devices)
  return _internal_gpu_devices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResourcesAvailable::_internal_mutable_gpu_devices() {
  return &gpu_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResourcesAvailable::mutable_gpu_devices() {
  // @@protoc_insertion_point(field_mutable_list:lm.message.ResourcesAvailable.gpu_devices)
  return _internal_mutable_gpu_devices();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fResourcesAvailable_2eproto
