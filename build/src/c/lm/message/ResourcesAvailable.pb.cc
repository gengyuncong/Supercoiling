// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/ResourcesAvailable.proto

#include "lm/message/ResourcesAvailable.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fEndpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Endpoint_lm_2fmessage_2fEndpoint_2eproto;
namespace lm {
namespace message {
class ResourcesAvailableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourcesAvailable> _instance;
} _ResourcesAvailable_default_instance_;
}  // namespace message
}  // namespace lm
static void InitDefaultsscc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::message::_ResourcesAvailable_default_instance_;
    new (ptr) ::lm::message::ResourcesAvailable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::message::ResourcesAvailable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto}, {
      &scc_info_Endpoint_lm_2fmessage_2fEndpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fmessage_2fResourcesAvailable_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fmessage_2fResourcesAvailable_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fmessage_2fResourcesAvailable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fmessage_2fResourcesAvailable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::message::ResourcesAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::message::ResourcesAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::message::ResourcesAvailable, hostname_),
  PROTOBUF_FIELD_OFFSET(::lm::message::ResourcesAvailable, controller_address_),
  PROTOBUF_FIELD_OFFSET(::lm::message::ResourcesAvailable, cpu_cores_),
  PROTOBUF_FIELD_OFFSET(::lm::message::ResourcesAvailable, gpu_devices_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::lm::message::ResourcesAvailable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::message::_ResourcesAvailable_default_instance_),
};

const char descriptor_table_protodef_lm_2fmessage_2fResourcesAvailable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#lm/message/ResourcesAvailable.proto\022\nl"
  "m.message\032\031lm/message/Endpoint.proto\"\200\001\n"
  "\022ResourcesAvailable\022\020\n\010hostname\030\001 \002(\t\0220\n"
  "\022controller_address\030\002 \002(\0132\024.lm.message.E"
  "ndpoint\022\021\n\tcpu_cores\030\003 \003(\005\022\023\n\013gpu_device"
  "s\030\004 \003(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto_deps[1] = {
  &::descriptor_table_lm_2fmessage_2fEndpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto_sccs[1] = {
  &scc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto = {
  false, false, descriptor_table_protodef_lm_2fmessage_2fResourcesAvailable_2eproto, "lm/message/ResourcesAvailable.proto", 207,
  &descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto_once, descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto_sccs, descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_lm_2fmessage_2fResourcesAvailable_2eproto::offsets,
  file_level_metadata_lm_2fmessage_2fResourcesAvailable_2eproto, 1, file_level_enum_descriptors_lm_2fmessage_2fResourcesAvailable_2eproto, file_level_service_descriptors_lm_2fmessage_2fResourcesAvailable_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fmessage_2fResourcesAvailable_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto)), true);
namespace lm {
namespace message {

// ===================================================================

void ResourcesAvailable::InitAsDefaultInstance() {
  ::lm::message::_ResourcesAvailable_default_instance_._instance.get_mutable()->controller_address_ = const_cast< ::lm::message::Endpoint*>(
      ::lm::message::Endpoint::internal_default_instance());
}
class ResourcesAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourcesAvailable>()._has_bits_);
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::lm::message::Endpoint& controller_address(const ResourcesAvailable* msg);
  static void set_has_controller_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::lm::message::Endpoint&
ResourcesAvailable::_Internal::controller_address(const ResourcesAvailable* msg) {
  return *msg->controller_address_;
}
void ResourcesAvailable::clear_controller_address() {
  if (controller_address_ != nullptr) controller_address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResourcesAvailable::ResourcesAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cpu_cores_(arena),
  gpu_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.message.ResourcesAvailable)
}
ResourcesAvailable::ResourcesAvailable(const ResourcesAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cpu_cores_(from.cpu_cores_),
      gpu_devices_(from.gpu_devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hostname()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  if (from._internal_has_controller_address()) {
    controller_address_ = new ::lm::message::Endpoint(*from.controller_address_);
  } else {
    controller_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lm.message.ResourcesAvailable)
}

void ResourcesAvailable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_address_ = nullptr;
}

ResourcesAvailable::~ResourcesAvailable() {
  // @@protoc_insertion_point(destructor:lm.message.ResourcesAvailable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourcesAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete controller_address_;
}

void ResourcesAvailable::ArenaDtor(void* object) {
  ResourcesAvailable* _this = reinterpret_cast< ResourcesAvailable* >(object);
  (void)_this;
}
void ResourcesAvailable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourcesAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourcesAvailable& ResourcesAvailable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto.base);
  return *internal_default_instance();
}


void ResourcesAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.message.ResourcesAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_cores_.Clear();
  gpu_devices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(controller_address_ != nullptr);
      controller_address_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesAvailable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lm.message.ResourcesAvailable.hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.message.Endpoint controller_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cpu_cores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cpu_cores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cpu_cores(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gpu_devices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gpu_devices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gpu_devices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourcesAvailable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.message.ResourcesAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lm.message.ResourcesAvailable.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // required .lm.message.Endpoint controller_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::controller_address(this), target, stream);
  }

  // repeated int32 cpu_cores = 3;
  for (int i = 0, n = this->_internal_cpu_cores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cpu_cores(i), target);
  }

  // repeated int32 gpu_devices = 4;
  for (int i = 0, n = this->_internal_gpu_devices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gpu_devices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.message.ResourcesAvailable)
  return target;
}

size_t ResourcesAvailable::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.message.ResourcesAvailable)
  size_t total_size = 0;

  if (_internal_has_hostname()) {
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  if (_internal_has_controller_address()) {
    // required .lm.message.Endpoint controller_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_address_);
  }

  return total_size;
}
size_t ResourcesAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.message.ResourcesAvailable)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());

    // required .lm.message.Endpoint controller_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_address_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cpu_cores = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cpu_cores_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cpu_cores_size());
    total_size += data_size;
  }

  // repeated int32 gpu_devices = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gpu_devices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gpu_devices_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourcesAvailable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.message.ResourcesAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourcesAvailable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourcesAvailable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.message.ResourcesAvailable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.message.ResourcesAvailable)
    MergeFrom(*source);
  }
}

void ResourcesAvailable::MergeFrom(const ResourcesAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.message.ResourcesAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpu_cores_.MergeFrom(from.cpu_cores_);
  gpu_devices_.MergeFrom(from.gpu_devices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_controller_address()->::lm::message::Endpoint::MergeFrom(from._internal_controller_address());
    }
  }
}

void ResourcesAvailable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.message.ResourcesAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcesAvailable::CopyFrom(const ResourcesAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.message.ResourcesAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesAvailable::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ResourcesAvailable::InternalSwap(ResourcesAvailable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cpu_cores_.InternalSwap(&other->cpu_cores_);
  gpu_devices_.InternalSwap(&other->gpu_devices_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(controller_address_, other->controller_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesAvailable::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::message::ResourcesAvailable* Arena::CreateMaybeMessage< ::lm::message::ResourcesAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::message::ResourcesAvailable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
