// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/WorkUnitOutput.proto

#include "lm/message/WorkUnitOutput.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fBarrierCrossingTimes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fConcentrationsTimeSeries_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConcentrationsTimeSeries_lm_2fio_2fConcentrationsTimeSeries_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fDegreeAdvancementTimeSeries_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DegreeAdvancementTimeSeries_lm_2fio_2fDegreeAdvancementTimeSeries_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fFirstPassageTimes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirstPassageTimes_lm_2fio_2fFirstPassageTimes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fLatticeTimeSeries_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LatticeTimeSeries_lm_2fio_2fLatticeTimeSeries_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderParameterFirstPassageTimes_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fOrderParameterTimeSeries_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderParameterTimeSeries_lm_2fio_2fOrderParameterTimeSeries_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fSpeciesTimeSeries_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeciesTimeSeries_lm_2fio_2fSpeciesTimeSeries_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fStochasticProcessTimeSeries_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto;
namespace lm {
namespace message {
class WorkUnitOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkUnitOutput> _instance;
} _WorkUnitOutput_default_instance_;
}  // namespace message
}  // namespace lm
static void InitDefaultsscc_info_WorkUnitOutput_lm_2fmessage_2fWorkUnitOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::message::_WorkUnitOutput_default_instance_;
    new (ptr) ::lm::message::WorkUnitOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::message::WorkUnitOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_WorkUnitOutput_lm_2fmessage_2fWorkUnitOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_WorkUnitOutput_lm_2fmessage_2fWorkUnitOutput_2eproto}, {
      &scc_info_ConcentrationsTimeSeries_lm_2fio_2fConcentrationsTimeSeries_2eproto.base,
      &scc_info_DegreeAdvancementTimeSeries_lm_2fio_2fDegreeAdvancementTimeSeries_2eproto.base,
      &scc_info_LatticeTimeSeries_lm_2fio_2fLatticeTimeSeries_2eproto.base,
      &scc_info_OrderParameterTimeSeries_lm_2fio_2fOrderParameterTimeSeries_2eproto.base,
      &scc_info_SpeciesTimeSeries_lm_2fio_2fSpeciesTimeSeries_2eproto.base,
      &scc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto.base,
      &scc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto.base,
      &scc_info_FirstPassageTimes_lm_2fio_2fFirstPassageTimes_2eproto.base,
      &scc_info_OrderParameterFirstPassageTimes_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fmessage_2fWorkUnitOutput_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fmessage_2fWorkUnitOutput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fmessage_2fWorkUnitOutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fmessage_2fWorkUnitOutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, has_output_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, record_name_prefix_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, condense_output_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, concentrations_time_series_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, degree_advancement_time_series_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, lattice_time_series_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, order_parameter_time_series_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, species_time_series_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, stochastic_process_time_series_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, barrier_crossing_times_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, first_passage_times_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitOutput, order_parameter_first_passage_times_),
  7,
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::lm::message::WorkUnitOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::message::_WorkUnitOutput_default_instance_),
};

const char descriptor_table_protodef_lm_2fmessage_2fWorkUnitOutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037lm/message/WorkUnitOutput.proto\022\nlm.me"
  "ssage\032 lm/io/BarrierCrossingTimes.proto\032"
  "$lm/io/ConcentrationsTimeSeries.proto\032\'l"
  "m/io/DegreeAdvancementTimeSeries.proto\032\035"
  "lm/io/FirstPassageTimes.proto\032+lm/io/Ord"
  "erParameterFirstPassageTimes.proto\032\035lm/i"
  "o/LatticeTimeSeries.proto\032$lm/io/OrderPa"
  "rameterTimeSeries.proto\032\031lm/io/SpeciesCo"
  "unts.proto\032\035lm/io/SpeciesTimeSeries.prot"
  "o\032\'lm/io/StochasticProcessTimeSeries.pro"
  "to\"\301\005\n\016WorkUnitOutput\022\031\n\nhas_output\030\001 \001("
  "\010:\005false\022\032\n\022record_name_prefix\030\002 \001(\t\022\036\n\017"
  "condense_output\030\003 \001(\010:\005false\022C\n\032concentr"
  "ations_time_series\030\013 \001(\0132\037.lm.io.Concent"
  "rationsTimeSeries\022J\n\036degree_advancement_"
  "time_series\030\014 \001(\0132\".lm.io.DegreeAdvancem"
  "entTimeSeries\0225\n\023lattice_time_series\030\r \001"
  "(\0132\030.lm.io.LatticeTimeSeries\022D\n\033order_pa"
  "rameter_time_series\030\016 \001(\0132\037.lm.io.OrderP"
  "arameterTimeSeries\0225\n\023species_time_serie"
  "s\030\020 \001(\0132\030.lm.io.SpeciesTimeSeries\022J\n\036sto"
  "chastic_process_time_series\030\021 \001(\0132\".lm.i"
  "o.StochasticProcessTimeSeries\022;\n\026barrier"
  "_crossing_times\030\024 \003(\0132\033.lm.io.BarrierCro"
  "ssingTimes\0225\n\023first_passage_times\030\025 \003(\0132"
  "\030.lm.io.FirstPassageTimes\022S\n#order_param"
  "eter_first_passage_times\030\026 \003(\0132&.lm.io.O"
  "rderParameterFirstPassageTimes"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto_deps[10] = {
  &::descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto,
  &::descriptor_table_lm_2fio_2fConcentrationsTimeSeries_2eproto,
  &::descriptor_table_lm_2fio_2fDegreeAdvancementTimeSeries_2eproto,
  &::descriptor_table_lm_2fio_2fFirstPassageTimes_2eproto,
  &::descriptor_table_lm_2fio_2fLatticeTimeSeries_2eproto,
  &::descriptor_table_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto,
  &::descriptor_table_lm_2fio_2fOrderParameterTimeSeries_2eproto,
  &::descriptor_table_lm_2fio_2fSpeciesCounts_2eproto,
  &::descriptor_table_lm_2fio_2fSpeciesTimeSeries_2eproto,
  &::descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto_sccs[1] = {
  &scc_info_WorkUnitOutput_lm_2fmessage_2fWorkUnitOutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto = {
  false, false, descriptor_table_protodef_lm_2fmessage_2fWorkUnitOutput_2eproto, "lm/message/WorkUnitOutput.proto", 1110,
  &descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto_once, descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto_sccs, descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_lm_2fmessage_2fWorkUnitOutput_2eproto::offsets,
  file_level_metadata_lm_2fmessage_2fWorkUnitOutput_2eproto, 1, file_level_enum_descriptors_lm_2fmessage_2fWorkUnitOutput_2eproto, file_level_service_descriptors_lm_2fmessage_2fWorkUnitOutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fmessage_2fWorkUnitOutput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fmessage_2fWorkUnitOutput_2eproto)), true);
namespace lm {
namespace message {

// ===================================================================

void WorkUnitOutput::InitAsDefaultInstance() {
  ::lm::message::_WorkUnitOutput_default_instance_._instance.get_mutable()->concentrations_time_series_ = const_cast< ::lm::io::ConcentrationsTimeSeries*>(
      ::lm::io::ConcentrationsTimeSeries::internal_default_instance());
  ::lm::message::_WorkUnitOutput_default_instance_._instance.get_mutable()->degree_advancement_time_series_ = const_cast< ::lm::io::DegreeAdvancementTimeSeries*>(
      ::lm::io::DegreeAdvancementTimeSeries::internal_default_instance());
  ::lm::message::_WorkUnitOutput_default_instance_._instance.get_mutable()->lattice_time_series_ = const_cast< ::lm::io::LatticeTimeSeries*>(
      ::lm::io::LatticeTimeSeries::internal_default_instance());
  ::lm::message::_WorkUnitOutput_default_instance_._instance.get_mutable()->order_parameter_time_series_ = const_cast< ::lm::io::OrderParameterTimeSeries*>(
      ::lm::io::OrderParameterTimeSeries::internal_default_instance());
  ::lm::message::_WorkUnitOutput_default_instance_._instance.get_mutable()->species_time_series_ = const_cast< ::lm::io::SpeciesTimeSeries*>(
      ::lm::io::SpeciesTimeSeries::internal_default_instance());
  ::lm::message::_WorkUnitOutput_default_instance_._instance.get_mutable()->stochastic_process_time_series_ = const_cast< ::lm::io::StochasticProcessTimeSeries*>(
      ::lm::io::StochasticProcessTimeSeries::internal_default_instance());
}
class WorkUnitOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkUnitOutput>()._has_bits_);
  static void set_has_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_record_name_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_condense_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::lm::io::ConcentrationsTimeSeries& concentrations_time_series(const WorkUnitOutput* msg);
  static void set_has_concentrations_time_series(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::lm::io::DegreeAdvancementTimeSeries& degree_advancement_time_series(const WorkUnitOutput* msg);
  static void set_has_degree_advancement_time_series(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::lm::io::LatticeTimeSeries& lattice_time_series(const WorkUnitOutput* msg);
  static void set_has_lattice_time_series(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::lm::io::OrderParameterTimeSeries& order_parameter_time_series(const WorkUnitOutput* msg);
  static void set_has_order_parameter_time_series(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::lm::io::SpeciesTimeSeries& species_time_series(const WorkUnitOutput* msg);
  static void set_has_species_time_series(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::lm::io::StochasticProcessTimeSeries& stochastic_process_time_series(const WorkUnitOutput* msg);
  static void set_has_stochastic_process_time_series(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::lm::io::ConcentrationsTimeSeries&
WorkUnitOutput::_Internal::concentrations_time_series(const WorkUnitOutput* msg) {
  return *msg->concentrations_time_series_;
}
const ::lm::io::DegreeAdvancementTimeSeries&
WorkUnitOutput::_Internal::degree_advancement_time_series(const WorkUnitOutput* msg) {
  return *msg->degree_advancement_time_series_;
}
const ::lm::io::LatticeTimeSeries&
WorkUnitOutput::_Internal::lattice_time_series(const WorkUnitOutput* msg) {
  return *msg->lattice_time_series_;
}
const ::lm::io::OrderParameterTimeSeries&
WorkUnitOutput::_Internal::order_parameter_time_series(const WorkUnitOutput* msg) {
  return *msg->order_parameter_time_series_;
}
const ::lm::io::SpeciesTimeSeries&
WorkUnitOutput::_Internal::species_time_series(const WorkUnitOutput* msg) {
  return *msg->species_time_series_;
}
const ::lm::io::StochasticProcessTimeSeries&
WorkUnitOutput::_Internal::stochastic_process_time_series(const WorkUnitOutput* msg) {
  return *msg->stochastic_process_time_series_;
}
void WorkUnitOutput::clear_concentrations_time_series() {
  if (concentrations_time_series_ != nullptr) concentrations_time_series_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void WorkUnitOutput::clear_degree_advancement_time_series() {
  if (degree_advancement_time_series_ != nullptr) degree_advancement_time_series_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void WorkUnitOutput::clear_lattice_time_series() {
  if (lattice_time_series_ != nullptr) lattice_time_series_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void WorkUnitOutput::clear_order_parameter_time_series() {
  if (order_parameter_time_series_ != nullptr) order_parameter_time_series_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void WorkUnitOutput::clear_species_time_series() {
  if (species_time_series_ != nullptr) species_time_series_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void WorkUnitOutput::clear_stochastic_process_time_series() {
  if (stochastic_process_time_series_ != nullptr) stochastic_process_time_series_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void WorkUnitOutput::clear_barrier_crossing_times() {
  barrier_crossing_times_.Clear();
}
void WorkUnitOutput::clear_first_passage_times() {
  first_passage_times_.Clear();
}
void WorkUnitOutput::clear_order_parameter_first_passage_times() {
  order_parameter_first_passage_times_.Clear();
}
WorkUnitOutput::WorkUnitOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  barrier_crossing_times_(arena),
  first_passage_times_(arena),
  order_parameter_first_passage_times_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.message.WorkUnitOutput)
}
WorkUnitOutput::WorkUnitOutput(const WorkUnitOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      barrier_crossing_times_(from.barrier_crossing_times_),
      first_passage_times_(from.first_passage_times_),
      order_parameter_first_passage_times_(from.order_parameter_first_passage_times_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_record_name_prefix()) {
    record_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name_prefix(),
      GetArena());
  }
  if (from._internal_has_concentrations_time_series()) {
    concentrations_time_series_ = new ::lm::io::ConcentrationsTimeSeries(*from.concentrations_time_series_);
  } else {
    concentrations_time_series_ = nullptr;
  }
  if (from._internal_has_degree_advancement_time_series()) {
    degree_advancement_time_series_ = new ::lm::io::DegreeAdvancementTimeSeries(*from.degree_advancement_time_series_);
  } else {
    degree_advancement_time_series_ = nullptr;
  }
  if (from._internal_has_lattice_time_series()) {
    lattice_time_series_ = new ::lm::io::LatticeTimeSeries(*from.lattice_time_series_);
  } else {
    lattice_time_series_ = nullptr;
  }
  if (from._internal_has_order_parameter_time_series()) {
    order_parameter_time_series_ = new ::lm::io::OrderParameterTimeSeries(*from.order_parameter_time_series_);
  } else {
    order_parameter_time_series_ = nullptr;
  }
  if (from._internal_has_species_time_series()) {
    species_time_series_ = new ::lm::io::SpeciesTimeSeries(*from.species_time_series_);
  } else {
    species_time_series_ = nullptr;
  }
  if (from._internal_has_stochastic_process_time_series()) {
    stochastic_process_time_series_ = new ::lm::io::StochasticProcessTimeSeries(*from.stochastic_process_time_series_);
  } else {
    stochastic_process_time_series_ = nullptr;
  }
  ::memcpy(&has_output_, &from.has_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&condense_output_) -
    reinterpret_cast<char*>(&has_output_)) + sizeof(condense_output_));
  // @@protoc_insertion_point(copy_constructor:lm.message.WorkUnitOutput)
}

void WorkUnitOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkUnitOutput_lm_2fmessage_2fWorkUnitOutput_2eproto.base);
  record_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&concentrations_time_series_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&condense_output_) -
      reinterpret_cast<char*>(&concentrations_time_series_)) + sizeof(condense_output_));
}

WorkUnitOutput::~WorkUnitOutput() {
  // @@protoc_insertion_point(destructor:lm.message.WorkUnitOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkUnitOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concentrations_time_series_;
  if (this != internal_default_instance()) delete degree_advancement_time_series_;
  if (this != internal_default_instance()) delete lattice_time_series_;
  if (this != internal_default_instance()) delete order_parameter_time_series_;
  if (this != internal_default_instance()) delete species_time_series_;
  if (this != internal_default_instance()) delete stochastic_process_time_series_;
}

void WorkUnitOutput::ArenaDtor(void* object) {
  WorkUnitOutput* _this = reinterpret_cast< WorkUnitOutput* >(object);
  (void)_this;
}
void WorkUnitOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkUnitOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkUnitOutput& WorkUnitOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkUnitOutput_lm_2fmessage_2fWorkUnitOutput_2eproto.base);
  return *internal_default_instance();
}


void WorkUnitOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.message.WorkUnitOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barrier_crossing_times_.Clear();
  first_passage_times_.Clear();
  order_parameter_first_passage_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      record_name_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(concentrations_time_series_ != nullptr);
      concentrations_time_series_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(degree_advancement_time_series_ != nullptr);
      degree_advancement_time_series_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lattice_time_series_ != nullptr);
      lattice_time_series_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(order_parameter_time_series_ != nullptr);
      order_parameter_time_series_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(species_time_series_ != nullptr);
      species_time_series_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(stochastic_process_time_series_ != nullptr);
      stochastic_process_time_series_->Clear();
    }
  }
  has_output_ = false;
  condense_output_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkUnitOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_output = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_output(&has_bits);
          has_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string record_name_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lm.message.WorkUnitOutput.record_name_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool condense_output = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_condense_output(&has_bits);
          condense_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.ConcentrationsTimeSeries concentrations_time_series = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_concentrations_time_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.DegreeAdvancementTimeSeries degree_advancement_time_series = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_degree_advancement_time_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.LatticeTimeSeries lattice_time_series = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_lattice_time_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.OrderParameterTimeSeries order_parameter_time_series = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_parameter_time_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.SpeciesTimeSeries species_time_series = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_species_time_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.StochasticProcessTimeSeries stochastic_process_time_series = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_stochastic_process_time_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.BarrierCrossingTimes barrier_crossing_times = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_barrier_crossing_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.FirstPassageTimes first_passage_times = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_first_passage_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_order_parameter_first_passage_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkUnitOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.message.WorkUnitOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_output = 1 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_output(), target);
  }

  // optional string record_name_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_record_name_prefix().data(), static_cast<int>(this->_internal_record_name_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lm.message.WorkUnitOutput.record_name_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_record_name_prefix(), target);
  }

  // optional bool condense_output = 3 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_condense_output(), target);
  }

  // optional .lm.io.ConcentrationsTimeSeries concentrations_time_series = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::concentrations_time_series(this), target, stream);
  }

  // optional .lm.io.DegreeAdvancementTimeSeries degree_advancement_time_series = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::degree_advancement_time_series(this), target, stream);
  }

  // optional .lm.io.LatticeTimeSeries lattice_time_series = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::lattice_time_series(this), target, stream);
  }

  // optional .lm.io.OrderParameterTimeSeries order_parameter_time_series = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::order_parameter_time_series(this), target, stream);
  }

  // optional .lm.io.SpeciesTimeSeries species_time_series = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::species_time_series(this), target, stream);
  }

  // optional .lm.io.StochasticProcessTimeSeries stochastic_process_time_series = 17;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::stochastic_process_time_series(this), target, stream);
  }

  // repeated .lm.io.BarrierCrossingTimes barrier_crossing_times = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_barrier_crossing_times_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_barrier_crossing_times(i), target, stream);
  }

  // repeated .lm.io.FirstPassageTimes first_passage_times = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_passage_times_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_first_passage_times(i), target, stream);
  }

  // repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_order_parameter_first_passage_times_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_order_parameter_first_passage_times(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.message.WorkUnitOutput)
  return target;
}

size_t WorkUnitOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.message.WorkUnitOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.io.BarrierCrossingTimes barrier_crossing_times = 20;
  total_size += 2UL * this->_internal_barrier_crossing_times_size();
  for (const auto& msg : this->barrier_crossing_times_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.io.FirstPassageTimes first_passage_times = 21;
  total_size += 2UL * this->_internal_first_passage_times_size();
  for (const auto& msg : this->first_passage_times_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 22;
  total_size += 2UL * this->_internal_order_parameter_first_passage_times_size();
  for (const auto& msg : this->order_parameter_first_passage_times_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string record_name_prefix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_record_name_prefix());
    }

    // optional .lm.io.ConcentrationsTimeSeries concentrations_time_series = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *concentrations_time_series_);
    }

    // optional .lm.io.DegreeAdvancementTimeSeries degree_advancement_time_series = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *degree_advancement_time_series_);
    }

    // optional .lm.io.LatticeTimeSeries lattice_time_series = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lattice_time_series_);
    }

    // optional .lm.io.OrderParameterTimeSeries order_parameter_time_series = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_parameter_time_series_);
    }

    // optional .lm.io.SpeciesTimeSeries species_time_series = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *species_time_series_);
    }

    // optional .lm.io.StochasticProcessTimeSeries stochastic_process_time_series = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stochastic_process_time_series_);
    }

    // optional bool has_output = 1 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool condense_output = 3 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkUnitOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.message.WorkUnitOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkUnitOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkUnitOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.message.WorkUnitOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.message.WorkUnitOutput)
    MergeFrom(*source);
  }
}

void WorkUnitOutput::MergeFrom(const WorkUnitOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.message.WorkUnitOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barrier_crossing_times_.MergeFrom(from.barrier_crossing_times_);
  first_passage_times_.MergeFrom(from.first_passage_times_);
  order_parameter_first_passage_times_.MergeFrom(from.order_parameter_first_passage_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_record_name_prefix(from._internal_record_name_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_concentrations_time_series()->::lm::io::ConcentrationsTimeSeries::MergeFrom(from._internal_concentrations_time_series());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_degree_advancement_time_series()->::lm::io::DegreeAdvancementTimeSeries::MergeFrom(from._internal_degree_advancement_time_series());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lattice_time_series()->::lm::io::LatticeTimeSeries::MergeFrom(from._internal_lattice_time_series());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_order_parameter_time_series()->::lm::io::OrderParameterTimeSeries::MergeFrom(from._internal_order_parameter_time_series());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_species_time_series()->::lm::io::SpeciesTimeSeries::MergeFrom(from._internal_species_time_series());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_stochastic_process_time_series()->::lm::io::StochasticProcessTimeSeries::MergeFrom(from._internal_stochastic_process_time_series());
    }
    if (cached_has_bits & 0x00000080u) {
      has_output_ = from.has_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_condense_output(from._internal_condense_output());
  }
}

void WorkUnitOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.message.WorkUnitOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkUnitOutput::CopyFrom(const WorkUnitOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.message.WorkUnitOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkUnitOutput::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(barrier_crossing_times_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(first_passage_times_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(order_parameter_first_passage_times_)) return false;
  if (_internal_has_concentrations_time_series()) {
    if (!concentrations_time_series_->IsInitialized()) return false;
  }
  if (_internal_has_degree_advancement_time_series()) {
    if (!degree_advancement_time_series_->IsInitialized()) return false;
  }
  if (_internal_has_lattice_time_series()) {
    if (!lattice_time_series_->IsInitialized()) return false;
  }
  if (_internal_has_order_parameter_time_series()) {
    if (!order_parameter_time_series_->IsInitialized()) return false;
  }
  if (_internal_has_species_time_series()) {
    if (!species_time_series_->IsInitialized()) return false;
  }
  if (_internal_has_stochastic_process_time_series()) {
    if (!stochastic_process_time_series_->IsInitialized()) return false;
  }
  return true;
}

void WorkUnitOutput::InternalSwap(WorkUnitOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  barrier_crossing_times_.InternalSwap(&other->barrier_crossing_times_);
  first_passage_times_.InternalSwap(&other->first_passage_times_);
  order_parameter_first_passage_times_.InternalSwap(&other->order_parameter_first_passage_times_);
  record_name_prefix_.Swap(&other->record_name_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkUnitOutput, condense_output_)
      + sizeof(WorkUnitOutput::condense_output_)
      - PROTOBUF_FIELD_OFFSET(WorkUnitOutput, concentrations_time_series_)>(
          reinterpret_cast<char*>(&concentrations_time_series_),
          reinterpret_cast<char*>(&other->concentrations_time_series_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkUnitOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::message::WorkUnitOutput* Arena::CreateMaybeMessage< ::lm::message::WorkUnitOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::message::WorkUnitOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
