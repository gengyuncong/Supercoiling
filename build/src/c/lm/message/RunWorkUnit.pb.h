// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/RunWorkUnit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fRunWorkUnit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fRunWorkUnit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/input/DiffusionModel.pb.h"
#include "lm/input/MicroenvironmentModel.pb.h"
#include "lm/input/OutputOptions.pb.h"
#include "lm/input/ReactionModel.pb.h"
#include "lm/message/Endpoint.pb.h"
#include "lm/message/WorkUnit.pb.h"
#include "lm/types/OrderParameters.pb.h"
#include "lm/types/SolverType.pb.h"
#include "lm/types/TrajectoryBarrier.pb.h"
#include "lm/types/TrajectoryLimits.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fRunWorkUnit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fmessage_2fRunWorkUnit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto;
namespace lm {
namespace message {
class RunWorkUnit;
class RunWorkUnitDefaultTypeInternal;
extern RunWorkUnitDefaultTypeInternal _RunWorkUnit_default_instance_;
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::message::RunWorkUnit* Arena::CreateMaybeMessage<::lm::message::RunWorkUnit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace message {

// ===================================================================

class RunWorkUnit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.message.RunWorkUnit) */ {
 public:
  inline RunWorkUnit() : RunWorkUnit(nullptr) {}
  virtual ~RunWorkUnit();

  RunWorkUnit(const RunWorkUnit& from);
  RunWorkUnit(RunWorkUnit&& from) noexcept
    : RunWorkUnit() {
    *this = ::std::move(from);
  }

  inline RunWorkUnit& operator=(const RunWorkUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunWorkUnit& operator=(RunWorkUnit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunWorkUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunWorkUnit* internal_default_instance() {
    return reinterpret_cast<const RunWorkUnit*>(
               &_RunWorkUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RunWorkUnit& a, RunWorkUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(RunWorkUnit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunWorkUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunWorkUnit* New() const final {
    return CreateMaybeMessage<RunWorkUnit>(nullptr);
  }

  RunWorkUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunWorkUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunWorkUnit& from);
  void MergeFrom(const RunWorkUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunWorkUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.message.RunWorkUnit";
  }
  protected:
  explicit RunWorkUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto);
    return ::descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartFieldNumber = 101,
    kOutputAddressFieldNumber = 3,
    kSupervisorAddressFieldNumber = 4,
    kTrajectoryLimitsFieldNumber = 31,
    kTrajectoryBarriersFieldNumber = 32,
    kReactionModelFieldNumber = 40,
    kDiffusionModelFieldNumber = 41,
    kMicroenvModelFieldNumber = 42,
    kOrderParametersFieldNumber = 50,
    kOutputOptionsFieldNumber = 91,
    kWorkUnitIdFieldNumber = 1,
    kSolverTypeFieldNumber = 2,
    kMaxStepsFieldNumber = 30,
  };
  // repeated .lm.message.WorkUnit part = 101;
  int part_size() const;
  private:
  int _internal_part_size() const;
  public:
  void clear_part();
  ::lm::message::WorkUnit* mutable_part(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::WorkUnit >*
      mutable_part();
  private:
  const ::lm::message::WorkUnit& _internal_part(int index) const;
  ::lm::message::WorkUnit* _internal_add_part();
  public:
  const ::lm::message::WorkUnit& part(int index) const;
  ::lm::message::WorkUnit* add_part();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::WorkUnit >&
      part() const;

  // required .lm.message.Endpoint output_address = 3;
  bool has_output_address() const;
  private:
  bool _internal_has_output_address() const;
  public:
  void clear_output_address();
  const ::lm::message::Endpoint& output_address() const;
  ::lm::message::Endpoint* release_output_address();
  ::lm::message::Endpoint* mutable_output_address();
  void set_allocated_output_address(::lm::message::Endpoint* output_address);
  private:
  const ::lm::message::Endpoint& _internal_output_address() const;
  ::lm::message::Endpoint* _internal_mutable_output_address();
  public:
  void unsafe_arena_set_allocated_output_address(
      ::lm::message::Endpoint* output_address);
  ::lm::message::Endpoint* unsafe_arena_release_output_address();

  // required .lm.message.Endpoint supervisor_address = 4;
  bool has_supervisor_address() const;
  private:
  bool _internal_has_supervisor_address() const;
  public:
  void clear_supervisor_address();
  const ::lm::message::Endpoint& supervisor_address() const;
  ::lm::message::Endpoint* release_supervisor_address();
  ::lm::message::Endpoint* mutable_supervisor_address();
  void set_allocated_supervisor_address(::lm::message::Endpoint* supervisor_address);
  private:
  const ::lm::message::Endpoint& _internal_supervisor_address() const;
  ::lm::message::Endpoint* _internal_mutable_supervisor_address();
  public:
  void unsafe_arena_set_allocated_supervisor_address(
      ::lm::message::Endpoint* supervisor_address);
  ::lm::message::Endpoint* unsafe_arena_release_supervisor_address();

  // optional .lm.types.TrajectoryLimits trajectory_limits = 31;
  bool has_trajectory_limits() const;
  private:
  bool _internal_has_trajectory_limits() const;
  public:
  void clear_trajectory_limits();
  const ::lm::types::TrajectoryLimits& trajectory_limits() const;
  ::lm::types::TrajectoryLimits* release_trajectory_limits();
  ::lm::types::TrajectoryLimits* mutable_trajectory_limits();
  void set_allocated_trajectory_limits(::lm::types::TrajectoryLimits* trajectory_limits);
  private:
  const ::lm::types::TrajectoryLimits& _internal_trajectory_limits() const;
  ::lm::types::TrajectoryLimits* _internal_mutable_trajectory_limits();
  public:
  void unsafe_arena_set_allocated_trajectory_limits(
      ::lm::types::TrajectoryLimits* trajectory_limits);
  ::lm::types::TrajectoryLimits* unsafe_arena_release_trajectory_limits();

  // optional .lm.types.TrajectoryBarriers trajectory_barriers = 32;
  bool has_trajectory_barriers() const;
  private:
  bool _internal_has_trajectory_barriers() const;
  public:
  void clear_trajectory_barriers();
  const ::lm::types::TrajectoryBarriers& trajectory_barriers() const;
  ::lm::types::TrajectoryBarriers* release_trajectory_barriers();
  ::lm::types::TrajectoryBarriers* mutable_trajectory_barriers();
  void set_allocated_trajectory_barriers(::lm::types::TrajectoryBarriers* trajectory_barriers);
  private:
  const ::lm::types::TrajectoryBarriers& _internal_trajectory_barriers() const;
  ::lm::types::TrajectoryBarriers* _internal_mutable_trajectory_barriers();
  public:
  void unsafe_arena_set_allocated_trajectory_barriers(
      ::lm::types::TrajectoryBarriers* trajectory_barriers);
  ::lm::types::TrajectoryBarriers* unsafe_arena_release_trajectory_barriers();

  // optional .lm.input.ReactionModel reaction_model = 40;
  bool has_reaction_model() const;
  private:
  bool _internal_has_reaction_model() const;
  public:
  void clear_reaction_model();
  const ::lm::input::ReactionModel& reaction_model() const;
  ::lm::input::ReactionModel* release_reaction_model();
  ::lm::input::ReactionModel* mutable_reaction_model();
  void set_allocated_reaction_model(::lm::input::ReactionModel* reaction_model);
  private:
  const ::lm::input::ReactionModel& _internal_reaction_model() const;
  ::lm::input::ReactionModel* _internal_mutable_reaction_model();
  public:
  void unsafe_arena_set_allocated_reaction_model(
      ::lm::input::ReactionModel* reaction_model);
  ::lm::input::ReactionModel* unsafe_arena_release_reaction_model();

  // optional .lm.input.DiffusionModel diffusion_model = 41;
  bool has_diffusion_model() const;
  private:
  bool _internal_has_diffusion_model() const;
  public:
  void clear_diffusion_model();
  const ::lm::input::DiffusionModel& diffusion_model() const;
  ::lm::input::DiffusionModel* release_diffusion_model();
  ::lm::input::DiffusionModel* mutable_diffusion_model();
  void set_allocated_diffusion_model(::lm::input::DiffusionModel* diffusion_model);
  private:
  const ::lm::input::DiffusionModel& _internal_diffusion_model() const;
  ::lm::input::DiffusionModel* _internal_mutable_diffusion_model();
  public:
  void unsafe_arena_set_allocated_diffusion_model(
      ::lm::input::DiffusionModel* diffusion_model);
  ::lm::input::DiffusionModel* unsafe_arena_release_diffusion_model();

  // optional .lm.input.MicroenvironmentModel microenv_model = 42;
  bool has_microenv_model() const;
  private:
  bool _internal_has_microenv_model() const;
  public:
  void clear_microenv_model();
  const ::lm::input::MicroenvironmentModel& microenv_model() const;
  ::lm::input::MicroenvironmentModel* release_microenv_model();
  ::lm::input::MicroenvironmentModel* mutable_microenv_model();
  void set_allocated_microenv_model(::lm::input::MicroenvironmentModel* microenv_model);
  private:
  const ::lm::input::MicroenvironmentModel& _internal_microenv_model() const;
  ::lm::input::MicroenvironmentModel* _internal_mutable_microenv_model();
  public:
  void unsafe_arena_set_allocated_microenv_model(
      ::lm::input::MicroenvironmentModel* microenv_model);
  ::lm::input::MicroenvironmentModel* unsafe_arena_release_microenv_model();

  // optional .lm.types.OrderParameters order_parameters = 50;
  bool has_order_parameters() const;
  private:
  bool _internal_has_order_parameters() const;
  public:
  void clear_order_parameters();
  const ::lm::types::OrderParameters& order_parameters() const;
  ::lm::types::OrderParameters* release_order_parameters();
  ::lm::types::OrderParameters* mutable_order_parameters();
  void set_allocated_order_parameters(::lm::types::OrderParameters* order_parameters);
  private:
  const ::lm::types::OrderParameters& _internal_order_parameters() const;
  ::lm::types::OrderParameters* _internal_mutable_order_parameters();
  public:
  void unsafe_arena_set_allocated_order_parameters(
      ::lm::types::OrderParameters* order_parameters);
  ::lm::types::OrderParameters* unsafe_arena_release_order_parameters();

  // optional .lm.input.OutputOptions output_options = 91;
  bool has_output_options() const;
  private:
  bool _internal_has_output_options() const;
  public:
  void clear_output_options();
  const ::lm::input::OutputOptions& output_options() const;
  ::lm::input::OutputOptions* release_output_options();
  ::lm::input::OutputOptions* mutable_output_options();
  void set_allocated_output_options(::lm::input::OutputOptions* output_options);
  private:
  const ::lm::input::OutputOptions& _internal_output_options() const;
  ::lm::input::OutputOptions* _internal_mutable_output_options();
  public:
  void unsafe_arena_set_allocated_output_options(
      ::lm::input::OutputOptions* output_options);
  ::lm::input::OutputOptions* unsafe_arena_release_output_options();

  // required uint64 work_unit_id = 1;
  bool has_work_unit_id() const;
  private:
  bool _internal_has_work_unit_id() const;
  public:
  void clear_work_unit_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 work_unit_id() const;
  void set_work_unit_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_work_unit_id() const;
  void _internal_set_work_unit_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .lm.types.SolverType solver_type = 2;
  bool has_solver_type() const;
  private:
  bool _internal_has_solver_type() const;
  public:
  void clear_solver_type();
  ::lm::types::SolverType solver_type() const;
  void set_solver_type(::lm::types::SolverType value);
  private:
  ::lm::types::SolverType _internal_solver_type() const;
  void _internal_set_solver_type(::lm::types::SolverType value);
  public:

  // required uint64 max_steps = 30;
  bool has_max_steps() const;
  private:
  bool _internal_has_max_steps() const;
  public:
  void clear_max_steps();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_steps() const;
  void set_max_steps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_steps() const;
  void _internal_set_max_steps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.message.RunWorkUnit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::WorkUnit > part_;
  ::lm::message::Endpoint* output_address_;
  ::lm::message::Endpoint* supervisor_address_;
  ::lm::types::TrajectoryLimits* trajectory_limits_;
  ::lm::types::TrajectoryBarriers* trajectory_barriers_;
  ::lm::input::ReactionModel* reaction_model_;
  ::lm::input::DiffusionModel* diffusion_model_;
  ::lm::input::MicroenvironmentModel* microenv_model_;
  ::lm::types::OrderParameters* order_parameters_;
  ::lm::input::OutputOptions* output_options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 work_unit_id_;
  int solver_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_steps_;
  friend struct ::TableStruct_lm_2fmessage_2fRunWorkUnit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RunWorkUnit

// required uint64 work_unit_id = 1;
inline bool RunWorkUnit::_internal_has_work_unit_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RunWorkUnit::has_work_unit_id() const {
  return _internal_has_work_unit_id();
}
inline void RunWorkUnit::clear_work_unit_id() {
  work_unit_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RunWorkUnit::_internal_work_unit_id() const {
  return work_unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RunWorkUnit::work_unit_id() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.work_unit_id)
  return _internal_work_unit_id();
}
inline void RunWorkUnit::_internal_set_work_unit_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  work_unit_id_ = value;
}
inline void RunWorkUnit::set_work_unit_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_work_unit_id(value);
  // @@protoc_insertion_point(field_set:lm.message.RunWorkUnit.work_unit_id)
}

// required .lm.types.SolverType solver_type = 2;
inline bool RunWorkUnit::_internal_has_solver_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RunWorkUnit::has_solver_type() const {
  return _internal_has_solver_type();
}
inline void RunWorkUnit::clear_solver_type() {
  solver_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::lm::types::SolverType RunWorkUnit::_internal_solver_type() const {
  return static_cast< ::lm::types::SolverType >(solver_type_);
}
inline ::lm::types::SolverType RunWorkUnit::solver_type() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.solver_type)
  return _internal_solver_type();
}
inline void RunWorkUnit::_internal_set_solver_type(::lm::types::SolverType value) {
  assert(::lm::types::SolverType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  solver_type_ = value;
}
inline void RunWorkUnit::set_solver_type(::lm::types::SolverType value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:lm.message.RunWorkUnit.solver_type)
}

// required .lm.message.Endpoint output_address = 3;
inline bool RunWorkUnit::_internal_has_output_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || output_address_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_output_address() const {
  return _internal_has_output_address();
}
inline const ::lm::message::Endpoint& RunWorkUnit::_internal_output_address() const {
  const ::lm::message::Endpoint* p = output_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::Endpoint*>(
      &::lm::message::_Endpoint_default_instance_);
}
inline const ::lm::message::Endpoint& RunWorkUnit::output_address() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.output_address)
  return _internal_output_address();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_output_address(
    ::lm::message::Endpoint* output_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_address_);
  }
  output_address_ = output_address;
  if (output_address) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.output_address)
}
inline ::lm::message::Endpoint* RunWorkUnit::release_output_address() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::message::Endpoint* temp = output_address_;
  output_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::Endpoint* RunWorkUnit::unsafe_arena_release_output_address() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.output_address)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::message::Endpoint* temp = output_address_;
  output_address_ = nullptr;
  return temp;
}
inline ::lm::message::Endpoint* RunWorkUnit::_internal_mutable_output_address() {
  _has_bits_[0] |= 0x00000001u;
  if (output_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::Endpoint>(GetArena());
    output_address_ = p;
  }
  return output_address_;
}
inline ::lm::message::Endpoint* RunWorkUnit::mutable_output_address() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.output_address)
  return _internal_mutable_output_address();
}
inline void RunWorkUnit::set_allocated_output_address(::lm::message::Endpoint* output_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_address_);
  }
  if (output_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_address)->GetArena();
    if (message_arena != submessage_arena) {
      output_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_address_ = output_address;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.output_address)
}

// required .lm.message.Endpoint supervisor_address = 4;
inline bool RunWorkUnit::_internal_has_supervisor_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || supervisor_address_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_supervisor_address() const {
  return _internal_has_supervisor_address();
}
inline const ::lm::message::Endpoint& RunWorkUnit::_internal_supervisor_address() const {
  const ::lm::message::Endpoint* p = supervisor_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::Endpoint*>(
      &::lm::message::_Endpoint_default_instance_);
}
inline const ::lm::message::Endpoint& RunWorkUnit::supervisor_address() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.supervisor_address)
  return _internal_supervisor_address();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_supervisor_address(
    ::lm::message::Endpoint* supervisor_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_address_);
  }
  supervisor_address_ = supervisor_address;
  if (supervisor_address) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.supervisor_address)
}
inline ::lm::message::Endpoint* RunWorkUnit::release_supervisor_address() {
  _has_bits_[0] &= ~0x00000002u;
  ::lm::message::Endpoint* temp = supervisor_address_;
  supervisor_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::Endpoint* RunWorkUnit::unsafe_arena_release_supervisor_address() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.supervisor_address)
  _has_bits_[0] &= ~0x00000002u;
  ::lm::message::Endpoint* temp = supervisor_address_;
  supervisor_address_ = nullptr;
  return temp;
}
inline ::lm::message::Endpoint* RunWorkUnit::_internal_mutable_supervisor_address() {
  _has_bits_[0] |= 0x00000002u;
  if (supervisor_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::Endpoint>(GetArena());
    supervisor_address_ = p;
  }
  return supervisor_address_;
}
inline ::lm::message::Endpoint* RunWorkUnit::mutable_supervisor_address() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.supervisor_address)
  return _internal_mutable_supervisor_address();
}
inline void RunWorkUnit::set_allocated_supervisor_address(::lm::message::Endpoint* supervisor_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_address_);
  }
  if (supervisor_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_address)->GetArena();
    if (message_arena != submessage_arena) {
      supervisor_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supervisor_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  supervisor_address_ = supervisor_address;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.supervisor_address)
}

// required uint64 max_steps = 30;
inline bool RunWorkUnit::_internal_has_max_steps() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RunWorkUnit::has_max_steps() const {
  return _internal_has_max_steps();
}
inline void RunWorkUnit::clear_max_steps() {
  max_steps_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RunWorkUnit::_internal_max_steps() const {
  return max_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RunWorkUnit::max_steps() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.max_steps)
  return _internal_max_steps();
}
inline void RunWorkUnit::_internal_set_max_steps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  max_steps_ = value;
}
inline void RunWorkUnit::set_max_steps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_steps(value);
  // @@protoc_insertion_point(field_set:lm.message.RunWorkUnit.max_steps)
}

// optional .lm.types.TrajectoryLimits trajectory_limits = 31;
inline bool RunWorkUnit::_internal_has_trajectory_limits() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || trajectory_limits_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_trajectory_limits() const {
  return _internal_has_trajectory_limits();
}
inline const ::lm::types::TrajectoryLimits& RunWorkUnit::_internal_trajectory_limits() const {
  const ::lm::types::TrajectoryLimits* p = trajectory_limits_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::TrajectoryLimits*>(
      &::lm::types::_TrajectoryLimits_default_instance_);
}
inline const ::lm::types::TrajectoryLimits& RunWorkUnit::trajectory_limits() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.trajectory_limits)
  return _internal_trajectory_limits();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_trajectory_limits(
    ::lm::types::TrajectoryLimits* trajectory_limits) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_limits_);
  }
  trajectory_limits_ = trajectory_limits;
  if (trajectory_limits) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.trajectory_limits)
}
inline ::lm::types::TrajectoryLimits* RunWorkUnit::release_trajectory_limits() {
  _has_bits_[0] &= ~0x00000004u;
  ::lm::types::TrajectoryLimits* temp = trajectory_limits_;
  trajectory_limits_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::TrajectoryLimits* RunWorkUnit::unsafe_arena_release_trajectory_limits() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.trajectory_limits)
  _has_bits_[0] &= ~0x00000004u;
  ::lm::types::TrajectoryLimits* temp = trajectory_limits_;
  trajectory_limits_ = nullptr;
  return temp;
}
inline ::lm::types::TrajectoryLimits* RunWorkUnit::_internal_mutable_trajectory_limits() {
  _has_bits_[0] |= 0x00000004u;
  if (trajectory_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::TrajectoryLimits>(GetArena());
    trajectory_limits_ = p;
  }
  return trajectory_limits_;
}
inline ::lm::types::TrajectoryLimits* RunWorkUnit::mutable_trajectory_limits() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.trajectory_limits)
  return _internal_mutable_trajectory_limits();
}
inline void RunWorkUnit::set_allocated_trajectory_limits(::lm::types::TrajectoryLimits* trajectory_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_limits_);
  }
  if (trajectory_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_limits)->GetArena();
    if (message_arena != submessage_arena) {
      trajectory_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_limits, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trajectory_limits_ = trajectory_limits;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.trajectory_limits)
}

// optional .lm.types.TrajectoryBarriers trajectory_barriers = 32;
inline bool RunWorkUnit::_internal_has_trajectory_barriers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || trajectory_barriers_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_trajectory_barriers() const {
  return _internal_has_trajectory_barriers();
}
inline const ::lm::types::TrajectoryBarriers& RunWorkUnit::_internal_trajectory_barriers() const {
  const ::lm::types::TrajectoryBarriers* p = trajectory_barriers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::TrajectoryBarriers*>(
      &::lm::types::_TrajectoryBarriers_default_instance_);
}
inline const ::lm::types::TrajectoryBarriers& RunWorkUnit::trajectory_barriers() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.trajectory_barriers)
  return _internal_trajectory_barriers();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_trajectory_barriers(
    ::lm::types::TrajectoryBarriers* trajectory_barriers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_barriers_);
  }
  trajectory_barriers_ = trajectory_barriers;
  if (trajectory_barriers) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.trajectory_barriers)
}
inline ::lm::types::TrajectoryBarriers* RunWorkUnit::release_trajectory_barriers() {
  _has_bits_[0] &= ~0x00000008u;
  ::lm::types::TrajectoryBarriers* temp = trajectory_barriers_;
  trajectory_barriers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::TrajectoryBarriers* RunWorkUnit::unsafe_arena_release_trajectory_barriers() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.trajectory_barriers)
  _has_bits_[0] &= ~0x00000008u;
  ::lm::types::TrajectoryBarriers* temp = trajectory_barriers_;
  trajectory_barriers_ = nullptr;
  return temp;
}
inline ::lm::types::TrajectoryBarriers* RunWorkUnit::_internal_mutable_trajectory_barriers() {
  _has_bits_[0] |= 0x00000008u;
  if (trajectory_barriers_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::TrajectoryBarriers>(GetArena());
    trajectory_barriers_ = p;
  }
  return trajectory_barriers_;
}
inline ::lm::types::TrajectoryBarriers* RunWorkUnit::mutable_trajectory_barriers() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.trajectory_barriers)
  return _internal_mutable_trajectory_barriers();
}
inline void RunWorkUnit::set_allocated_trajectory_barriers(::lm::types::TrajectoryBarriers* trajectory_barriers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_barriers_);
  }
  if (trajectory_barriers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_barriers)->GetArena();
    if (message_arena != submessage_arena) {
      trajectory_barriers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_barriers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  trajectory_barriers_ = trajectory_barriers;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.trajectory_barriers)
}

// optional .lm.input.ReactionModel reaction_model = 40;
inline bool RunWorkUnit::_internal_has_reaction_model() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || reaction_model_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_reaction_model() const {
  return _internal_has_reaction_model();
}
inline const ::lm::input::ReactionModel& RunWorkUnit::_internal_reaction_model() const {
  const ::lm::input::ReactionModel* p = reaction_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::ReactionModel*>(
      &::lm::input::_ReactionModel_default_instance_);
}
inline const ::lm::input::ReactionModel& RunWorkUnit::reaction_model() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.reaction_model)
  return _internal_reaction_model();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_reaction_model(
    ::lm::input::ReactionModel* reaction_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reaction_model_);
  }
  reaction_model_ = reaction_model;
  if (reaction_model) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.reaction_model)
}
inline ::lm::input::ReactionModel* RunWorkUnit::release_reaction_model() {
  _has_bits_[0] &= ~0x00000010u;
  ::lm::input::ReactionModel* temp = reaction_model_;
  reaction_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::ReactionModel* RunWorkUnit::unsafe_arena_release_reaction_model() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.reaction_model)
  _has_bits_[0] &= ~0x00000010u;
  ::lm::input::ReactionModel* temp = reaction_model_;
  reaction_model_ = nullptr;
  return temp;
}
inline ::lm::input::ReactionModel* RunWorkUnit::_internal_mutable_reaction_model() {
  _has_bits_[0] |= 0x00000010u;
  if (reaction_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::ReactionModel>(GetArena());
    reaction_model_ = p;
  }
  return reaction_model_;
}
inline ::lm::input::ReactionModel* RunWorkUnit::mutable_reaction_model() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.reaction_model)
  return _internal_mutable_reaction_model();
}
inline void RunWorkUnit::set_allocated_reaction_model(::lm::input::ReactionModel* reaction_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reaction_model_);
  }
  if (reaction_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reaction_model)->GetArena();
    if (message_arena != submessage_arena) {
      reaction_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reaction_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  reaction_model_ = reaction_model;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.reaction_model)
}

// optional .lm.input.DiffusionModel diffusion_model = 41;
inline bool RunWorkUnit::_internal_has_diffusion_model() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || diffusion_model_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_diffusion_model() const {
  return _internal_has_diffusion_model();
}
inline const ::lm::input::DiffusionModel& RunWorkUnit::_internal_diffusion_model() const {
  const ::lm::input::DiffusionModel* p = diffusion_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::DiffusionModel*>(
      &::lm::input::_DiffusionModel_default_instance_);
}
inline const ::lm::input::DiffusionModel& RunWorkUnit::diffusion_model() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.diffusion_model)
  return _internal_diffusion_model();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_diffusion_model(
    ::lm::input::DiffusionModel* diffusion_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_model_);
  }
  diffusion_model_ = diffusion_model;
  if (diffusion_model) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.diffusion_model)
}
inline ::lm::input::DiffusionModel* RunWorkUnit::release_diffusion_model() {
  _has_bits_[0] &= ~0x00000020u;
  ::lm::input::DiffusionModel* temp = diffusion_model_;
  diffusion_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::DiffusionModel* RunWorkUnit::unsafe_arena_release_diffusion_model() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.diffusion_model)
  _has_bits_[0] &= ~0x00000020u;
  ::lm::input::DiffusionModel* temp = diffusion_model_;
  diffusion_model_ = nullptr;
  return temp;
}
inline ::lm::input::DiffusionModel* RunWorkUnit::_internal_mutable_diffusion_model() {
  _has_bits_[0] |= 0x00000020u;
  if (diffusion_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::DiffusionModel>(GetArena());
    diffusion_model_ = p;
  }
  return diffusion_model_;
}
inline ::lm::input::DiffusionModel* RunWorkUnit::mutable_diffusion_model() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.diffusion_model)
  return _internal_mutable_diffusion_model();
}
inline void RunWorkUnit::set_allocated_diffusion_model(::lm::input::DiffusionModel* diffusion_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_model_);
  }
  if (diffusion_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_model)->GetArena();
    if (message_arena != submessage_arena) {
      diffusion_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffusion_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  diffusion_model_ = diffusion_model;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.diffusion_model)
}

// optional .lm.input.MicroenvironmentModel microenv_model = 42;
inline bool RunWorkUnit::_internal_has_microenv_model() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || microenv_model_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_microenv_model() const {
  return _internal_has_microenv_model();
}
inline const ::lm::input::MicroenvironmentModel& RunWorkUnit::_internal_microenv_model() const {
  const ::lm::input::MicroenvironmentModel* p = microenv_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::MicroenvironmentModel*>(
      &::lm::input::_MicroenvironmentModel_default_instance_);
}
inline const ::lm::input::MicroenvironmentModel& RunWorkUnit::microenv_model() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.microenv_model)
  return _internal_microenv_model();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_microenv_model(
    ::lm::input::MicroenvironmentModel* microenv_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(microenv_model_);
  }
  microenv_model_ = microenv_model;
  if (microenv_model) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.microenv_model)
}
inline ::lm::input::MicroenvironmentModel* RunWorkUnit::release_microenv_model() {
  _has_bits_[0] &= ~0x00000040u;
  ::lm::input::MicroenvironmentModel* temp = microenv_model_;
  microenv_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::MicroenvironmentModel* RunWorkUnit::unsafe_arena_release_microenv_model() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.microenv_model)
  _has_bits_[0] &= ~0x00000040u;
  ::lm::input::MicroenvironmentModel* temp = microenv_model_;
  microenv_model_ = nullptr;
  return temp;
}
inline ::lm::input::MicroenvironmentModel* RunWorkUnit::_internal_mutable_microenv_model() {
  _has_bits_[0] |= 0x00000040u;
  if (microenv_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::MicroenvironmentModel>(GetArena());
    microenv_model_ = p;
  }
  return microenv_model_;
}
inline ::lm::input::MicroenvironmentModel* RunWorkUnit::mutable_microenv_model() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.microenv_model)
  return _internal_mutable_microenv_model();
}
inline void RunWorkUnit::set_allocated_microenv_model(::lm::input::MicroenvironmentModel* microenv_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(microenv_model_);
  }
  if (microenv_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(microenv_model)->GetArena();
    if (message_arena != submessage_arena) {
      microenv_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, microenv_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  microenv_model_ = microenv_model;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.microenv_model)
}

// optional .lm.types.OrderParameters order_parameters = 50;
inline bool RunWorkUnit::_internal_has_order_parameters() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || order_parameters_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_order_parameters() const {
  return _internal_has_order_parameters();
}
inline const ::lm::types::OrderParameters& RunWorkUnit::_internal_order_parameters() const {
  const ::lm::types::OrderParameters* p = order_parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::OrderParameters*>(
      &::lm::types::_OrderParameters_default_instance_);
}
inline const ::lm::types::OrderParameters& RunWorkUnit::order_parameters() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.order_parameters)
  return _internal_order_parameters();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_order_parameters(
    ::lm::types::OrderParameters* order_parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameters_);
  }
  order_parameters_ = order_parameters;
  if (order_parameters) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.order_parameters)
}
inline ::lm::types::OrderParameters* RunWorkUnit::release_order_parameters() {
  _has_bits_[0] &= ~0x00000080u;
  ::lm::types::OrderParameters* temp = order_parameters_;
  order_parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::OrderParameters* RunWorkUnit::unsafe_arena_release_order_parameters() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.order_parameters)
  _has_bits_[0] &= ~0x00000080u;
  ::lm::types::OrderParameters* temp = order_parameters_;
  order_parameters_ = nullptr;
  return temp;
}
inline ::lm::types::OrderParameters* RunWorkUnit::_internal_mutable_order_parameters() {
  _has_bits_[0] |= 0x00000080u;
  if (order_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::OrderParameters>(GetArena());
    order_parameters_ = p;
  }
  return order_parameters_;
}
inline ::lm::types::OrderParameters* RunWorkUnit::mutable_order_parameters() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.order_parameters)
  return _internal_mutable_order_parameters();
}
inline void RunWorkUnit::set_allocated_order_parameters(::lm::types::OrderParameters* order_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameters_);
  }
  if (order_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameters)->GetArena();
    if (message_arena != submessage_arena) {
      order_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  order_parameters_ = order_parameters;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.order_parameters)
}

// optional .lm.input.OutputOptions output_options = 91;
inline bool RunWorkUnit::_internal_has_output_options() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || output_options_ != nullptr);
  return value;
}
inline bool RunWorkUnit::has_output_options() const {
  return _internal_has_output_options();
}
inline const ::lm::input::OutputOptions& RunWorkUnit::_internal_output_options() const {
  const ::lm::input::OutputOptions* p = output_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::OutputOptions*>(
      &::lm::input::_OutputOptions_default_instance_);
}
inline const ::lm::input::OutputOptions& RunWorkUnit::output_options() const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.output_options)
  return _internal_output_options();
}
inline void RunWorkUnit::unsafe_arena_set_allocated_output_options(
    ::lm::input::OutputOptions* output_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_options_);
  }
  output_options_ = output_options;
  if (output_options) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.RunWorkUnit.output_options)
}
inline ::lm::input::OutputOptions* RunWorkUnit::release_output_options() {
  _has_bits_[0] &= ~0x00000100u;
  ::lm::input::OutputOptions* temp = output_options_;
  output_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::OutputOptions* RunWorkUnit::unsafe_arena_release_output_options() {
  // @@protoc_insertion_point(field_release:lm.message.RunWorkUnit.output_options)
  _has_bits_[0] &= ~0x00000100u;
  ::lm::input::OutputOptions* temp = output_options_;
  output_options_ = nullptr;
  return temp;
}
inline ::lm::input::OutputOptions* RunWorkUnit::_internal_mutable_output_options() {
  _has_bits_[0] |= 0x00000100u;
  if (output_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::OutputOptions>(GetArena());
    output_options_ = p;
  }
  return output_options_;
}
inline ::lm::input::OutputOptions* RunWorkUnit::mutable_output_options() {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.output_options)
  return _internal_mutable_output_options();
}
inline void RunWorkUnit::set_allocated_output_options(::lm::input::OutputOptions* output_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_options_);
  }
  if (output_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_options)->GetArena();
    if (message_arena != submessage_arena) {
      output_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  output_options_ = output_options;
  // @@protoc_insertion_point(field_set_allocated:lm.message.RunWorkUnit.output_options)
}

// repeated .lm.message.WorkUnit part = 101;
inline int RunWorkUnit::_internal_part_size() const {
  return part_.size();
}
inline int RunWorkUnit::part_size() const {
  return _internal_part_size();
}
inline ::lm::message::WorkUnit* RunWorkUnit::mutable_part(int index) {
  // @@protoc_insertion_point(field_mutable:lm.message.RunWorkUnit.part)
  return part_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::WorkUnit >*
RunWorkUnit::mutable_part() {
  // @@protoc_insertion_point(field_mutable_list:lm.message.RunWorkUnit.part)
  return &part_;
}
inline const ::lm::message::WorkUnit& RunWorkUnit::_internal_part(int index) const {
  return part_.Get(index);
}
inline const ::lm::message::WorkUnit& RunWorkUnit::part(int index) const {
  // @@protoc_insertion_point(field_get:lm.message.RunWorkUnit.part)
  return _internal_part(index);
}
inline ::lm::message::WorkUnit* RunWorkUnit::_internal_add_part() {
  return part_.Add();
}
inline ::lm::message::WorkUnit* RunWorkUnit::add_part() {
  // @@protoc_insertion_point(field_add:lm.message.RunWorkUnit.part)
  return _internal_add_part();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::WorkUnit >&
RunWorkUnit::part() const {
  // @@protoc_insertion_point(field_list:lm.message.RunWorkUnit.part)
  return part_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fRunWorkUnit_2eproto
