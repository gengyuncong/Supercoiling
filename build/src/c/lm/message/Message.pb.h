// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/message/Endpoint.pb.h"
#include "lm/message/ResourcesAvailable.pb.h"
#include "lm/message/StartWorkUnitRunner.pb.h"
#include "lm/message/StartedWorkUnitRunner.pb.h"
#include "lm/message/StopWorkUnitRunner.pb.h"
#include "lm/message/StoppedWorkUnitRunner.pb.h"
#include "lm/message/RunWorkUnit.pb.h"
#include "lm/message/StartedWorkUnit.pb.h"
#include "lm/message/FinishedWorkUnit.pb.h"
#include "lm/message/StartOutputWriter.pb.h"
#include "lm/message/StartedOutputWriter.pb.h"
#include "lm/message/StopResourceController.pb.h"
#include "lm/message/ProcessAggregatedOutput.pb.h"
#include "lm/message/ProcessWorkUnitOutput.pb.h"
#include "lm/message/PingTarget.pb.h"
#include "lm/message/StartCheckpointSignaler.pb.h"
#include "lm/message/StartedCheckpointSignaler.pb.h"
#include "lm/message/PerformCheckpointing.pb.h"
#include "lm/message/FinishedCheckpointing.pb.h"
#include "lm/message/StartOutputPerformanceSignaler.pb.h"
#include "lm/message/StartedOutputPerformanceSignaler.pb.h"
#include "lm/message/PerformOutputPerformance.pb.h"
#include "lm/message/SupervisorStarted.pb.h"
#include "lm/message/SupervisorFinished.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fmessage_2fMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fMessage_2eproto;
namespace lm {
namespace message {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::message::Message* Arena::CreateMaybeMessage<::lm::message::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace message {

// ===================================================================

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.message.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.message.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fmessage_2fMessage_2eproto);
    return ::descriptor_table_lm_2fmessage_2fMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartWorkUnitRunnerFieldNumber = 11,
    kStopWorkUnitRunnerFieldNumber = 13,
    kSourceAddressFieldNumber = 1,
    kDestinationAddressFieldNumber = 2,
    kResourcesAvailableFieldNumber = 10,
    kStartedWorkUnitRunnerFieldNumber = 12,
    kStoppedWorkUnitRunnerFieldNumber = 14,
    kRunWorkUnitFieldNumber = 15,
    kStartedWorkUnitFieldNumber = 16,
    kFinishedWorkUnitFieldNumber = 17,
    kStartOutputWriterFieldNumber = 20,
    kStartedOutputWriterFieldNumber = 21,
    kStartCheckpointSignalerFieldNumber = 30,
    kStartedCheckpointSignalerFieldNumber = 31,
    kPerformCheckpointingFieldNumber = 32,
    kFinishedCheckpointingFieldNumber = 33,
    kStartOutputPerformanceSignalerFieldNumber = 40,
    kStartedOutputPerformanceSignalerFieldNumber = 41,
    kPerformOutputPerformanceFieldNumber = 42,
    kStopResourceControllerFieldNumber = 50,
    kSupervisorStartedFieldNumber = 61,
    kSupervisorFinishedFieldNumber = 62,
    kProcessWorkUnitOutputFieldNumber = 100,
    kProcessAggregatedOutputFieldNumber = 101,
    kPingTargetFieldNumber = 1000,
  };
  // repeated .lm.message.StartWorkUnitRunner start_work_unit_runner = 11;
  int start_work_unit_runner_size() const;
  private:
  int _internal_start_work_unit_runner_size() const;
  public:
  void clear_start_work_unit_runner();
  ::lm::message::StartWorkUnitRunner* mutable_start_work_unit_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StartWorkUnitRunner >*
      mutable_start_work_unit_runner();
  private:
  const ::lm::message::StartWorkUnitRunner& _internal_start_work_unit_runner(int index) const;
  ::lm::message::StartWorkUnitRunner* _internal_add_start_work_unit_runner();
  public:
  const ::lm::message::StartWorkUnitRunner& start_work_unit_runner(int index) const;
  ::lm::message::StartWorkUnitRunner* add_start_work_unit_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StartWorkUnitRunner >&
      start_work_unit_runner() const;

  // repeated .lm.message.StopWorkUnitRunner stop_work_unit_runner = 13;
  int stop_work_unit_runner_size() const;
  private:
  int _internal_stop_work_unit_runner_size() const;
  public:
  void clear_stop_work_unit_runner();
  ::lm::message::StopWorkUnitRunner* mutable_stop_work_unit_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StopWorkUnitRunner >*
      mutable_stop_work_unit_runner();
  private:
  const ::lm::message::StopWorkUnitRunner& _internal_stop_work_unit_runner(int index) const;
  ::lm::message::StopWorkUnitRunner* _internal_add_stop_work_unit_runner();
  public:
  const ::lm::message::StopWorkUnitRunner& stop_work_unit_runner(int index) const;
  ::lm::message::StopWorkUnitRunner* add_stop_work_unit_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StopWorkUnitRunner >&
      stop_work_unit_runner() const;

  // required .lm.message.Endpoint source_address = 1;
  bool has_source_address() const;
  private:
  bool _internal_has_source_address() const;
  public:
  void clear_source_address();
  const ::lm::message::Endpoint& source_address() const;
  ::lm::message::Endpoint* release_source_address();
  ::lm::message::Endpoint* mutable_source_address();
  void set_allocated_source_address(::lm::message::Endpoint* source_address);
  private:
  const ::lm::message::Endpoint& _internal_source_address() const;
  ::lm::message::Endpoint* _internal_mutable_source_address();
  public:
  void unsafe_arena_set_allocated_source_address(
      ::lm::message::Endpoint* source_address);
  ::lm::message::Endpoint* unsafe_arena_release_source_address();

  // required .lm.message.Endpoint destination_address = 2;
  bool has_destination_address() const;
  private:
  bool _internal_has_destination_address() const;
  public:
  void clear_destination_address();
  const ::lm::message::Endpoint& destination_address() const;
  ::lm::message::Endpoint* release_destination_address();
  ::lm::message::Endpoint* mutable_destination_address();
  void set_allocated_destination_address(::lm::message::Endpoint* destination_address);
  private:
  const ::lm::message::Endpoint& _internal_destination_address() const;
  ::lm::message::Endpoint* _internal_mutable_destination_address();
  public:
  void unsafe_arena_set_allocated_destination_address(
      ::lm::message::Endpoint* destination_address);
  ::lm::message::Endpoint* unsafe_arena_release_destination_address();

  // optional .lm.message.ResourcesAvailable resources_available = 10;
  bool has_resources_available() const;
  private:
  bool _internal_has_resources_available() const;
  public:
  void clear_resources_available();
  const ::lm::message::ResourcesAvailable& resources_available() const;
  ::lm::message::ResourcesAvailable* release_resources_available();
  ::lm::message::ResourcesAvailable* mutable_resources_available();
  void set_allocated_resources_available(::lm::message::ResourcesAvailable* resources_available);
  private:
  const ::lm::message::ResourcesAvailable& _internal_resources_available() const;
  ::lm::message::ResourcesAvailable* _internal_mutable_resources_available();
  public:
  void unsafe_arena_set_allocated_resources_available(
      ::lm::message::ResourcesAvailable* resources_available);
  ::lm::message::ResourcesAvailable* unsafe_arena_release_resources_available();

  // optional .lm.message.StartedWorkUnitRunner started_work_unit_runner = 12;
  bool has_started_work_unit_runner() const;
  private:
  bool _internal_has_started_work_unit_runner() const;
  public:
  void clear_started_work_unit_runner();
  const ::lm::message::StartedWorkUnitRunner& started_work_unit_runner() const;
  ::lm::message::StartedWorkUnitRunner* release_started_work_unit_runner();
  ::lm::message::StartedWorkUnitRunner* mutable_started_work_unit_runner();
  void set_allocated_started_work_unit_runner(::lm::message::StartedWorkUnitRunner* started_work_unit_runner);
  private:
  const ::lm::message::StartedWorkUnitRunner& _internal_started_work_unit_runner() const;
  ::lm::message::StartedWorkUnitRunner* _internal_mutable_started_work_unit_runner();
  public:
  void unsafe_arena_set_allocated_started_work_unit_runner(
      ::lm::message::StartedWorkUnitRunner* started_work_unit_runner);
  ::lm::message::StartedWorkUnitRunner* unsafe_arena_release_started_work_unit_runner();

  // optional .lm.message.StoppedWorkUnitRunner stopped_work_unit_runner = 14;
  bool has_stopped_work_unit_runner() const;
  private:
  bool _internal_has_stopped_work_unit_runner() const;
  public:
  void clear_stopped_work_unit_runner();
  const ::lm::message::StoppedWorkUnitRunner& stopped_work_unit_runner() const;
  ::lm::message::StoppedWorkUnitRunner* release_stopped_work_unit_runner();
  ::lm::message::StoppedWorkUnitRunner* mutable_stopped_work_unit_runner();
  void set_allocated_stopped_work_unit_runner(::lm::message::StoppedWorkUnitRunner* stopped_work_unit_runner);
  private:
  const ::lm::message::StoppedWorkUnitRunner& _internal_stopped_work_unit_runner() const;
  ::lm::message::StoppedWorkUnitRunner* _internal_mutable_stopped_work_unit_runner();
  public:
  void unsafe_arena_set_allocated_stopped_work_unit_runner(
      ::lm::message::StoppedWorkUnitRunner* stopped_work_unit_runner);
  ::lm::message::StoppedWorkUnitRunner* unsafe_arena_release_stopped_work_unit_runner();

  // optional .lm.message.RunWorkUnit run_work_unit = 15;
  bool has_run_work_unit() const;
  private:
  bool _internal_has_run_work_unit() const;
  public:
  void clear_run_work_unit();
  const ::lm::message::RunWorkUnit& run_work_unit() const;
  ::lm::message::RunWorkUnit* release_run_work_unit();
  ::lm::message::RunWorkUnit* mutable_run_work_unit();
  void set_allocated_run_work_unit(::lm::message::RunWorkUnit* run_work_unit);
  private:
  const ::lm::message::RunWorkUnit& _internal_run_work_unit() const;
  ::lm::message::RunWorkUnit* _internal_mutable_run_work_unit();
  public:
  void unsafe_arena_set_allocated_run_work_unit(
      ::lm::message::RunWorkUnit* run_work_unit);
  ::lm::message::RunWorkUnit* unsafe_arena_release_run_work_unit();

  // optional .lm.message.StartedWorkUnit started_work_unit = 16;
  bool has_started_work_unit() const;
  private:
  bool _internal_has_started_work_unit() const;
  public:
  void clear_started_work_unit();
  const ::lm::message::StartedWorkUnit& started_work_unit() const;
  ::lm::message::StartedWorkUnit* release_started_work_unit();
  ::lm::message::StartedWorkUnit* mutable_started_work_unit();
  void set_allocated_started_work_unit(::lm::message::StartedWorkUnit* started_work_unit);
  private:
  const ::lm::message::StartedWorkUnit& _internal_started_work_unit() const;
  ::lm::message::StartedWorkUnit* _internal_mutable_started_work_unit();
  public:
  void unsafe_arena_set_allocated_started_work_unit(
      ::lm::message::StartedWorkUnit* started_work_unit);
  ::lm::message::StartedWorkUnit* unsafe_arena_release_started_work_unit();

  // optional .lm.message.FinishedWorkUnit finished_work_unit = 17;
  bool has_finished_work_unit() const;
  private:
  bool _internal_has_finished_work_unit() const;
  public:
  void clear_finished_work_unit();
  const ::lm::message::FinishedWorkUnit& finished_work_unit() const;
  ::lm::message::FinishedWorkUnit* release_finished_work_unit();
  ::lm::message::FinishedWorkUnit* mutable_finished_work_unit();
  void set_allocated_finished_work_unit(::lm::message::FinishedWorkUnit* finished_work_unit);
  private:
  const ::lm::message::FinishedWorkUnit& _internal_finished_work_unit() const;
  ::lm::message::FinishedWorkUnit* _internal_mutable_finished_work_unit();
  public:
  void unsafe_arena_set_allocated_finished_work_unit(
      ::lm::message::FinishedWorkUnit* finished_work_unit);
  ::lm::message::FinishedWorkUnit* unsafe_arena_release_finished_work_unit();

  // optional .lm.message.StartOutputWriter start_output_writer = 20;
  bool has_start_output_writer() const;
  private:
  bool _internal_has_start_output_writer() const;
  public:
  void clear_start_output_writer();
  const ::lm::message::StartOutputWriter& start_output_writer() const;
  ::lm::message::StartOutputWriter* release_start_output_writer();
  ::lm::message::StartOutputWriter* mutable_start_output_writer();
  void set_allocated_start_output_writer(::lm::message::StartOutputWriter* start_output_writer);
  private:
  const ::lm::message::StartOutputWriter& _internal_start_output_writer() const;
  ::lm::message::StartOutputWriter* _internal_mutable_start_output_writer();
  public:
  void unsafe_arena_set_allocated_start_output_writer(
      ::lm::message::StartOutputWriter* start_output_writer);
  ::lm::message::StartOutputWriter* unsafe_arena_release_start_output_writer();

  // optional .lm.message.StartedOutputWriter started_output_writer = 21;
  bool has_started_output_writer() const;
  private:
  bool _internal_has_started_output_writer() const;
  public:
  void clear_started_output_writer();
  const ::lm::message::StartedOutputWriter& started_output_writer() const;
  ::lm::message::StartedOutputWriter* release_started_output_writer();
  ::lm::message::StartedOutputWriter* mutable_started_output_writer();
  void set_allocated_started_output_writer(::lm::message::StartedOutputWriter* started_output_writer);
  private:
  const ::lm::message::StartedOutputWriter& _internal_started_output_writer() const;
  ::lm::message::StartedOutputWriter* _internal_mutable_started_output_writer();
  public:
  void unsafe_arena_set_allocated_started_output_writer(
      ::lm::message::StartedOutputWriter* started_output_writer);
  ::lm::message::StartedOutputWriter* unsafe_arena_release_started_output_writer();

  // optional .lm.message.StartCheckpointSignaler start_checkpoint_signaler = 30;
  bool has_start_checkpoint_signaler() const;
  private:
  bool _internal_has_start_checkpoint_signaler() const;
  public:
  void clear_start_checkpoint_signaler();
  const ::lm::message::StartCheckpointSignaler& start_checkpoint_signaler() const;
  ::lm::message::StartCheckpointSignaler* release_start_checkpoint_signaler();
  ::lm::message::StartCheckpointSignaler* mutable_start_checkpoint_signaler();
  void set_allocated_start_checkpoint_signaler(::lm::message::StartCheckpointSignaler* start_checkpoint_signaler);
  private:
  const ::lm::message::StartCheckpointSignaler& _internal_start_checkpoint_signaler() const;
  ::lm::message::StartCheckpointSignaler* _internal_mutable_start_checkpoint_signaler();
  public:
  void unsafe_arena_set_allocated_start_checkpoint_signaler(
      ::lm::message::StartCheckpointSignaler* start_checkpoint_signaler);
  ::lm::message::StartCheckpointSignaler* unsafe_arena_release_start_checkpoint_signaler();

  // optional .lm.message.StartedCheckpointSignaler started_checkpoint_signaler = 31;
  bool has_started_checkpoint_signaler() const;
  private:
  bool _internal_has_started_checkpoint_signaler() const;
  public:
  void clear_started_checkpoint_signaler();
  const ::lm::message::StartedCheckpointSignaler& started_checkpoint_signaler() const;
  ::lm::message::StartedCheckpointSignaler* release_started_checkpoint_signaler();
  ::lm::message::StartedCheckpointSignaler* mutable_started_checkpoint_signaler();
  void set_allocated_started_checkpoint_signaler(::lm::message::StartedCheckpointSignaler* started_checkpoint_signaler);
  private:
  const ::lm::message::StartedCheckpointSignaler& _internal_started_checkpoint_signaler() const;
  ::lm::message::StartedCheckpointSignaler* _internal_mutable_started_checkpoint_signaler();
  public:
  void unsafe_arena_set_allocated_started_checkpoint_signaler(
      ::lm::message::StartedCheckpointSignaler* started_checkpoint_signaler);
  ::lm::message::StartedCheckpointSignaler* unsafe_arena_release_started_checkpoint_signaler();

  // optional .lm.message.PerformCheckpointing perform_checkpointing = 32;
  bool has_perform_checkpointing() const;
  private:
  bool _internal_has_perform_checkpointing() const;
  public:
  void clear_perform_checkpointing();
  const ::lm::message::PerformCheckpointing& perform_checkpointing() const;
  ::lm::message::PerformCheckpointing* release_perform_checkpointing();
  ::lm::message::PerformCheckpointing* mutable_perform_checkpointing();
  void set_allocated_perform_checkpointing(::lm::message::PerformCheckpointing* perform_checkpointing);
  private:
  const ::lm::message::PerformCheckpointing& _internal_perform_checkpointing() const;
  ::lm::message::PerformCheckpointing* _internal_mutable_perform_checkpointing();
  public:
  void unsafe_arena_set_allocated_perform_checkpointing(
      ::lm::message::PerformCheckpointing* perform_checkpointing);
  ::lm::message::PerformCheckpointing* unsafe_arena_release_perform_checkpointing();

  // optional .lm.message.FinishedCheckpointing finished_checkpointing = 33;
  bool has_finished_checkpointing() const;
  private:
  bool _internal_has_finished_checkpointing() const;
  public:
  void clear_finished_checkpointing();
  const ::lm::message::FinishedCheckpointing& finished_checkpointing() const;
  ::lm::message::FinishedCheckpointing* release_finished_checkpointing();
  ::lm::message::FinishedCheckpointing* mutable_finished_checkpointing();
  void set_allocated_finished_checkpointing(::lm::message::FinishedCheckpointing* finished_checkpointing);
  private:
  const ::lm::message::FinishedCheckpointing& _internal_finished_checkpointing() const;
  ::lm::message::FinishedCheckpointing* _internal_mutable_finished_checkpointing();
  public:
  void unsafe_arena_set_allocated_finished_checkpointing(
      ::lm::message::FinishedCheckpointing* finished_checkpointing);
  ::lm::message::FinishedCheckpointing* unsafe_arena_release_finished_checkpointing();

  // optional .lm.message.StartOutputPerformanceSignaler start_output_performance_signaler = 40;
  bool has_start_output_performance_signaler() const;
  private:
  bool _internal_has_start_output_performance_signaler() const;
  public:
  void clear_start_output_performance_signaler();
  const ::lm::message::StartOutputPerformanceSignaler& start_output_performance_signaler() const;
  ::lm::message::StartOutputPerformanceSignaler* release_start_output_performance_signaler();
  ::lm::message::StartOutputPerformanceSignaler* mutable_start_output_performance_signaler();
  void set_allocated_start_output_performance_signaler(::lm::message::StartOutputPerformanceSignaler* start_output_performance_signaler);
  private:
  const ::lm::message::StartOutputPerformanceSignaler& _internal_start_output_performance_signaler() const;
  ::lm::message::StartOutputPerformanceSignaler* _internal_mutable_start_output_performance_signaler();
  public:
  void unsafe_arena_set_allocated_start_output_performance_signaler(
      ::lm::message::StartOutputPerformanceSignaler* start_output_performance_signaler);
  ::lm::message::StartOutputPerformanceSignaler* unsafe_arena_release_start_output_performance_signaler();

  // optional .lm.message.StartedOutputPerformanceSignaler started_output_performance_signaler = 41;
  bool has_started_output_performance_signaler() const;
  private:
  bool _internal_has_started_output_performance_signaler() const;
  public:
  void clear_started_output_performance_signaler();
  const ::lm::message::StartedOutputPerformanceSignaler& started_output_performance_signaler() const;
  ::lm::message::StartedOutputPerformanceSignaler* release_started_output_performance_signaler();
  ::lm::message::StartedOutputPerformanceSignaler* mutable_started_output_performance_signaler();
  void set_allocated_started_output_performance_signaler(::lm::message::StartedOutputPerformanceSignaler* started_output_performance_signaler);
  private:
  const ::lm::message::StartedOutputPerformanceSignaler& _internal_started_output_performance_signaler() const;
  ::lm::message::StartedOutputPerformanceSignaler* _internal_mutable_started_output_performance_signaler();
  public:
  void unsafe_arena_set_allocated_started_output_performance_signaler(
      ::lm::message::StartedOutputPerformanceSignaler* started_output_performance_signaler);
  ::lm::message::StartedOutputPerformanceSignaler* unsafe_arena_release_started_output_performance_signaler();

  // optional .lm.message.PerformOutputPerformance perform_output_performance = 42;
  bool has_perform_output_performance() const;
  private:
  bool _internal_has_perform_output_performance() const;
  public:
  void clear_perform_output_performance();
  const ::lm::message::PerformOutputPerformance& perform_output_performance() const;
  ::lm::message::PerformOutputPerformance* release_perform_output_performance();
  ::lm::message::PerformOutputPerformance* mutable_perform_output_performance();
  void set_allocated_perform_output_performance(::lm::message::PerformOutputPerformance* perform_output_performance);
  private:
  const ::lm::message::PerformOutputPerformance& _internal_perform_output_performance() const;
  ::lm::message::PerformOutputPerformance* _internal_mutable_perform_output_performance();
  public:
  void unsafe_arena_set_allocated_perform_output_performance(
      ::lm::message::PerformOutputPerformance* perform_output_performance);
  ::lm::message::PerformOutputPerformance* unsafe_arena_release_perform_output_performance();

  // optional .lm.message.StopResourceController stop_resource_controller = 50;
  bool has_stop_resource_controller() const;
  private:
  bool _internal_has_stop_resource_controller() const;
  public:
  void clear_stop_resource_controller();
  const ::lm::message::StopResourceController& stop_resource_controller() const;
  ::lm::message::StopResourceController* release_stop_resource_controller();
  ::lm::message::StopResourceController* mutable_stop_resource_controller();
  void set_allocated_stop_resource_controller(::lm::message::StopResourceController* stop_resource_controller);
  private:
  const ::lm::message::StopResourceController& _internal_stop_resource_controller() const;
  ::lm::message::StopResourceController* _internal_mutable_stop_resource_controller();
  public:
  void unsafe_arena_set_allocated_stop_resource_controller(
      ::lm::message::StopResourceController* stop_resource_controller);
  ::lm::message::StopResourceController* unsafe_arena_release_stop_resource_controller();

  // optional .lm.message.SupervisorStarted supervisor_started = 61;
  bool has_supervisor_started() const;
  private:
  bool _internal_has_supervisor_started() const;
  public:
  void clear_supervisor_started();
  const ::lm::message::SupervisorStarted& supervisor_started() const;
  ::lm::message::SupervisorStarted* release_supervisor_started();
  ::lm::message::SupervisorStarted* mutable_supervisor_started();
  void set_allocated_supervisor_started(::lm::message::SupervisorStarted* supervisor_started);
  private:
  const ::lm::message::SupervisorStarted& _internal_supervisor_started() const;
  ::lm::message::SupervisorStarted* _internal_mutable_supervisor_started();
  public:
  void unsafe_arena_set_allocated_supervisor_started(
      ::lm::message::SupervisorStarted* supervisor_started);
  ::lm::message::SupervisorStarted* unsafe_arena_release_supervisor_started();

  // optional .lm.message.SupervisorFinished supervisor_finished = 62;
  bool has_supervisor_finished() const;
  private:
  bool _internal_has_supervisor_finished() const;
  public:
  void clear_supervisor_finished();
  const ::lm::message::SupervisorFinished& supervisor_finished() const;
  ::lm::message::SupervisorFinished* release_supervisor_finished();
  ::lm::message::SupervisorFinished* mutable_supervisor_finished();
  void set_allocated_supervisor_finished(::lm::message::SupervisorFinished* supervisor_finished);
  private:
  const ::lm::message::SupervisorFinished& _internal_supervisor_finished() const;
  ::lm::message::SupervisorFinished* _internal_mutable_supervisor_finished();
  public:
  void unsafe_arena_set_allocated_supervisor_finished(
      ::lm::message::SupervisorFinished* supervisor_finished);
  ::lm::message::SupervisorFinished* unsafe_arena_release_supervisor_finished();

  // optional .lm.message.ProcessWorkUnitOutput process_work_unit_output = 100;
  bool has_process_work_unit_output() const;
  private:
  bool _internal_has_process_work_unit_output() const;
  public:
  void clear_process_work_unit_output();
  const ::lm::message::ProcessWorkUnitOutput& process_work_unit_output() const;
  ::lm::message::ProcessWorkUnitOutput* release_process_work_unit_output();
  ::lm::message::ProcessWorkUnitOutput* mutable_process_work_unit_output();
  void set_allocated_process_work_unit_output(::lm::message::ProcessWorkUnitOutput* process_work_unit_output);
  private:
  const ::lm::message::ProcessWorkUnitOutput& _internal_process_work_unit_output() const;
  ::lm::message::ProcessWorkUnitOutput* _internal_mutable_process_work_unit_output();
  public:
  void unsafe_arena_set_allocated_process_work_unit_output(
      ::lm::message::ProcessWorkUnitOutput* process_work_unit_output);
  ::lm::message::ProcessWorkUnitOutput* unsafe_arena_release_process_work_unit_output();

  // optional .lm.message.ProcessAggregatedOutput process_aggregated_output = 101;
  bool has_process_aggregated_output() const;
  private:
  bool _internal_has_process_aggregated_output() const;
  public:
  void clear_process_aggregated_output();
  const ::lm::message::ProcessAggregatedOutput& process_aggregated_output() const;
  ::lm::message::ProcessAggregatedOutput* release_process_aggregated_output();
  ::lm::message::ProcessAggregatedOutput* mutable_process_aggregated_output();
  void set_allocated_process_aggregated_output(::lm::message::ProcessAggregatedOutput* process_aggregated_output);
  private:
  const ::lm::message::ProcessAggregatedOutput& _internal_process_aggregated_output() const;
  ::lm::message::ProcessAggregatedOutput* _internal_mutable_process_aggregated_output();
  public:
  void unsafe_arena_set_allocated_process_aggregated_output(
      ::lm::message::ProcessAggregatedOutput* process_aggregated_output);
  ::lm::message::ProcessAggregatedOutput* unsafe_arena_release_process_aggregated_output();

  // optional .lm.message.PingTarget ping_target = 1000;
  bool has_ping_target() const;
  private:
  bool _internal_has_ping_target() const;
  public:
  void clear_ping_target();
  const ::lm::message::PingTarget& ping_target() const;
  ::lm::message::PingTarget* release_ping_target();
  ::lm::message::PingTarget* mutable_ping_target();
  void set_allocated_ping_target(::lm::message::PingTarget* ping_target);
  private:
  const ::lm::message::PingTarget& _internal_ping_target() const;
  ::lm::message::PingTarget* _internal_mutable_ping_target();
  public:
  void unsafe_arena_set_allocated_ping_target(
      ::lm::message::PingTarget* ping_target);
  ::lm::message::PingTarget* unsafe_arena_release_ping_target();

  // @@protoc_insertion_point(class_scope:lm.message.Message)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StartWorkUnitRunner > start_work_unit_runner_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StopWorkUnitRunner > stop_work_unit_runner_;
  ::lm::message::Endpoint* source_address_;
  ::lm::message::Endpoint* destination_address_;
  ::lm::message::ResourcesAvailable* resources_available_;
  ::lm::message::StartedWorkUnitRunner* started_work_unit_runner_;
  ::lm::message::StoppedWorkUnitRunner* stopped_work_unit_runner_;
  ::lm::message::RunWorkUnit* run_work_unit_;
  ::lm::message::StartedWorkUnit* started_work_unit_;
  ::lm::message::FinishedWorkUnit* finished_work_unit_;
  ::lm::message::StartOutputWriter* start_output_writer_;
  ::lm::message::StartedOutputWriter* started_output_writer_;
  ::lm::message::StartCheckpointSignaler* start_checkpoint_signaler_;
  ::lm::message::StartedCheckpointSignaler* started_checkpoint_signaler_;
  ::lm::message::PerformCheckpointing* perform_checkpointing_;
  ::lm::message::FinishedCheckpointing* finished_checkpointing_;
  ::lm::message::StartOutputPerformanceSignaler* start_output_performance_signaler_;
  ::lm::message::StartedOutputPerformanceSignaler* started_output_performance_signaler_;
  ::lm::message::PerformOutputPerformance* perform_output_performance_;
  ::lm::message::StopResourceController* stop_resource_controller_;
  ::lm::message::SupervisorStarted* supervisor_started_;
  ::lm::message::SupervisorFinished* supervisor_finished_;
  ::lm::message::ProcessWorkUnitOutput* process_work_unit_output_;
  ::lm::message::ProcessAggregatedOutput* process_aggregated_output_;
  ::lm::message::PingTarget* ping_target_;
  friend struct ::TableStruct_lm_2fmessage_2fMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// required .lm.message.Endpoint source_address = 1;
inline bool Message::_internal_has_source_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || source_address_ != nullptr);
  return value;
}
inline bool Message::has_source_address() const {
  return _internal_has_source_address();
}
inline const ::lm::message::Endpoint& Message::_internal_source_address() const {
  const ::lm::message::Endpoint* p = source_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::Endpoint*>(
      &::lm::message::_Endpoint_default_instance_);
}
inline const ::lm::message::Endpoint& Message::source_address() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.source_address)
  return _internal_source_address();
}
inline void Message::unsafe_arena_set_allocated_source_address(
    ::lm::message::Endpoint* source_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_address_);
  }
  source_address_ = source_address;
  if (source_address) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.source_address)
}
inline ::lm::message::Endpoint* Message::release_source_address() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::message::Endpoint* temp = source_address_;
  source_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::Endpoint* Message::unsafe_arena_release_source_address() {
  // @@protoc_insertion_point(field_release:lm.message.Message.source_address)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::message::Endpoint* temp = source_address_;
  source_address_ = nullptr;
  return temp;
}
inline ::lm::message::Endpoint* Message::_internal_mutable_source_address() {
  _has_bits_[0] |= 0x00000001u;
  if (source_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::Endpoint>(GetArena());
    source_address_ = p;
  }
  return source_address_;
}
inline ::lm::message::Endpoint* Message::mutable_source_address() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.source_address)
  return _internal_mutable_source_address();
}
inline void Message::set_allocated_source_address(::lm::message::Endpoint* source_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_address_);
  }
  if (source_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_address)->GetArena();
    if (message_arena != submessage_arena) {
      source_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_address_ = source_address;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.source_address)
}

// required .lm.message.Endpoint destination_address = 2;
inline bool Message::_internal_has_destination_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || destination_address_ != nullptr);
  return value;
}
inline bool Message::has_destination_address() const {
  return _internal_has_destination_address();
}
inline const ::lm::message::Endpoint& Message::_internal_destination_address() const {
  const ::lm::message::Endpoint* p = destination_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::Endpoint*>(
      &::lm::message::_Endpoint_default_instance_);
}
inline const ::lm::message::Endpoint& Message::destination_address() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.destination_address)
  return _internal_destination_address();
}
inline void Message::unsafe_arena_set_allocated_destination_address(
    ::lm::message::Endpoint* destination_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_address_);
  }
  destination_address_ = destination_address;
  if (destination_address) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.destination_address)
}
inline ::lm::message::Endpoint* Message::release_destination_address() {
  _has_bits_[0] &= ~0x00000002u;
  ::lm::message::Endpoint* temp = destination_address_;
  destination_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::Endpoint* Message::unsafe_arena_release_destination_address() {
  // @@protoc_insertion_point(field_release:lm.message.Message.destination_address)
  _has_bits_[0] &= ~0x00000002u;
  ::lm::message::Endpoint* temp = destination_address_;
  destination_address_ = nullptr;
  return temp;
}
inline ::lm::message::Endpoint* Message::_internal_mutable_destination_address() {
  _has_bits_[0] |= 0x00000002u;
  if (destination_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::Endpoint>(GetArena());
    destination_address_ = p;
  }
  return destination_address_;
}
inline ::lm::message::Endpoint* Message::mutable_destination_address() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.destination_address)
  return _internal_mutable_destination_address();
}
inline void Message::set_allocated_destination_address(::lm::message::Endpoint* destination_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_address_);
  }
  if (destination_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_address)->GetArena();
    if (message_arena != submessage_arena) {
      destination_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_address_ = destination_address;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.destination_address)
}

// optional .lm.message.ResourcesAvailable resources_available = 10;
inline bool Message::_internal_has_resources_available() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || resources_available_ != nullptr);
  return value;
}
inline bool Message::has_resources_available() const {
  return _internal_has_resources_available();
}
inline const ::lm::message::ResourcesAvailable& Message::_internal_resources_available() const {
  const ::lm::message::ResourcesAvailable* p = resources_available_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::ResourcesAvailable*>(
      &::lm::message::_ResourcesAvailable_default_instance_);
}
inline const ::lm::message::ResourcesAvailable& Message::resources_available() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.resources_available)
  return _internal_resources_available();
}
inline void Message::unsafe_arena_set_allocated_resources_available(
    ::lm::message::ResourcesAvailable* resources_available) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_available_);
  }
  resources_available_ = resources_available;
  if (resources_available) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.resources_available)
}
inline ::lm::message::ResourcesAvailable* Message::release_resources_available() {
  _has_bits_[0] &= ~0x00000004u;
  ::lm::message::ResourcesAvailable* temp = resources_available_;
  resources_available_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::ResourcesAvailable* Message::unsafe_arena_release_resources_available() {
  // @@protoc_insertion_point(field_release:lm.message.Message.resources_available)
  _has_bits_[0] &= ~0x00000004u;
  ::lm::message::ResourcesAvailable* temp = resources_available_;
  resources_available_ = nullptr;
  return temp;
}
inline ::lm::message::ResourcesAvailable* Message::_internal_mutable_resources_available() {
  _has_bits_[0] |= 0x00000004u;
  if (resources_available_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::ResourcesAvailable>(GetArena());
    resources_available_ = p;
  }
  return resources_available_;
}
inline ::lm::message::ResourcesAvailable* Message::mutable_resources_available() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.resources_available)
  return _internal_mutable_resources_available();
}
inline void Message::set_allocated_resources_available(::lm::message::ResourcesAvailable* resources_available) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_available_);
  }
  if (resources_available) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_available)->GetArena();
    if (message_arena != submessage_arena) {
      resources_available = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resources_available, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resources_available_ = resources_available;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.resources_available)
}

// repeated .lm.message.StartWorkUnitRunner start_work_unit_runner = 11;
inline int Message::_internal_start_work_unit_runner_size() const {
  return start_work_unit_runner_.size();
}
inline int Message::start_work_unit_runner_size() const {
  return _internal_start_work_unit_runner_size();
}
inline ::lm::message::StartWorkUnitRunner* Message::mutable_start_work_unit_runner(int index) {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.start_work_unit_runner)
  return start_work_unit_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StartWorkUnitRunner >*
Message::mutable_start_work_unit_runner() {
  // @@protoc_insertion_point(field_mutable_list:lm.message.Message.start_work_unit_runner)
  return &start_work_unit_runner_;
}
inline const ::lm::message::StartWorkUnitRunner& Message::_internal_start_work_unit_runner(int index) const {
  return start_work_unit_runner_.Get(index);
}
inline const ::lm::message::StartWorkUnitRunner& Message::start_work_unit_runner(int index) const {
  // @@protoc_insertion_point(field_get:lm.message.Message.start_work_unit_runner)
  return _internal_start_work_unit_runner(index);
}
inline ::lm::message::StartWorkUnitRunner* Message::_internal_add_start_work_unit_runner() {
  return start_work_unit_runner_.Add();
}
inline ::lm::message::StartWorkUnitRunner* Message::add_start_work_unit_runner() {
  // @@protoc_insertion_point(field_add:lm.message.Message.start_work_unit_runner)
  return _internal_add_start_work_unit_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StartWorkUnitRunner >&
Message::start_work_unit_runner() const {
  // @@protoc_insertion_point(field_list:lm.message.Message.start_work_unit_runner)
  return start_work_unit_runner_;
}

// optional .lm.message.StartedWorkUnitRunner started_work_unit_runner = 12;
inline bool Message::_internal_has_started_work_unit_runner() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || started_work_unit_runner_ != nullptr);
  return value;
}
inline bool Message::has_started_work_unit_runner() const {
  return _internal_has_started_work_unit_runner();
}
inline const ::lm::message::StartedWorkUnitRunner& Message::_internal_started_work_unit_runner() const {
  const ::lm::message::StartedWorkUnitRunner* p = started_work_unit_runner_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartedWorkUnitRunner*>(
      &::lm::message::_StartedWorkUnitRunner_default_instance_);
}
inline const ::lm::message::StartedWorkUnitRunner& Message::started_work_unit_runner() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.started_work_unit_runner)
  return _internal_started_work_unit_runner();
}
inline void Message::unsafe_arena_set_allocated_started_work_unit_runner(
    ::lm::message::StartedWorkUnitRunner* started_work_unit_runner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_work_unit_runner_);
  }
  started_work_unit_runner_ = started_work_unit_runner;
  if (started_work_unit_runner) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.started_work_unit_runner)
}
inline ::lm::message::StartedWorkUnitRunner* Message::release_started_work_unit_runner() {
  _has_bits_[0] &= ~0x00000008u;
  ::lm::message::StartedWorkUnitRunner* temp = started_work_unit_runner_;
  started_work_unit_runner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartedWorkUnitRunner* Message::unsafe_arena_release_started_work_unit_runner() {
  // @@protoc_insertion_point(field_release:lm.message.Message.started_work_unit_runner)
  _has_bits_[0] &= ~0x00000008u;
  ::lm::message::StartedWorkUnitRunner* temp = started_work_unit_runner_;
  started_work_unit_runner_ = nullptr;
  return temp;
}
inline ::lm::message::StartedWorkUnitRunner* Message::_internal_mutable_started_work_unit_runner() {
  _has_bits_[0] |= 0x00000008u;
  if (started_work_unit_runner_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartedWorkUnitRunner>(GetArena());
    started_work_unit_runner_ = p;
  }
  return started_work_unit_runner_;
}
inline ::lm::message::StartedWorkUnitRunner* Message::mutable_started_work_unit_runner() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.started_work_unit_runner)
  return _internal_mutable_started_work_unit_runner();
}
inline void Message::set_allocated_started_work_unit_runner(::lm::message::StartedWorkUnitRunner* started_work_unit_runner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_work_unit_runner_);
  }
  if (started_work_unit_runner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_work_unit_runner)->GetArena();
    if (message_arena != submessage_arena) {
      started_work_unit_runner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_work_unit_runner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  started_work_unit_runner_ = started_work_unit_runner;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.started_work_unit_runner)
}

// repeated .lm.message.StopWorkUnitRunner stop_work_unit_runner = 13;
inline int Message::_internal_stop_work_unit_runner_size() const {
  return stop_work_unit_runner_.size();
}
inline int Message::stop_work_unit_runner_size() const {
  return _internal_stop_work_unit_runner_size();
}
inline ::lm::message::StopWorkUnitRunner* Message::mutable_stop_work_unit_runner(int index) {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.stop_work_unit_runner)
  return stop_work_unit_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StopWorkUnitRunner >*
Message::mutable_stop_work_unit_runner() {
  // @@protoc_insertion_point(field_mutable_list:lm.message.Message.stop_work_unit_runner)
  return &stop_work_unit_runner_;
}
inline const ::lm::message::StopWorkUnitRunner& Message::_internal_stop_work_unit_runner(int index) const {
  return stop_work_unit_runner_.Get(index);
}
inline const ::lm::message::StopWorkUnitRunner& Message::stop_work_unit_runner(int index) const {
  // @@protoc_insertion_point(field_get:lm.message.Message.stop_work_unit_runner)
  return _internal_stop_work_unit_runner(index);
}
inline ::lm::message::StopWorkUnitRunner* Message::_internal_add_stop_work_unit_runner() {
  return stop_work_unit_runner_.Add();
}
inline ::lm::message::StopWorkUnitRunner* Message::add_stop_work_unit_runner() {
  // @@protoc_insertion_point(field_add:lm.message.Message.stop_work_unit_runner)
  return _internal_add_stop_work_unit_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::message::StopWorkUnitRunner >&
Message::stop_work_unit_runner() const {
  // @@protoc_insertion_point(field_list:lm.message.Message.stop_work_unit_runner)
  return stop_work_unit_runner_;
}

// optional .lm.message.StoppedWorkUnitRunner stopped_work_unit_runner = 14;
inline bool Message::_internal_has_stopped_work_unit_runner() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || stopped_work_unit_runner_ != nullptr);
  return value;
}
inline bool Message::has_stopped_work_unit_runner() const {
  return _internal_has_stopped_work_unit_runner();
}
inline const ::lm::message::StoppedWorkUnitRunner& Message::_internal_stopped_work_unit_runner() const {
  const ::lm::message::StoppedWorkUnitRunner* p = stopped_work_unit_runner_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StoppedWorkUnitRunner*>(
      &::lm::message::_StoppedWorkUnitRunner_default_instance_);
}
inline const ::lm::message::StoppedWorkUnitRunner& Message::stopped_work_unit_runner() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.stopped_work_unit_runner)
  return _internal_stopped_work_unit_runner();
}
inline void Message::unsafe_arena_set_allocated_stopped_work_unit_runner(
    ::lm::message::StoppedWorkUnitRunner* stopped_work_unit_runner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopped_work_unit_runner_);
  }
  stopped_work_unit_runner_ = stopped_work_unit_runner;
  if (stopped_work_unit_runner) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.stopped_work_unit_runner)
}
inline ::lm::message::StoppedWorkUnitRunner* Message::release_stopped_work_unit_runner() {
  _has_bits_[0] &= ~0x00000010u;
  ::lm::message::StoppedWorkUnitRunner* temp = stopped_work_unit_runner_;
  stopped_work_unit_runner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StoppedWorkUnitRunner* Message::unsafe_arena_release_stopped_work_unit_runner() {
  // @@protoc_insertion_point(field_release:lm.message.Message.stopped_work_unit_runner)
  _has_bits_[0] &= ~0x00000010u;
  ::lm::message::StoppedWorkUnitRunner* temp = stopped_work_unit_runner_;
  stopped_work_unit_runner_ = nullptr;
  return temp;
}
inline ::lm::message::StoppedWorkUnitRunner* Message::_internal_mutable_stopped_work_unit_runner() {
  _has_bits_[0] |= 0x00000010u;
  if (stopped_work_unit_runner_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StoppedWorkUnitRunner>(GetArena());
    stopped_work_unit_runner_ = p;
  }
  return stopped_work_unit_runner_;
}
inline ::lm::message::StoppedWorkUnitRunner* Message::mutable_stopped_work_unit_runner() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.stopped_work_unit_runner)
  return _internal_mutable_stopped_work_unit_runner();
}
inline void Message::set_allocated_stopped_work_unit_runner(::lm::message::StoppedWorkUnitRunner* stopped_work_unit_runner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopped_work_unit_runner_);
  }
  if (stopped_work_unit_runner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopped_work_unit_runner)->GetArena();
    if (message_arena != submessage_arena) {
      stopped_work_unit_runner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopped_work_unit_runner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  stopped_work_unit_runner_ = stopped_work_unit_runner;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.stopped_work_unit_runner)
}

// optional .lm.message.RunWorkUnit run_work_unit = 15;
inline bool Message::_internal_has_run_work_unit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || run_work_unit_ != nullptr);
  return value;
}
inline bool Message::has_run_work_unit() const {
  return _internal_has_run_work_unit();
}
inline const ::lm::message::RunWorkUnit& Message::_internal_run_work_unit() const {
  const ::lm::message::RunWorkUnit* p = run_work_unit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::RunWorkUnit*>(
      &::lm::message::_RunWorkUnit_default_instance_);
}
inline const ::lm::message::RunWorkUnit& Message::run_work_unit() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.run_work_unit)
  return _internal_run_work_unit();
}
inline void Message::unsafe_arena_set_allocated_run_work_unit(
    ::lm::message::RunWorkUnit* run_work_unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_work_unit_);
  }
  run_work_unit_ = run_work_unit;
  if (run_work_unit) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.run_work_unit)
}
inline ::lm::message::RunWorkUnit* Message::release_run_work_unit() {
  _has_bits_[0] &= ~0x00000020u;
  ::lm::message::RunWorkUnit* temp = run_work_unit_;
  run_work_unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::RunWorkUnit* Message::unsafe_arena_release_run_work_unit() {
  // @@protoc_insertion_point(field_release:lm.message.Message.run_work_unit)
  _has_bits_[0] &= ~0x00000020u;
  ::lm::message::RunWorkUnit* temp = run_work_unit_;
  run_work_unit_ = nullptr;
  return temp;
}
inline ::lm::message::RunWorkUnit* Message::_internal_mutable_run_work_unit() {
  _has_bits_[0] |= 0x00000020u;
  if (run_work_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::RunWorkUnit>(GetArena());
    run_work_unit_ = p;
  }
  return run_work_unit_;
}
inline ::lm::message::RunWorkUnit* Message::mutable_run_work_unit() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.run_work_unit)
  return _internal_mutable_run_work_unit();
}
inline void Message::set_allocated_run_work_unit(::lm::message::RunWorkUnit* run_work_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_work_unit_);
  }
  if (run_work_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_work_unit)->GetArena();
    if (message_arena != submessage_arena) {
      run_work_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_work_unit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  run_work_unit_ = run_work_unit;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.run_work_unit)
}

// optional .lm.message.StartedWorkUnit started_work_unit = 16;
inline bool Message::_internal_has_started_work_unit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || started_work_unit_ != nullptr);
  return value;
}
inline bool Message::has_started_work_unit() const {
  return _internal_has_started_work_unit();
}
inline const ::lm::message::StartedWorkUnit& Message::_internal_started_work_unit() const {
  const ::lm::message::StartedWorkUnit* p = started_work_unit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartedWorkUnit*>(
      &::lm::message::_StartedWorkUnit_default_instance_);
}
inline const ::lm::message::StartedWorkUnit& Message::started_work_unit() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.started_work_unit)
  return _internal_started_work_unit();
}
inline void Message::unsafe_arena_set_allocated_started_work_unit(
    ::lm::message::StartedWorkUnit* started_work_unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_work_unit_);
  }
  started_work_unit_ = started_work_unit;
  if (started_work_unit) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.started_work_unit)
}
inline ::lm::message::StartedWorkUnit* Message::release_started_work_unit() {
  _has_bits_[0] &= ~0x00000040u;
  ::lm::message::StartedWorkUnit* temp = started_work_unit_;
  started_work_unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartedWorkUnit* Message::unsafe_arena_release_started_work_unit() {
  // @@protoc_insertion_point(field_release:lm.message.Message.started_work_unit)
  _has_bits_[0] &= ~0x00000040u;
  ::lm::message::StartedWorkUnit* temp = started_work_unit_;
  started_work_unit_ = nullptr;
  return temp;
}
inline ::lm::message::StartedWorkUnit* Message::_internal_mutable_started_work_unit() {
  _has_bits_[0] |= 0x00000040u;
  if (started_work_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartedWorkUnit>(GetArena());
    started_work_unit_ = p;
  }
  return started_work_unit_;
}
inline ::lm::message::StartedWorkUnit* Message::mutable_started_work_unit() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.started_work_unit)
  return _internal_mutable_started_work_unit();
}
inline void Message::set_allocated_started_work_unit(::lm::message::StartedWorkUnit* started_work_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_work_unit_);
  }
  if (started_work_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_work_unit)->GetArena();
    if (message_arena != submessage_arena) {
      started_work_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_work_unit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  started_work_unit_ = started_work_unit;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.started_work_unit)
}

// optional .lm.message.FinishedWorkUnit finished_work_unit = 17;
inline bool Message::_internal_has_finished_work_unit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || finished_work_unit_ != nullptr);
  return value;
}
inline bool Message::has_finished_work_unit() const {
  return _internal_has_finished_work_unit();
}
inline const ::lm::message::FinishedWorkUnit& Message::_internal_finished_work_unit() const {
  const ::lm::message::FinishedWorkUnit* p = finished_work_unit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::FinishedWorkUnit*>(
      &::lm::message::_FinishedWorkUnit_default_instance_);
}
inline const ::lm::message::FinishedWorkUnit& Message::finished_work_unit() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.finished_work_unit)
  return _internal_finished_work_unit();
}
inline void Message::unsafe_arena_set_allocated_finished_work_unit(
    ::lm::message::FinishedWorkUnit* finished_work_unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_work_unit_);
  }
  finished_work_unit_ = finished_work_unit;
  if (finished_work_unit) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.finished_work_unit)
}
inline ::lm::message::FinishedWorkUnit* Message::release_finished_work_unit() {
  _has_bits_[0] &= ~0x00000080u;
  ::lm::message::FinishedWorkUnit* temp = finished_work_unit_;
  finished_work_unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::FinishedWorkUnit* Message::unsafe_arena_release_finished_work_unit() {
  // @@protoc_insertion_point(field_release:lm.message.Message.finished_work_unit)
  _has_bits_[0] &= ~0x00000080u;
  ::lm::message::FinishedWorkUnit* temp = finished_work_unit_;
  finished_work_unit_ = nullptr;
  return temp;
}
inline ::lm::message::FinishedWorkUnit* Message::_internal_mutable_finished_work_unit() {
  _has_bits_[0] |= 0x00000080u;
  if (finished_work_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::FinishedWorkUnit>(GetArena());
    finished_work_unit_ = p;
  }
  return finished_work_unit_;
}
inline ::lm::message::FinishedWorkUnit* Message::mutable_finished_work_unit() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.finished_work_unit)
  return _internal_mutable_finished_work_unit();
}
inline void Message::set_allocated_finished_work_unit(::lm::message::FinishedWorkUnit* finished_work_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_work_unit_);
  }
  if (finished_work_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_work_unit)->GetArena();
    if (message_arena != submessage_arena) {
      finished_work_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finished_work_unit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  finished_work_unit_ = finished_work_unit;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.finished_work_unit)
}

// optional .lm.message.StartOutputWriter start_output_writer = 20;
inline bool Message::_internal_has_start_output_writer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || start_output_writer_ != nullptr);
  return value;
}
inline bool Message::has_start_output_writer() const {
  return _internal_has_start_output_writer();
}
inline const ::lm::message::StartOutputWriter& Message::_internal_start_output_writer() const {
  const ::lm::message::StartOutputWriter* p = start_output_writer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartOutputWriter*>(
      &::lm::message::_StartOutputWriter_default_instance_);
}
inline const ::lm::message::StartOutputWriter& Message::start_output_writer() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.start_output_writer)
  return _internal_start_output_writer();
}
inline void Message::unsafe_arena_set_allocated_start_output_writer(
    ::lm::message::StartOutputWriter* start_output_writer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_output_writer_);
  }
  start_output_writer_ = start_output_writer;
  if (start_output_writer) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.start_output_writer)
}
inline ::lm::message::StartOutputWriter* Message::release_start_output_writer() {
  _has_bits_[0] &= ~0x00000100u;
  ::lm::message::StartOutputWriter* temp = start_output_writer_;
  start_output_writer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartOutputWriter* Message::unsafe_arena_release_start_output_writer() {
  // @@protoc_insertion_point(field_release:lm.message.Message.start_output_writer)
  _has_bits_[0] &= ~0x00000100u;
  ::lm::message::StartOutputWriter* temp = start_output_writer_;
  start_output_writer_ = nullptr;
  return temp;
}
inline ::lm::message::StartOutputWriter* Message::_internal_mutable_start_output_writer() {
  _has_bits_[0] |= 0x00000100u;
  if (start_output_writer_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartOutputWriter>(GetArena());
    start_output_writer_ = p;
  }
  return start_output_writer_;
}
inline ::lm::message::StartOutputWriter* Message::mutable_start_output_writer() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.start_output_writer)
  return _internal_mutable_start_output_writer();
}
inline void Message::set_allocated_start_output_writer(::lm::message::StartOutputWriter* start_output_writer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_output_writer_);
  }
  if (start_output_writer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_output_writer)->GetArena();
    if (message_arena != submessage_arena) {
      start_output_writer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_output_writer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  start_output_writer_ = start_output_writer;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.start_output_writer)
}

// optional .lm.message.StartedOutputWriter started_output_writer = 21;
inline bool Message::_internal_has_started_output_writer() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || started_output_writer_ != nullptr);
  return value;
}
inline bool Message::has_started_output_writer() const {
  return _internal_has_started_output_writer();
}
inline const ::lm::message::StartedOutputWriter& Message::_internal_started_output_writer() const {
  const ::lm::message::StartedOutputWriter* p = started_output_writer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartedOutputWriter*>(
      &::lm::message::_StartedOutputWriter_default_instance_);
}
inline const ::lm::message::StartedOutputWriter& Message::started_output_writer() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.started_output_writer)
  return _internal_started_output_writer();
}
inline void Message::unsafe_arena_set_allocated_started_output_writer(
    ::lm::message::StartedOutputWriter* started_output_writer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_output_writer_);
  }
  started_output_writer_ = started_output_writer;
  if (started_output_writer) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.started_output_writer)
}
inline ::lm::message::StartedOutputWriter* Message::release_started_output_writer() {
  _has_bits_[0] &= ~0x00000200u;
  ::lm::message::StartedOutputWriter* temp = started_output_writer_;
  started_output_writer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartedOutputWriter* Message::unsafe_arena_release_started_output_writer() {
  // @@protoc_insertion_point(field_release:lm.message.Message.started_output_writer)
  _has_bits_[0] &= ~0x00000200u;
  ::lm::message::StartedOutputWriter* temp = started_output_writer_;
  started_output_writer_ = nullptr;
  return temp;
}
inline ::lm::message::StartedOutputWriter* Message::_internal_mutable_started_output_writer() {
  _has_bits_[0] |= 0x00000200u;
  if (started_output_writer_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartedOutputWriter>(GetArena());
    started_output_writer_ = p;
  }
  return started_output_writer_;
}
inline ::lm::message::StartedOutputWriter* Message::mutable_started_output_writer() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.started_output_writer)
  return _internal_mutable_started_output_writer();
}
inline void Message::set_allocated_started_output_writer(::lm::message::StartedOutputWriter* started_output_writer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_output_writer_);
  }
  if (started_output_writer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_output_writer)->GetArena();
    if (message_arena != submessage_arena) {
      started_output_writer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_output_writer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  started_output_writer_ = started_output_writer;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.started_output_writer)
}

// optional .lm.message.StartCheckpointSignaler start_checkpoint_signaler = 30;
inline bool Message::_internal_has_start_checkpoint_signaler() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || start_checkpoint_signaler_ != nullptr);
  return value;
}
inline bool Message::has_start_checkpoint_signaler() const {
  return _internal_has_start_checkpoint_signaler();
}
inline const ::lm::message::StartCheckpointSignaler& Message::_internal_start_checkpoint_signaler() const {
  const ::lm::message::StartCheckpointSignaler* p = start_checkpoint_signaler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartCheckpointSignaler*>(
      &::lm::message::_StartCheckpointSignaler_default_instance_);
}
inline const ::lm::message::StartCheckpointSignaler& Message::start_checkpoint_signaler() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.start_checkpoint_signaler)
  return _internal_start_checkpoint_signaler();
}
inline void Message::unsafe_arena_set_allocated_start_checkpoint_signaler(
    ::lm::message::StartCheckpointSignaler* start_checkpoint_signaler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_checkpoint_signaler_);
  }
  start_checkpoint_signaler_ = start_checkpoint_signaler;
  if (start_checkpoint_signaler) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.start_checkpoint_signaler)
}
inline ::lm::message::StartCheckpointSignaler* Message::release_start_checkpoint_signaler() {
  _has_bits_[0] &= ~0x00000400u;
  ::lm::message::StartCheckpointSignaler* temp = start_checkpoint_signaler_;
  start_checkpoint_signaler_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartCheckpointSignaler* Message::unsafe_arena_release_start_checkpoint_signaler() {
  // @@protoc_insertion_point(field_release:lm.message.Message.start_checkpoint_signaler)
  _has_bits_[0] &= ~0x00000400u;
  ::lm::message::StartCheckpointSignaler* temp = start_checkpoint_signaler_;
  start_checkpoint_signaler_ = nullptr;
  return temp;
}
inline ::lm::message::StartCheckpointSignaler* Message::_internal_mutable_start_checkpoint_signaler() {
  _has_bits_[0] |= 0x00000400u;
  if (start_checkpoint_signaler_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartCheckpointSignaler>(GetArena());
    start_checkpoint_signaler_ = p;
  }
  return start_checkpoint_signaler_;
}
inline ::lm::message::StartCheckpointSignaler* Message::mutable_start_checkpoint_signaler() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.start_checkpoint_signaler)
  return _internal_mutable_start_checkpoint_signaler();
}
inline void Message::set_allocated_start_checkpoint_signaler(::lm::message::StartCheckpointSignaler* start_checkpoint_signaler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_checkpoint_signaler_);
  }
  if (start_checkpoint_signaler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_checkpoint_signaler)->GetArena();
    if (message_arena != submessage_arena) {
      start_checkpoint_signaler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_checkpoint_signaler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  start_checkpoint_signaler_ = start_checkpoint_signaler;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.start_checkpoint_signaler)
}

// optional .lm.message.StartedCheckpointSignaler started_checkpoint_signaler = 31;
inline bool Message::_internal_has_started_checkpoint_signaler() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || started_checkpoint_signaler_ != nullptr);
  return value;
}
inline bool Message::has_started_checkpoint_signaler() const {
  return _internal_has_started_checkpoint_signaler();
}
inline const ::lm::message::StartedCheckpointSignaler& Message::_internal_started_checkpoint_signaler() const {
  const ::lm::message::StartedCheckpointSignaler* p = started_checkpoint_signaler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartedCheckpointSignaler*>(
      &::lm::message::_StartedCheckpointSignaler_default_instance_);
}
inline const ::lm::message::StartedCheckpointSignaler& Message::started_checkpoint_signaler() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.started_checkpoint_signaler)
  return _internal_started_checkpoint_signaler();
}
inline void Message::unsafe_arena_set_allocated_started_checkpoint_signaler(
    ::lm::message::StartedCheckpointSignaler* started_checkpoint_signaler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_checkpoint_signaler_);
  }
  started_checkpoint_signaler_ = started_checkpoint_signaler;
  if (started_checkpoint_signaler) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.started_checkpoint_signaler)
}
inline ::lm::message::StartedCheckpointSignaler* Message::release_started_checkpoint_signaler() {
  _has_bits_[0] &= ~0x00000800u;
  ::lm::message::StartedCheckpointSignaler* temp = started_checkpoint_signaler_;
  started_checkpoint_signaler_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartedCheckpointSignaler* Message::unsafe_arena_release_started_checkpoint_signaler() {
  // @@protoc_insertion_point(field_release:lm.message.Message.started_checkpoint_signaler)
  _has_bits_[0] &= ~0x00000800u;
  ::lm::message::StartedCheckpointSignaler* temp = started_checkpoint_signaler_;
  started_checkpoint_signaler_ = nullptr;
  return temp;
}
inline ::lm::message::StartedCheckpointSignaler* Message::_internal_mutable_started_checkpoint_signaler() {
  _has_bits_[0] |= 0x00000800u;
  if (started_checkpoint_signaler_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartedCheckpointSignaler>(GetArena());
    started_checkpoint_signaler_ = p;
  }
  return started_checkpoint_signaler_;
}
inline ::lm::message::StartedCheckpointSignaler* Message::mutable_started_checkpoint_signaler() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.started_checkpoint_signaler)
  return _internal_mutable_started_checkpoint_signaler();
}
inline void Message::set_allocated_started_checkpoint_signaler(::lm::message::StartedCheckpointSignaler* started_checkpoint_signaler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_checkpoint_signaler_);
  }
  if (started_checkpoint_signaler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_checkpoint_signaler)->GetArena();
    if (message_arena != submessage_arena) {
      started_checkpoint_signaler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_checkpoint_signaler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  started_checkpoint_signaler_ = started_checkpoint_signaler;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.started_checkpoint_signaler)
}

// optional .lm.message.PerformCheckpointing perform_checkpointing = 32;
inline bool Message::_internal_has_perform_checkpointing() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || perform_checkpointing_ != nullptr);
  return value;
}
inline bool Message::has_perform_checkpointing() const {
  return _internal_has_perform_checkpointing();
}
inline const ::lm::message::PerformCheckpointing& Message::_internal_perform_checkpointing() const {
  const ::lm::message::PerformCheckpointing* p = perform_checkpointing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::PerformCheckpointing*>(
      &::lm::message::_PerformCheckpointing_default_instance_);
}
inline const ::lm::message::PerformCheckpointing& Message::perform_checkpointing() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.perform_checkpointing)
  return _internal_perform_checkpointing();
}
inline void Message::unsafe_arena_set_allocated_perform_checkpointing(
    ::lm::message::PerformCheckpointing* perform_checkpointing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_checkpointing_);
  }
  perform_checkpointing_ = perform_checkpointing;
  if (perform_checkpointing) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.perform_checkpointing)
}
inline ::lm::message::PerformCheckpointing* Message::release_perform_checkpointing() {
  _has_bits_[0] &= ~0x00001000u;
  ::lm::message::PerformCheckpointing* temp = perform_checkpointing_;
  perform_checkpointing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::PerformCheckpointing* Message::unsafe_arena_release_perform_checkpointing() {
  // @@protoc_insertion_point(field_release:lm.message.Message.perform_checkpointing)
  _has_bits_[0] &= ~0x00001000u;
  ::lm::message::PerformCheckpointing* temp = perform_checkpointing_;
  perform_checkpointing_ = nullptr;
  return temp;
}
inline ::lm::message::PerformCheckpointing* Message::_internal_mutable_perform_checkpointing() {
  _has_bits_[0] |= 0x00001000u;
  if (perform_checkpointing_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::PerformCheckpointing>(GetArena());
    perform_checkpointing_ = p;
  }
  return perform_checkpointing_;
}
inline ::lm::message::PerformCheckpointing* Message::mutable_perform_checkpointing() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.perform_checkpointing)
  return _internal_mutable_perform_checkpointing();
}
inline void Message::set_allocated_perform_checkpointing(::lm::message::PerformCheckpointing* perform_checkpointing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_checkpointing_);
  }
  if (perform_checkpointing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_checkpointing)->GetArena();
    if (message_arena != submessage_arena) {
      perform_checkpointing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_checkpointing, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  perform_checkpointing_ = perform_checkpointing;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.perform_checkpointing)
}

// optional .lm.message.FinishedCheckpointing finished_checkpointing = 33;
inline bool Message::_internal_has_finished_checkpointing() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || finished_checkpointing_ != nullptr);
  return value;
}
inline bool Message::has_finished_checkpointing() const {
  return _internal_has_finished_checkpointing();
}
inline const ::lm::message::FinishedCheckpointing& Message::_internal_finished_checkpointing() const {
  const ::lm::message::FinishedCheckpointing* p = finished_checkpointing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::FinishedCheckpointing*>(
      &::lm::message::_FinishedCheckpointing_default_instance_);
}
inline const ::lm::message::FinishedCheckpointing& Message::finished_checkpointing() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.finished_checkpointing)
  return _internal_finished_checkpointing();
}
inline void Message::unsafe_arena_set_allocated_finished_checkpointing(
    ::lm::message::FinishedCheckpointing* finished_checkpointing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_checkpointing_);
  }
  finished_checkpointing_ = finished_checkpointing;
  if (finished_checkpointing) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.finished_checkpointing)
}
inline ::lm::message::FinishedCheckpointing* Message::release_finished_checkpointing() {
  _has_bits_[0] &= ~0x00002000u;
  ::lm::message::FinishedCheckpointing* temp = finished_checkpointing_;
  finished_checkpointing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::FinishedCheckpointing* Message::unsafe_arena_release_finished_checkpointing() {
  // @@protoc_insertion_point(field_release:lm.message.Message.finished_checkpointing)
  _has_bits_[0] &= ~0x00002000u;
  ::lm::message::FinishedCheckpointing* temp = finished_checkpointing_;
  finished_checkpointing_ = nullptr;
  return temp;
}
inline ::lm::message::FinishedCheckpointing* Message::_internal_mutable_finished_checkpointing() {
  _has_bits_[0] |= 0x00002000u;
  if (finished_checkpointing_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::FinishedCheckpointing>(GetArena());
    finished_checkpointing_ = p;
  }
  return finished_checkpointing_;
}
inline ::lm::message::FinishedCheckpointing* Message::mutable_finished_checkpointing() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.finished_checkpointing)
  return _internal_mutable_finished_checkpointing();
}
inline void Message::set_allocated_finished_checkpointing(::lm::message::FinishedCheckpointing* finished_checkpointing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_checkpointing_);
  }
  if (finished_checkpointing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finished_checkpointing)->GetArena();
    if (message_arena != submessage_arena) {
      finished_checkpointing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finished_checkpointing, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  finished_checkpointing_ = finished_checkpointing;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.finished_checkpointing)
}

// optional .lm.message.StartOutputPerformanceSignaler start_output_performance_signaler = 40;
inline bool Message::_internal_has_start_output_performance_signaler() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || start_output_performance_signaler_ != nullptr);
  return value;
}
inline bool Message::has_start_output_performance_signaler() const {
  return _internal_has_start_output_performance_signaler();
}
inline const ::lm::message::StartOutputPerformanceSignaler& Message::_internal_start_output_performance_signaler() const {
  const ::lm::message::StartOutputPerformanceSignaler* p = start_output_performance_signaler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartOutputPerformanceSignaler*>(
      &::lm::message::_StartOutputPerformanceSignaler_default_instance_);
}
inline const ::lm::message::StartOutputPerformanceSignaler& Message::start_output_performance_signaler() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.start_output_performance_signaler)
  return _internal_start_output_performance_signaler();
}
inline void Message::unsafe_arena_set_allocated_start_output_performance_signaler(
    ::lm::message::StartOutputPerformanceSignaler* start_output_performance_signaler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_output_performance_signaler_);
  }
  start_output_performance_signaler_ = start_output_performance_signaler;
  if (start_output_performance_signaler) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.start_output_performance_signaler)
}
inline ::lm::message::StartOutputPerformanceSignaler* Message::release_start_output_performance_signaler() {
  _has_bits_[0] &= ~0x00004000u;
  ::lm::message::StartOutputPerformanceSignaler* temp = start_output_performance_signaler_;
  start_output_performance_signaler_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartOutputPerformanceSignaler* Message::unsafe_arena_release_start_output_performance_signaler() {
  // @@protoc_insertion_point(field_release:lm.message.Message.start_output_performance_signaler)
  _has_bits_[0] &= ~0x00004000u;
  ::lm::message::StartOutputPerformanceSignaler* temp = start_output_performance_signaler_;
  start_output_performance_signaler_ = nullptr;
  return temp;
}
inline ::lm::message::StartOutputPerformanceSignaler* Message::_internal_mutable_start_output_performance_signaler() {
  _has_bits_[0] |= 0x00004000u;
  if (start_output_performance_signaler_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartOutputPerformanceSignaler>(GetArena());
    start_output_performance_signaler_ = p;
  }
  return start_output_performance_signaler_;
}
inline ::lm::message::StartOutputPerformanceSignaler* Message::mutable_start_output_performance_signaler() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.start_output_performance_signaler)
  return _internal_mutable_start_output_performance_signaler();
}
inline void Message::set_allocated_start_output_performance_signaler(::lm::message::StartOutputPerformanceSignaler* start_output_performance_signaler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_output_performance_signaler_);
  }
  if (start_output_performance_signaler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_output_performance_signaler)->GetArena();
    if (message_arena != submessage_arena) {
      start_output_performance_signaler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_output_performance_signaler, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  start_output_performance_signaler_ = start_output_performance_signaler;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.start_output_performance_signaler)
}

// optional .lm.message.StartedOutputPerformanceSignaler started_output_performance_signaler = 41;
inline bool Message::_internal_has_started_output_performance_signaler() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || started_output_performance_signaler_ != nullptr);
  return value;
}
inline bool Message::has_started_output_performance_signaler() const {
  return _internal_has_started_output_performance_signaler();
}
inline const ::lm::message::StartedOutputPerformanceSignaler& Message::_internal_started_output_performance_signaler() const {
  const ::lm::message::StartedOutputPerformanceSignaler* p = started_output_performance_signaler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StartedOutputPerformanceSignaler*>(
      &::lm::message::_StartedOutputPerformanceSignaler_default_instance_);
}
inline const ::lm::message::StartedOutputPerformanceSignaler& Message::started_output_performance_signaler() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.started_output_performance_signaler)
  return _internal_started_output_performance_signaler();
}
inline void Message::unsafe_arena_set_allocated_started_output_performance_signaler(
    ::lm::message::StartedOutputPerformanceSignaler* started_output_performance_signaler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_output_performance_signaler_);
  }
  started_output_performance_signaler_ = started_output_performance_signaler;
  if (started_output_performance_signaler) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.started_output_performance_signaler)
}
inline ::lm::message::StartedOutputPerformanceSignaler* Message::release_started_output_performance_signaler() {
  _has_bits_[0] &= ~0x00008000u;
  ::lm::message::StartedOutputPerformanceSignaler* temp = started_output_performance_signaler_;
  started_output_performance_signaler_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StartedOutputPerformanceSignaler* Message::unsafe_arena_release_started_output_performance_signaler() {
  // @@protoc_insertion_point(field_release:lm.message.Message.started_output_performance_signaler)
  _has_bits_[0] &= ~0x00008000u;
  ::lm::message::StartedOutputPerformanceSignaler* temp = started_output_performance_signaler_;
  started_output_performance_signaler_ = nullptr;
  return temp;
}
inline ::lm::message::StartedOutputPerformanceSignaler* Message::_internal_mutable_started_output_performance_signaler() {
  _has_bits_[0] |= 0x00008000u;
  if (started_output_performance_signaler_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StartedOutputPerformanceSignaler>(GetArena());
    started_output_performance_signaler_ = p;
  }
  return started_output_performance_signaler_;
}
inline ::lm::message::StartedOutputPerformanceSignaler* Message::mutable_started_output_performance_signaler() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.started_output_performance_signaler)
  return _internal_mutable_started_output_performance_signaler();
}
inline void Message::set_allocated_started_output_performance_signaler(::lm::message::StartedOutputPerformanceSignaler* started_output_performance_signaler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_output_performance_signaler_);
  }
  if (started_output_performance_signaler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_output_performance_signaler)->GetArena();
    if (message_arena != submessage_arena) {
      started_output_performance_signaler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_output_performance_signaler, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  started_output_performance_signaler_ = started_output_performance_signaler;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.started_output_performance_signaler)
}

// optional .lm.message.PerformOutputPerformance perform_output_performance = 42;
inline bool Message::_internal_has_perform_output_performance() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || perform_output_performance_ != nullptr);
  return value;
}
inline bool Message::has_perform_output_performance() const {
  return _internal_has_perform_output_performance();
}
inline const ::lm::message::PerformOutputPerformance& Message::_internal_perform_output_performance() const {
  const ::lm::message::PerformOutputPerformance* p = perform_output_performance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::PerformOutputPerformance*>(
      &::lm::message::_PerformOutputPerformance_default_instance_);
}
inline const ::lm::message::PerformOutputPerformance& Message::perform_output_performance() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.perform_output_performance)
  return _internal_perform_output_performance();
}
inline void Message::unsafe_arena_set_allocated_perform_output_performance(
    ::lm::message::PerformOutputPerformance* perform_output_performance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_output_performance_);
  }
  perform_output_performance_ = perform_output_performance;
  if (perform_output_performance) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.perform_output_performance)
}
inline ::lm::message::PerformOutputPerformance* Message::release_perform_output_performance() {
  _has_bits_[0] &= ~0x00010000u;
  ::lm::message::PerformOutputPerformance* temp = perform_output_performance_;
  perform_output_performance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::PerformOutputPerformance* Message::unsafe_arena_release_perform_output_performance() {
  // @@protoc_insertion_point(field_release:lm.message.Message.perform_output_performance)
  _has_bits_[0] &= ~0x00010000u;
  ::lm::message::PerformOutputPerformance* temp = perform_output_performance_;
  perform_output_performance_ = nullptr;
  return temp;
}
inline ::lm::message::PerformOutputPerformance* Message::_internal_mutable_perform_output_performance() {
  _has_bits_[0] |= 0x00010000u;
  if (perform_output_performance_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::PerformOutputPerformance>(GetArena());
    perform_output_performance_ = p;
  }
  return perform_output_performance_;
}
inline ::lm::message::PerformOutputPerformance* Message::mutable_perform_output_performance() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.perform_output_performance)
  return _internal_mutable_perform_output_performance();
}
inline void Message::set_allocated_perform_output_performance(::lm::message::PerformOutputPerformance* perform_output_performance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_output_performance_);
  }
  if (perform_output_performance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_output_performance)->GetArena();
    if (message_arena != submessage_arena) {
      perform_output_performance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_output_performance, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  perform_output_performance_ = perform_output_performance;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.perform_output_performance)
}

// optional .lm.message.StopResourceController stop_resource_controller = 50;
inline bool Message::_internal_has_stop_resource_controller() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || stop_resource_controller_ != nullptr);
  return value;
}
inline bool Message::has_stop_resource_controller() const {
  return _internal_has_stop_resource_controller();
}
inline const ::lm::message::StopResourceController& Message::_internal_stop_resource_controller() const {
  const ::lm::message::StopResourceController* p = stop_resource_controller_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::StopResourceController*>(
      &::lm::message::_StopResourceController_default_instance_);
}
inline const ::lm::message::StopResourceController& Message::stop_resource_controller() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.stop_resource_controller)
  return _internal_stop_resource_controller();
}
inline void Message::unsafe_arena_set_allocated_stop_resource_controller(
    ::lm::message::StopResourceController* stop_resource_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_resource_controller_);
  }
  stop_resource_controller_ = stop_resource_controller;
  if (stop_resource_controller) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.stop_resource_controller)
}
inline ::lm::message::StopResourceController* Message::release_stop_resource_controller() {
  _has_bits_[0] &= ~0x00020000u;
  ::lm::message::StopResourceController* temp = stop_resource_controller_;
  stop_resource_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::StopResourceController* Message::unsafe_arena_release_stop_resource_controller() {
  // @@protoc_insertion_point(field_release:lm.message.Message.stop_resource_controller)
  _has_bits_[0] &= ~0x00020000u;
  ::lm::message::StopResourceController* temp = stop_resource_controller_;
  stop_resource_controller_ = nullptr;
  return temp;
}
inline ::lm::message::StopResourceController* Message::_internal_mutable_stop_resource_controller() {
  _has_bits_[0] |= 0x00020000u;
  if (stop_resource_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::StopResourceController>(GetArena());
    stop_resource_controller_ = p;
  }
  return stop_resource_controller_;
}
inline ::lm::message::StopResourceController* Message::mutable_stop_resource_controller() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.stop_resource_controller)
  return _internal_mutable_stop_resource_controller();
}
inline void Message::set_allocated_stop_resource_controller(::lm::message::StopResourceController* stop_resource_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_resource_controller_);
  }
  if (stop_resource_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_resource_controller)->GetArena();
    if (message_arena != submessage_arena) {
      stop_resource_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_resource_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  stop_resource_controller_ = stop_resource_controller;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.stop_resource_controller)
}

// optional .lm.message.SupervisorStarted supervisor_started = 61;
inline bool Message::_internal_has_supervisor_started() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || supervisor_started_ != nullptr);
  return value;
}
inline bool Message::has_supervisor_started() const {
  return _internal_has_supervisor_started();
}
inline const ::lm::message::SupervisorStarted& Message::_internal_supervisor_started() const {
  const ::lm::message::SupervisorStarted* p = supervisor_started_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::SupervisorStarted*>(
      &::lm::message::_SupervisorStarted_default_instance_);
}
inline const ::lm::message::SupervisorStarted& Message::supervisor_started() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.supervisor_started)
  return _internal_supervisor_started();
}
inline void Message::unsafe_arena_set_allocated_supervisor_started(
    ::lm::message::SupervisorStarted* supervisor_started) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_started_);
  }
  supervisor_started_ = supervisor_started;
  if (supervisor_started) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.supervisor_started)
}
inline ::lm::message::SupervisorStarted* Message::release_supervisor_started() {
  _has_bits_[0] &= ~0x00040000u;
  ::lm::message::SupervisorStarted* temp = supervisor_started_;
  supervisor_started_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::SupervisorStarted* Message::unsafe_arena_release_supervisor_started() {
  // @@protoc_insertion_point(field_release:lm.message.Message.supervisor_started)
  _has_bits_[0] &= ~0x00040000u;
  ::lm::message::SupervisorStarted* temp = supervisor_started_;
  supervisor_started_ = nullptr;
  return temp;
}
inline ::lm::message::SupervisorStarted* Message::_internal_mutable_supervisor_started() {
  _has_bits_[0] |= 0x00040000u;
  if (supervisor_started_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::SupervisorStarted>(GetArena());
    supervisor_started_ = p;
  }
  return supervisor_started_;
}
inline ::lm::message::SupervisorStarted* Message::mutable_supervisor_started() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.supervisor_started)
  return _internal_mutable_supervisor_started();
}
inline void Message::set_allocated_supervisor_started(::lm::message::SupervisorStarted* supervisor_started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_started_);
  }
  if (supervisor_started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_started)->GetArena();
    if (message_arena != submessage_arena) {
      supervisor_started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supervisor_started, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  supervisor_started_ = supervisor_started;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.supervisor_started)
}

// optional .lm.message.SupervisorFinished supervisor_finished = 62;
inline bool Message::_internal_has_supervisor_finished() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || supervisor_finished_ != nullptr);
  return value;
}
inline bool Message::has_supervisor_finished() const {
  return _internal_has_supervisor_finished();
}
inline const ::lm::message::SupervisorFinished& Message::_internal_supervisor_finished() const {
  const ::lm::message::SupervisorFinished* p = supervisor_finished_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::SupervisorFinished*>(
      &::lm::message::_SupervisorFinished_default_instance_);
}
inline const ::lm::message::SupervisorFinished& Message::supervisor_finished() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.supervisor_finished)
  return _internal_supervisor_finished();
}
inline void Message::unsafe_arena_set_allocated_supervisor_finished(
    ::lm::message::SupervisorFinished* supervisor_finished) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_finished_);
  }
  supervisor_finished_ = supervisor_finished;
  if (supervisor_finished) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.supervisor_finished)
}
inline ::lm::message::SupervisorFinished* Message::release_supervisor_finished() {
  _has_bits_[0] &= ~0x00080000u;
  ::lm::message::SupervisorFinished* temp = supervisor_finished_;
  supervisor_finished_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::SupervisorFinished* Message::unsafe_arena_release_supervisor_finished() {
  // @@protoc_insertion_point(field_release:lm.message.Message.supervisor_finished)
  _has_bits_[0] &= ~0x00080000u;
  ::lm::message::SupervisorFinished* temp = supervisor_finished_;
  supervisor_finished_ = nullptr;
  return temp;
}
inline ::lm::message::SupervisorFinished* Message::_internal_mutable_supervisor_finished() {
  _has_bits_[0] |= 0x00080000u;
  if (supervisor_finished_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::SupervisorFinished>(GetArena());
    supervisor_finished_ = p;
  }
  return supervisor_finished_;
}
inline ::lm::message::SupervisorFinished* Message::mutable_supervisor_finished() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.supervisor_finished)
  return _internal_mutable_supervisor_finished();
}
inline void Message::set_allocated_supervisor_finished(::lm::message::SupervisorFinished* supervisor_finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_finished_);
  }
  if (supervisor_finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervisor_finished)->GetArena();
    if (message_arena != submessage_arena) {
      supervisor_finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supervisor_finished, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  supervisor_finished_ = supervisor_finished;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.supervisor_finished)
}

// optional .lm.message.ProcessWorkUnitOutput process_work_unit_output = 100;
inline bool Message::_internal_has_process_work_unit_output() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || process_work_unit_output_ != nullptr);
  return value;
}
inline bool Message::has_process_work_unit_output() const {
  return _internal_has_process_work_unit_output();
}
inline const ::lm::message::ProcessWorkUnitOutput& Message::_internal_process_work_unit_output() const {
  const ::lm::message::ProcessWorkUnitOutput* p = process_work_unit_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::ProcessWorkUnitOutput*>(
      &::lm::message::_ProcessWorkUnitOutput_default_instance_);
}
inline const ::lm::message::ProcessWorkUnitOutput& Message::process_work_unit_output() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.process_work_unit_output)
  return _internal_process_work_unit_output();
}
inline void Message::unsafe_arena_set_allocated_process_work_unit_output(
    ::lm::message::ProcessWorkUnitOutput* process_work_unit_output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_work_unit_output_);
  }
  process_work_unit_output_ = process_work_unit_output;
  if (process_work_unit_output) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.process_work_unit_output)
}
inline ::lm::message::ProcessWorkUnitOutput* Message::release_process_work_unit_output() {
  _has_bits_[0] &= ~0x00100000u;
  ::lm::message::ProcessWorkUnitOutput* temp = process_work_unit_output_;
  process_work_unit_output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::ProcessWorkUnitOutput* Message::unsafe_arena_release_process_work_unit_output() {
  // @@protoc_insertion_point(field_release:lm.message.Message.process_work_unit_output)
  _has_bits_[0] &= ~0x00100000u;
  ::lm::message::ProcessWorkUnitOutput* temp = process_work_unit_output_;
  process_work_unit_output_ = nullptr;
  return temp;
}
inline ::lm::message::ProcessWorkUnitOutput* Message::_internal_mutable_process_work_unit_output() {
  _has_bits_[0] |= 0x00100000u;
  if (process_work_unit_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::ProcessWorkUnitOutput>(GetArena());
    process_work_unit_output_ = p;
  }
  return process_work_unit_output_;
}
inline ::lm::message::ProcessWorkUnitOutput* Message::mutable_process_work_unit_output() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.process_work_unit_output)
  return _internal_mutable_process_work_unit_output();
}
inline void Message::set_allocated_process_work_unit_output(::lm::message::ProcessWorkUnitOutput* process_work_unit_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_work_unit_output_);
  }
  if (process_work_unit_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_work_unit_output)->GetArena();
    if (message_arena != submessage_arena) {
      process_work_unit_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_work_unit_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  process_work_unit_output_ = process_work_unit_output;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.process_work_unit_output)
}

// optional .lm.message.ProcessAggregatedOutput process_aggregated_output = 101;
inline bool Message::_internal_has_process_aggregated_output() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || process_aggregated_output_ != nullptr);
  return value;
}
inline bool Message::has_process_aggregated_output() const {
  return _internal_has_process_aggregated_output();
}
inline const ::lm::message::ProcessAggregatedOutput& Message::_internal_process_aggregated_output() const {
  const ::lm::message::ProcessAggregatedOutput* p = process_aggregated_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::ProcessAggregatedOutput*>(
      &::lm::message::_ProcessAggregatedOutput_default_instance_);
}
inline const ::lm::message::ProcessAggregatedOutput& Message::process_aggregated_output() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.process_aggregated_output)
  return _internal_process_aggregated_output();
}
inline void Message::unsafe_arena_set_allocated_process_aggregated_output(
    ::lm::message::ProcessAggregatedOutput* process_aggregated_output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_aggregated_output_);
  }
  process_aggregated_output_ = process_aggregated_output;
  if (process_aggregated_output) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.process_aggregated_output)
}
inline ::lm::message::ProcessAggregatedOutput* Message::release_process_aggregated_output() {
  _has_bits_[0] &= ~0x00200000u;
  ::lm::message::ProcessAggregatedOutput* temp = process_aggregated_output_;
  process_aggregated_output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::ProcessAggregatedOutput* Message::unsafe_arena_release_process_aggregated_output() {
  // @@protoc_insertion_point(field_release:lm.message.Message.process_aggregated_output)
  _has_bits_[0] &= ~0x00200000u;
  ::lm::message::ProcessAggregatedOutput* temp = process_aggregated_output_;
  process_aggregated_output_ = nullptr;
  return temp;
}
inline ::lm::message::ProcessAggregatedOutput* Message::_internal_mutable_process_aggregated_output() {
  _has_bits_[0] |= 0x00200000u;
  if (process_aggregated_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::ProcessAggregatedOutput>(GetArena());
    process_aggregated_output_ = p;
  }
  return process_aggregated_output_;
}
inline ::lm::message::ProcessAggregatedOutput* Message::mutable_process_aggregated_output() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.process_aggregated_output)
  return _internal_mutable_process_aggregated_output();
}
inline void Message::set_allocated_process_aggregated_output(::lm::message::ProcessAggregatedOutput* process_aggregated_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_aggregated_output_);
  }
  if (process_aggregated_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_aggregated_output)->GetArena();
    if (message_arena != submessage_arena) {
      process_aggregated_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_aggregated_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  process_aggregated_output_ = process_aggregated_output;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.process_aggregated_output)
}

// optional .lm.message.PingTarget ping_target = 1000;
inline bool Message::_internal_has_ping_target() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || ping_target_ != nullptr);
  return value;
}
inline bool Message::has_ping_target() const {
  return _internal_has_ping_target();
}
inline const ::lm::message::PingTarget& Message::_internal_ping_target() const {
  const ::lm::message::PingTarget* p = ping_target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::message::PingTarget*>(
      &::lm::message::_PingTarget_default_instance_);
}
inline const ::lm::message::PingTarget& Message::ping_target() const {
  // @@protoc_insertion_point(field_get:lm.message.Message.ping_target)
  return _internal_ping_target();
}
inline void Message::unsafe_arena_set_allocated_ping_target(
    ::lm::message::PingTarget* ping_target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_target_);
  }
  ping_target_ = ping_target;
  if (ping_target) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.message.Message.ping_target)
}
inline ::lm::message::PingTarget* Message::release_ping_target() {
  _has_bits_[0] &= ~0x00400000u;
  ::lm::message::PingTarget* temp = ping_target_;
  ping_target_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::message::PingTarget* Message::unsafe_arena_release_ping_target() {
  // @@protoc_insertion_point(field_release:lm.message.Message.ping_target)
  _has_bits_[0] &= ~0x00400000u;
  ::lm::message::PingTarget* temp = ping_target_;
  ping_target_ = nullptr;
  return temp;
}
inline ::lm::message::PingTarget* Message::_internal_mutable_ping_target() {
  _has_bits_[0] |= 0x00400000u;
  if (ping_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::message::PingTarget>(GetArena());
    ping_target_ = p;
  }
  return ping_target_;
}
inline ::lm::message::PingTarget* Message::mutable_ping_target() {
  // @@protoc_insertion_point(field_mutable:lm.message.Message.ping_target)
  return _internal_mutable_ping_target();
}
inline void Message::set_allocated_ping_target(::lm::message::PingTarget* ping_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_target_);
  }
  if (ping_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_target)->GetArena();
    if (message_arena != submessage_arena) {
      ping_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  ping_target_ = ping_target;
  // @@protoc_insertion_point(field_set_allocated:lm.message.Message.ping_target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fMessage_2eproto
