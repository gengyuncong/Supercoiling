// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/WorkUnitStatus.proto

#include "lm/message/WorkUnitStatus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fTrajectoryState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTrajectoryLimits_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto;
namespace lm {
namespace message {
class WorkUnitStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkUnitStatus> _instance;
} _WorkUnitStatus_default_instance_;
}  // namespace message
}  // namespace lm
static void InitDefaultsscc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::message::_WorkUnitStatus_default_instance_;
    new (ptr) ::lm::message::WorkUnitStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::message::WorkUnitStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto}, {
      &scc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto.base,
      &scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fmessage_2fWorkUnitStatus_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lm_2fmessage_2fWorkUnitStatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fmessage_2fWorkUnitStatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fmessage_2fWorkUnitStatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitStatus, status_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitStatus, error_message_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitStatus, final_state_),
  PROTOBUF_FIELD_OFFSET(::lm::message::WorkUnitStatus, limit_reached_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::lm::message::WorkUnitStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::message::_WorkUnitStatus_default_instance_),
};

const char descriptor_table_protodef_lm_2fmessage_2fWorkUnitStatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037lm/message/WorkUnitStatus.proto\022\nlm.me"
  "ssage\032\033lm/io/TrajectoryState.proto\032\037lm/t"
  "ypes/TrajectoryLimits.proto\"\377\001\n\016WorkUnit"
  "Status\0221\n\006status\030\001 \002(\0162!.lm.message.Work"
  "UnitStatus.Status\022\025\n\rerror_message\030\002 \001(\t"
  "\022+\n\013final_state\030\003 \002(\0132\026.lm.io.Trajectory"
  "State\0220\n\rlimit_reached\030\004 \001(\0132\031.lm.types."
  "TrajectoryLimit\"D\n\006Status\022\010\n\004NONE\020\000\022\022\n\016S"
  "TEPS_FINISHED\020\001\022\021\n\rLIMIT_REACHED\020\002\022\t\n\005ER"
  "ROR\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto_deps[2] = {
  &::descriptor_table_lm_2fio_2fTrajectoryState_2eproto,
  &::descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto_sccs[1] = {
  &scc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto = {
  false, false, descriptor_table_protodef_lm_2fmessage_2fWorkUnitStatus_2eproto, "lm/message/WorkUnitStatus.proto", 365,
  &descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto_once, descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto_sccs, descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_lm_2fmessage_2fWorkUnitStatus_2eproto::offsets,
  file_level_metadata_lm_2fmessage_2fWorkUnitStatus_2eproto, 1, file_level_enum_descriptors_lm_2fmessage_2fWorkUnitStatus_2eproto, file_level_service_descriptors_lm_2fmessage_2fWorkUnitStatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fmessage_2fWorkUnitStatus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto)), true);
namespace lm {
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkUnitStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto);
  return file_level_enum_descriptors_lm_2fmessage_2fWorkUnitStatus_2eproto[0];
}
bool WorkUnitStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WorkUnitStatus_Status WorkUnitStatus::NONE;
constexpr WorkUnitStatus_Status WorkUnitStatus::STEPS_FINISHED;
constexpr WorkUnitStatus_Status WorkUnitStatus::LIMIT_REACHED;
constexpr WorkUnitStatus_Status WorkUnitStatus::ERROR;
constexpr WorkUnitStatus_Status WorkUnitStatus::Status_MIN;
constexpr WorkUnitStatus_Status WorkUnitStatus::Status_MAX;
constexpr int WorkUnitStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void WorkUnitStatus::InitAsDefaultInstance() {
  ::lm::message::_WorkUnitStatus_default_instance_._instance.get_mutable()->final_state_ = const_cast< ::lm::io::TrajectoryState*>(
      ::lm::io::TrajectoryState::internal_default_instance());
  ::lm::message::_WorkUnitStatus_default_instance_._instance.get_mutable()->limit_reached_ = const_cast< ::lm::types::TrajectoryLimit*>(
      ::lm::types::TrajectoryLimit::internal_default_instance());
}
class WorkUnitStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkUnitStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::lm::io::TrajectoryState& final_state(const WorkUnitStatus* msg);
  static void set_has_final_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::lm::types::TrajectoryLimit& limit_reached(const WorkUnitStatus* msg);
  static void set_has_limit_reached(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000a) ^ 0x0000000a) != 0;
  }
};

const ::lm::io::TrajectoryState&
WorkUnitStatus::_Internal::final_state(const WorkUnitStatus* msg) {
  return *msg->final_state_;
}
const ::lm::types::TrajectoryLimit&
WorkUnitStatus::_Internal::limit_reached(const WorkUnitStatus* msg) {
  return *msg->limit_reached_;
}
void WorkUnitStatus::clear_final_state() {
  if (final_state_ != nullptr) final_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void WorkUnitStatus::clear_limit_reached() {
  if (limit_reached_ != nullptr) limit_reached_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
WorkUnitStatus::WorkUnitStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.message.WorkUnitStatus)
}
WorkUnitStatus::WorkUnitStatus(const WorkUnitStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_message()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  if (from._internal_has_final_state()) {
    final_state_ = new ::lm::io::TrajectoryState(*from.final_state_);
  } else {
    final_state_ = nullptr;
  }
  if (from._internal_has_limit_reached()) {
    limit_reached_ = new ::lm::types::TrajectoryLimit(*from.limit_reached_);
  } else {
    limit_reached_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:lm.message.WorkUnitStatus)
}

void WorkUnitStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&final_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&final_state_)) + sizeof(status_));
}

WorkUnitStatus::~WorkUnitStatus() {
  // @@protoc_insertion_point(destructor:lm.message.WorkUnitStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkUnitStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete final_state_;
  if (this != internal_default_instance()) delete limit_reached_;
}

void WorkUnitStatus::ArenaDtor(void* object) {
  WorkUnitStatus* _this = reinterpret_cast< WorkUnitStatus* >(object);
  (void)_this;
}
void WorkUnitStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkUnitStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkUnitStatus& WorkUnitStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto.base);
  return *internal_default_instance();
}


void WorkUnitStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.message.WorkUnitStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      error_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(final_state_ != nullptr);
      final_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(limit_reached_ != nullptr);
      limit_reached_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkUnitStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .lm.message.WorkUnitStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::message::WorkUnitStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::lm::message::WorkUnitStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lm.message.WorkUnitStatus.error_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.io.TrajectoryState final_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.TrajectoryLimit limit_reached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_reached(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkUnitStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.message.WorkUnitStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lm.message.WorkUnitStatus.Status status = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lm.message.WorkUnitStatus.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // required .lm.io.TrajectoryState final_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::final_state(this), target, stream);
  }

  // optional .lm.types.TrajectoryLimit limit_reached = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::limit_reached(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.message.WorkUnitStatus)
  return target;
}

size_t WorkUnitStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.message.WorkUnitStatus)
  size_t total_size = 0;

  if (_internal_has_final_state()) {
    // required .lm.io.TrajectoryState final_state = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *final_state_);
  }

  if (_internal_has_status()) {
    // required .lm.message.WorkUnitStatus.Status status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return total_size;
}
size_t WorkUnitStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.message.WorkUnitStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .lm.io.TrajectoryState final_state = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *final_state_);

    // required .lm.message.WorkUnitStatus.Status status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error_message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // optional .lm.types.TrajectoryLimit limit_reached = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_reached_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkUnitStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.message.WorkUnitStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkUnitStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkUnitStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.message.WorkUnitStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.message.WorkUnitStatus)
    MergeFrom(*source);
  }
}

void WorkUnitStatus::MergeFrom(const WorkUnitStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.message.WorkUnitStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_final_state()->::lm::io::TrajectoryState::MergeFrom(from._internal_final_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_limit_reached()->::lm::types::TrajectoryLimit::MergeFrom(from._internal_limit_reached());
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkUnitStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.message.WorkUnitStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkUnitStatus::CopyFrom(const WorkUnitStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.message.WorkUnitStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkUnitStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_final_state()) {
    if (!final_state_->IsInitialized()) return false;
  }
  if (_internal_has_limit_reached()) {
    if (!limit_reached_->IsInitialized()) return false;
  }
  return true;
}

void WorkUnitStatus::InternalSwap(WorkUnitStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkUnitStatus, status_)
      + sizeof(WorkUnitStatus::status_)
      - PROTOBUF_FIELD_OFFSET(WorkUnitStatus, final_state_)>(
          reinterpret_cast<char*>(&final_state_),
          reinterpret_cast<char*>(&other->final_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkUnitStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::message::WorkUnitStatus* Arena::CreateMaybeMessage< ::lm::message::WorkUnitStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::message::WorkUnitStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
