// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/FinishedWorkUnit.proto

#include "lm/message/FinishedWorkUnit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fWorkUnitStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto;
namespace lm {
namespace message {
class FinishedWorkUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinishedWorkUnit> _instance;
} _FinishedWorkUnit_default_instance_;
}  // namespace message
}  // namespace lm
static void InitDefaultsscc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::message::_FinishedWorkUnit_default_instance_;
    new (ptr) ::lm::message::FinishedWorkUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::message::FinishedWorkUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto}, {
      &scc_info_WorkUnitStatus_lm_2fmessage_2fWorkUnitStatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fmessage_2fFinishedWorkUnit_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fmessage_2fFinishedWorkUnit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fmessage_2fFinishedWorkUnit_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fmessage_2fFinishedWorkUnit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::message::FinishedWorkUnit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::message::FinishedWorkUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::message::FinishedWorkUnit, work_unit_id_),
  PROTOBUF_FIELD_OFFSET(::lm::message::FinishedWorkUnit, solver_type_),
  PROTOBUF_FIELD_OFFSET(::lm::message::FinishedWorkUnit, run_time_),
  PROTOBUF_FIELD_OFFSET(::lm::message::FinishedWorkUnit, steps_),
  PROTOBUF_FIELD_OFFSET(::lm::message::FinishedWorkUnit, part_status_),
  0,
  3,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::lm::message::FinishedWorkUnit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::message::_FinishedWorkUnit_default_instance_),
};

const char descriptor_table_protodef_lm_2fmessage_2fFinishedWorkUnit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!lm/message/FinishedWorkUnit.proto\022\nlm."
  "message\032\037lm/message/WorkUnitStatus.proto"
  "\032\031lm/types/SolverType.proto\"\245\001\n\020Finished"
  "WorkUnit\022\024\n\014work_unit_id\030\001 \002(\004\022)\n\013solver"
  "_type\030\002 \002(\0162\024.lm.types.SolverType\022\020\n\010run"
  "_time\030\004 \002(\001\022\r\n\005steps\030\005 \002(\004\022/\n\013part_statu"
  "s\030\006 \003(\0132\032.lm.message.WorkUnitStatus"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto_deps[2] = {
  &::descriptor_table_lm_2fmessage_2fWorkUnitStatus_2eproto,
  &::descriptor_table_lm_2ftypes_2fSolverType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto_sccs[1] = {
  &scc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto = {
  false, false, descriptor_table_protodef_lm_2fmessage_2fFinishedWorkUnit_2eproto, "lm/message/FinishedWorkUnit.proto", 275,
  &descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto_once, descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto_sccs, descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_lm_2fmessage_2fFinishedWorkUnit_2eproto::offsets,
  file_level_metadata_lm_2fmessage_2fFinishedWorkUnit_2eproto, 1, file_level_enum_descriptors_lm_2fmessage_2fFinishedWorkUnit_2eproto, file_level_service_descriptors_lm_2fmessage_2fFinishedWorkUnit_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fmessage_2fFinishedWorkUnit_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto)), true);
namespace lm {
namespace message {

// ===================================================================

void FinishedWorkUnit::InitAsDefaultInstance() {
}
class FinishedWorkUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<FinishedWorkUnit>()._has_bits_);
  static void set_has_work_unit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solver_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_run_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

void FinishedWorkUnit::clear_part_status() {
  part_status_.Clear();
}
FinishedWorkUnit::FinishedWorkUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  part_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.message.FinishedWorkUnit)
}
FinishedWorkUnit::FinishedWorkUnit(const FinishedWorkUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      part_status_(from.part_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&work_unit_id_, &from.work_unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&solver_type_) -
    reinterpret_cast<char*>(&work_unit_id_)) + sizeof(solver_type_));
  // @@protoc_insertion_point(copy_constructor:lm.message.FinishedWorkUnit)
}

void FinishedWorkUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto.base);
  ::memset(&work_unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&solver_type_) -
      reinterpret_cast<char*>(&work_unit_id_)) + sizeof(solver_type_));
}

FinishedWorkUnit::~FinishedWorkUnit() {
  // @@protoc_insertion_point(destructor:lm.message.FinishedWorkUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinishedWorkUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FinishedWorkUnit::ArenaDtor(void* object) {
  FinishedWorkUnit* _this = reinterpret_cast< FinishedWorkUnit* >(object);
  (void)_this;
}
void FinishedWorkUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinishedWorkUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinishedWorkUnit& FinishedWorkUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto.base);
  return *internal_default_instance();
}


void FinishedWorkUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.message.FinishedWorkUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  part_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&work_unit_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solver_type_) -
        reinterpret_cast<char*>(&work_unit_id_)) + sizeof(solver_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinishedWorkUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 work_unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_work_unit_id(&has_bits);
          work_unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.types.SolverType solver_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::SolverType_IsValid(val))) {
            _internal_set_solver_type(static_cast<::lm::types::SolverType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required double run_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_run_time(&has_bits);
          run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint64 steps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_steps(&has_bits);
          steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.message.WorkUnitStatus part_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_part_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinishedWorkUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.message.FinishedWorkUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 work_unit_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_work_unit_id(), target);
  }

  // required .lm.types.SolverType solver_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solver_type(), target);
  }

  // required double run_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_run_time(), target);
  }

  // required uint64 steps = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_steps(), target);
  }

  // repeated .lm.message.WorkUnitStatus part_status = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_part_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_part_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.message.FinishedWorkUnit)
  return target;
}

size_t FinishedWorkUnit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.message.FinishedWorkUnit)
  size_t total_size = 0;

  if (_internal_has_work_unit_id()) {
    // required uint64 work_unit_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_work_unit_id());
  }

  if (_internal_has_run_time()) {
    // required double run_time = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_steps()) {
    // required uint64 steps = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steps());
  }

  if (_internal_has_solver_type()) {
    // required .lm.types.SolverType solver_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solver_type());
  }

  return total_size;
}
size_t FinishedWorkUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.message.FinishedWorkUnit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 work_unit_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_work_unit_id());

    // required double run_time = 4;
    total_size += 1 + 8;

    // required uint64 steps = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steps());

    // required .lm.types.SolverType solver_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solver_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.message.WorkUnitStatus part_status = 6;
  total_size += 1UL * this->_internal_part_status_size();
  for (const auto& msg : this->part_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishedWorkUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.message.FinishedWorkUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishedWorkUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinishedWorkUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.message.FinishedWorkUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.message.FinishedWorkUnit)
    MergeFrom(*source);
  }
}

void FinishedWorkUnit::MergeFrom(const FinishedWorkUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.message.FinishedWorkUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  part_status_.MergeFrom(from.part_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      work_unit_id_ = from.work_unit_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      run_time_ = from.run_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      steps_ = from.steps_;
    }
    if (cached_has_bits & 0x00000008u) {
      solver_type_ = from.solver_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FinishedWorkUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.message.FinishedWorkUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishedWorkUnit::CopyFrom(const FinishedWorkUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.message.FinishedWorkUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishedWorkUnit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(part_status_)) return false;
  return true;
}

void FinishedWorkUnit::InternalSwap(FinishedWorkUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  part_status_.InternalSwap(&other->part_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FinishedWorkUnit, solver_type_)
      + sizeof(FinishedWorkUnit::solver_type_)
      - PROTOBUF_FIELD_OFFSET(FinishedWorkUnit, work_unit_id_)>(
          reinterpret_cast<char*>(&work_unit_id_),
          reinterpret_cast<char*>(&other->work_unit_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FinishedWorkUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::message::FinishedWorkUnit* Arena::CreateMaybeMessage< ::lm::message::FinishedWorkUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::message::FinishedWorkUnit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
