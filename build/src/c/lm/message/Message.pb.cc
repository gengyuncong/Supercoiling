// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/Message.proto

#include "lm/message/Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fEndpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Endpoint_lm_2fmessage_2fEndpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fFinishedCheckpointing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinishedCheckpointing_lm_2fmessage_2fFinishedCheckpointing_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fFinishedWorkUnit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fPerformCheckpointing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformCheckpointing_lm_2fmessage_2fPerformCheckpointing_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fPerformOutputPerformance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformOutputPerformance_lm_2fmessage_2fPerformOutputPerformance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fPingTarget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingTarget_lm_2fmessage_2fPingTarget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fProcessAggregatedOutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessAggregatedOutput_lm_2fmessage_2fProcessAggregatedOutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fProcessWorkUnitOutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessWorkUnitOutput_lm_2fmessage_2fProcessWorkUnitOutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fResourcesAvailable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fRunWorkUnit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartCheckpointSignaler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartCheckpointSignaler_lm_2fmessage_2fStartCheckpointSignaler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartOutputPerformanceSignaler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartOutputPerformanceSignaler_lm_2fmessage_2fStartOutputPerformanceSignaler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartOutputWriter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartOutputWriter_lm_2fmessage_2fStartOutputWriter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartWorkUnitRunner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartWorkUnitRunner_lm_2fmessage_2fStartWorkUnitRunner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartedCheckpointSignaler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartedCheckpointSignaler_lm_2fmessage_2fStartedCheckpointSignaler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartedOutputPerformanceSignaler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartedOutputPerformanceSignaler_lm_2fmessage_2fStartedOutputPerformanceSignaler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartedOutputWriter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartedOutputWriter_lm_2fmessage_2fStartedOutputWriter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartedWorkUnit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartedWorkUnit_lm_2fmessage_2fStartedWorkUnit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartedWorkUnitRunner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartedWorkUnitRunner_lm_2fmessage_2fStartedWorkUnitRunner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStopResourceController_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopResourceController_lm_2fmessage_2fStopResourceController_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStopWorkUnitRunner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopWorkUnitRunner_lm_2fmessage_2fStopWorkUnitRunner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStoppedWorkUnitRunner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoppedWorkUnitRunner_lm_2fmessage_2fStoppedWorkUnitRunner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fSupervisorFinished_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SupervisorFinished_lm_2fmessage_2fSupervisorFinished_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fSupervisorStarted_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SupervisorStarted_lm_2fmessage_2fSupervisorStarted_2eproto;
namespace lm {
namespace message {
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
}  // namespace message
}  // namespace lm
static void InitDefaultsscc_info_Message_lm_2fmessage_2fMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::message::_Message_default_instance_;
    new (ptr) ::lm::message::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::message::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<24> scc_info_Message_lm_2fmessage_2fMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 24, 0, InitDefaultsscc_info_Message_lm_2fmessage_2fMessage_2eproto}, {
      &scc_info_Endpoint_lm_2fmessage_2fEndpoint_2eproto.base,
      &scc_info_ResourcesAvailable_lm_2fmessage_2fResourcesAvailable_2eproto.base,
      &scc_info_StartWorkUnitRunner_lm_2fmessage_2fStartWorkUnitRunner_2eproto.base,
      &scc_info_StartedWorkUnitRunner_lm_2fmessage_2fStartedWorkUnitRunner_2eproto.base,
      &scc_info_StopWorkUnitRunner_lm_2fmessage_2fStopWorkUnitRunner_2eproto.base,
      &scc_info_StoppedWorkUnitRunner_lm_2fmessage_2fStoppedWorkUnitRunner_2eproto.base,
      &scc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto.base,
      &scc_info_StartedWorkUnit_lm_2fmessage_2fStartedWorkUnit_2eproto.base,
      &scc_info_FinishedWorkUnit_lm_2fmessage_2fFinishedWorkUnit_2eproto.base,
      &scc_info_StartOutputWriter_lm_2fmessage_2fStartOutputWriter_2eproto.base,
      &scc_info_StartedOutputWriter_lm_2fmessage_2fStartedOutputWriter_2eproto.base,
      &scc_info_StartCheckpointSignaler_lm_2fmessage_2fStartCheckpointSignaler_2eproto.base,
      &scc_info_StartedCheckpointSignaler_lm_2fmessage_2fStartedCheckpointSignaler_2eproto.base,
      &scc_info_PerformCheckpointing_lm_2fmessage_2fPerformCheckpointing_2eproto.base,
      &scc_info_FinishedCheckpointing_lm_2fmessage_2fFinishedCheckpointing_2eproto.base,
      &scc_info_StartOutputPerformanceSignaler_lm_2fmessage_2fStartOutputPerformanceSignaler_2eproto.base,
      &scc_info_StartedOutputPerformanceSignaler_lm_2fmessage_2fStartedOutputPerformanceSignaler_2eproto.base,
      &scc_info_PerformOutputPerformance_lm_2fmessage_2fPerformOutputPerformance_2eproto.base,
      &scc_info_StopResourceController_lm_2fmessage_2fStopResourceController_2eproto.base,
      &scc_info_SupervisorStarted_lm_2fmessage_2fSupervisorStarted_2eproto.base,
      &scc_info_SupervisorFinished_lm_2fmessage_2fSupervisorFinished_2eproto.base,
      &scc_info_ProcessWorkUnitOutput_lm_2fmessage_2fProcessWorkUnitOutput_2eproto.base,
      &scc_info_ProcessAggregatedOutput_lm_2fmessage_2fProcessAggregatedOutput_2eproto.base,
      &scc_info_PingTarget_lm_2fmessage_2fPingTarget_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fmessage_2fMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fmessage_2fMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fmessage_2fMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fmessage_2fMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, source_address_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, destination_address_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, resources_available_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, start_work_unit_runner_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, started_work_unit_runner_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, stop_work_unit_runner_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, stopped_work_unit_runner_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, run_work_unit_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, started_work_unit_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, finished_work_unit_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, start_output_writer_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, started_output_writer_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, start_checkpoint_signaler_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, started_checkpoint_signaler_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, perform_checkpointing_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, finished_checkpointing_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, start_output_performance_signaler_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, started_output_performance_signaler_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, perform_output_performance_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, stop_resource_controller_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, supervisor_started_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, supervisor_finished_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, process_work_unit_output_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, process_aggregated_output_),
  PROTOBUF_FIELD_OFFSET(::lm::message::Message, ping_target_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(::lm::message::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::message::_Message_default_instance_),
};

const char descriptor_table_protodef_lm_2fmessage_2fMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030lm/message/Message.proto\022\nlm.message\032\031"
  "lm/message/Endpoint.proto\032#lm/message/Re"
  "sourcesAvailable.proto\032$lm/message/Start"
  "WorkUnitRunner.proto\032&lm/message/Started"
  "WorkUnitRunner.proto\032#lm/message/StopWor"
  "kUnitRunner.proto\032&lm/message/StoppedWor"
  "kUnitRunner.proto\032\034lm/message/RunWorkUni"
  "t.proto\032 lm/message/StartedWorkUnit.prot"
  "o\032!lm/message/FinishedWorkUnit.proto\032\"lm"
  "/message/StartOutputWriter.proto\032$lm/mes"
  "sage/StartedOutputWriter.proto\032\'lm/messa"
  "ge/StopResourceController.proto\032(lm/mess"
  "age/ProcessAggregatedOutput.proto\032&lm/me"
  "ssage/ProcessWorkUnitOutput.proto\032\033lm/me"
  "ssage/PingTarget.proto\032(lm/message/Start"
  "CheckpointSignaler.proto\032*lm/message/Sta"
  "rtedCheckpointSignaler.proto\032%lm/message"
  "/PerformCheckpointing.proto\032&lm/message/"
  "FinishedCheckpointing.proto\032/lm/message/"
  "StartOutputPerformanceSignaler.proto\0321lm"
  "/message/StartedOutputPerformanceSignale"
  "r.proto\032)lm/message/PerformOutputPerform"
  "ance.proto\032\"lm/message/SupervisorStarted"
  ".proto\032#lm/message/SupervisorFinished.pr"
  "oto\"\334\014\n\007Message\022,\n\016source_address\030\001 \002(\0132"
  "\024.lm.message.Endpoint\0221\n\023destination_add"
  "ress\030\002 \002(\0132\024.lm.message.Endpoint\022;\n\023reso"
  "urces_available\030\n \001(\0132\036.lm.message.Resou"
  "rcesAvailable\022\?\n\026start_work_unit_runner\030"
  "\013 \003(\0132\037.lm.message.StartWorkUnitRunner\022C"
  "\n\030started_work_unit_runner\030\014 \001(\0132!.lm.me"
  "ssage.StartedWorkUnitRunner\022=\n\025stop_work"
  "_unit_runner\030\r \003(\0132\036.lm.message.StopWork"
  "UnitRunner\022C\n\030stopped_work_unit_runner\030\016"
  " \001(\0132!.lm.message.StoppedWorkUnitRunner\022"
  ".\n\rrun_work_unit\030\017 \001(\0132\027.lm.message.RunW"
  "orkUnit\0226\n\021started_work_unit\030\020 \001(\0132\033.lm."
  "message.StartedWorkUnit\0228\n\022finished_work"
  "_unit\030\021 \001(\0132\034.lm.message.FinishedWorkUni"
  "t\022:\n\023start_output_writer\030\024 \001(\0132\035.lm.mess"
  "age.StartOutputWriter\022>\n\025started_output_"
  "writer\030\025 \001(\0132\037.lm.message.StartedOutputW"
  "riter\022F\n\031start_checkpoint_signaler\030\036 \001(\013"
  "2#.lm.message.StartCheckpointSignaler\022J\n"
  "\033started_checkpoint_signaler\030\037 \001(\0132%.lm."
  "message.StartedCheckpointSignaler\022\?\n\025per"
  "form_checkpointing\030  \001(\0132 .lm.message.Pe"
  "rformCheckpointing\022A\n\026finished_checkpoin"
  "ting\030! \001(\0132!.lm.message.FinishedCheckpoi"
  "nting\022U\n!start_output_performance_signal"
  "er\030( \001(\0132*.lm.message.StartOutputPerform"
  "anceSignaler\022Y\n#started_output_performan"
  "ce_signaler\030) \001(\0132,.lm.message.StartedOu"
  "tputPerformanceSignaler\022H\n\032perform_outpu"
  "t_performance\030* \001(\0132$.lm.message.Perform"
  "OutputPerformance\022D\n\030stop_resource_contr"
  "oller\0302 \001(\0132\".lm.message.StopResourceCon"
  "troller\0229\n\022supervisor_started\030= \001(\0132\035.lm"
  ".message.SupervisorStarted\022;\n\023supervisor"
  "_finished\030> \001(\0132\036.lm.message.SupervisorF"
  "inished\022C\n\030process_work_unit_output\030d \001("
  "\0132!.lm.message.ProcessWorkUnitOutput\022F\n\031"
  "process_aggregated_output\030e \001(\0132#.lm.mes"
  "sage.ProcessAggregatedOutput\022,\n\013ping_tar"
  "get\030\350\007 \001(\0132\026.lm.message.PingTarget"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fmessage_2fMessage_2eproto_deps[24] = {
  &::descriptor_table_lm_2fmessage_2fEndpoint_2eproto,
  &::descriptor_table_lm_2fmessage_2fFinishedCheckpointing_2eproto,
  &::descriptor_table_lm_2fmessage_2fFinishedWorkUnit_2eproto,
  &::descriptor_table_lm_2fmessage_2fPerformCheckpointing_2eproto,
  &::descriptor_table_lm_2fmessage_2fPerformOutputPerformance_2eproto,
  &::descriptor_table_lm_2fmessage_2fPingTarget_2eproto,
  &::descriptor_table_lm_2fmessage_2fProcessAggregatedOutput_2eproto,
  &::descriptor_table_lm_2fmessage_2fProcessWorkUnitOutput_2eproto,
  &::descriptor_table_lm_2fmessage_2fResourcesAvailable_2eproto,
  &::descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartCheckpointSignaler_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartOutputPerformanceSignaler_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartOutputWriter_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartWorkUnitRunner_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartedCheckpointSignaler_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartedOutputPerformanceSignaler_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartedOutputWriter_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartedWorkUnit_2eproto,
  &::descriptor_table_lm_2fmessage_2fStartedWorkUnitRunner_2eproto,
  &::descriptor_table_lm_2fmessage_2fStopResourceController_2eproto,
  &::descriptor_table_lm_2fmessage_2fStopWorkUnitRunner_2eproto,
  &::descriptor_table_lm_2fmessage_2fStoppedWorkUnitRunner_2eproto,
  &::descriptor_table_lm_2fmessage_2fSupervisorFinished_2eproto,
  &::descriptor_table_lm_2fmessage_2fSupervisorStarted_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fmessage_2fMessage_2eproto_sccs[1] = {
  &scc_info_Message_lm_2fmessage_2fMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fmessage_2fMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fMessage_2eproto = {
  false, false, descriptor_table_protodef_lm_2fmessage_2fMessage_2eproto, "lm/message/Message.proto", 2594,
  &descriptor_table_lm_2fmessage_2fMessage_2eproto_once, descriptor_table_lm_2fmessage_2fMessage_2eproto_sccs, descriptor_table_lm_2fmessage_2fMessage_2eproto_deps, 1, 24,
  schemas, file_default_instances, TableStruct_lm_2fmessage_2fMessage_2eproto::offsets,
  file_level_metadata_lm_2fmessage_2fMessage_2eproto, 1, file_level_enum_descriptors_lm_2fmessage_2fMessage_2eproto, file_level_service_descriptors_lm_2fmessage_2fMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fmessage_2fMessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fmessage_2fMessage_2eproto)), true);
namespace lm {
namespace message {

// ===================================================================

void Message::InitAsDefaultInstance() {
  ::lm::message::_Message_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::lm::message::Endpoint*>(
      ::lm::message::Endpoint::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::lm::message::Endpoint*>(
      ::lm::message::Endpoint::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->resources_available_ = const_cast< ::lm::message::ResourcesAvailable*>(
      ::lm::message::ResourcesAvailable::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->started_work_unit_runner_ = const_cast< ::lm::message::StartedWorkUnitRunner*>(
      ::lm::message::StartedWorkUnitRunner::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->stopped_work_unit_runner_ = const_cast< ::lm::message::StoppedWorkUnitRunner*>(
      ::lm::message::StoppedWorkUnitRunner::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->run_work_unit_ = const_cast< ::lm::message::RunWorkUnit*>(
      ::lm::message::RunWorkUnit::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->started_work_unit_ = const_cast< ::lm::message::StartedWorkUnit*>(
      ::lm::message::StartedWorkUnit::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->finished_work_unit_ = const_cast< ::lm::message::FinishedWorkUnit*>(
      ::lm::message::FinishedWorkUnit::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->start_output_writer_ = const_cast< ::lm::message::StartOutputWriter*>(
      ::lm::message::StartOutputWriter::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->started_output_writer_ = const_cast< ::lm::message::StartedOutputWriter*>(
      ::lm::message::StartedOutputWriter::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->start_checkpoint_signaler_ = const_cast< ::lm::message::StartCheckpointSignaler*>(
      ::lm::message::StartCheckpointSignaler::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->started_checkpoint_signaler_ = const_cast< ::lm::message::StartedCheckpointSignaler*>(
      ::lm::message::StartedCheckpointSignaler::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->perform_checkpointing_ = const_cast< ::lm::message::PerformCheckpointing*>(
      ::lm::message::PerformCheckpointing::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->finished_checkpointing_ = const_cast< ::lm::message::FinishedCheckpointing*>(
      ::lm::message::FinishedCheckpointing::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->start_output_performance_signaler_ = const_cast< ::lm::message::StartOutputPerformanceSignaler*>(
      ::lm::message::StartOutputPerformanceSignaler::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->started_output_performance_signaler_ = const_cast< ::lm::message::StartedOutputPerformanceSignaler*>(
      ::lm::message::StartedOutputPerformanceSignaler::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->perform_output_performance_ = const_cast< ::lm::message::PerformOutputPerformance*>(
      ::lm::message::PerformOutputPerformance::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->stop_resource_controller_ = const_cast< ::lm::message::StopResourceController*>(
      ::lm::message::StopResourceController::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->supervisor_started_ = const_cast< ::lm::message::SupervisorStarted*>(
      ::lm::message::SupervisorStarted::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->supervisor_finished_ = const_cast< ::lm::message::SupervisorFinished*>(
      ::lm::message::SupervisorFinished::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->process_work_unit_output_ = const_cast< ::lm::message::ProcessWorkUnitOutput*>(
      ::lm::message::ProcessWorkUnitOutput::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->process_aggregated_output_ = const_cast< ::lm::message::ProcessAggregatedOutput*>(
      ::lm::message::ProcessAggregatedOutput::internal_default_instance());
  ::lm::message::_Message_default_instance_._instance.get_mutable()->ping_target_ = const_cast< ::lm::message::PingTarget*>(
      ::lm::message::PingTarget::internal_default_instance());
}
class Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Message>()._has_bits_);
  static const ::lm::message::Endpoint& source_address(const Message* msg);
  static void set_has_source_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::lm::message::Endpoint& destination_address(const Message* msg);
  static void set_has_destination_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::lm::message::ResourcesAvailable& resources_available(const Message* msg);
  static void set_has_resources_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::lm::message::StartedWorkUnitRunner& started_work_unit_runner(const Message* msg);
  static void set_has_started_work_unit_runner(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::lm::message::StoppedWorkUnitRunner& stopped_work_unit_runner(const Message* msg);
  static void set_has_stopped_work_unit_runner(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::lm::message::RunWorkUnit& run_work_unit(const Message* msg);
  static void set_has_run_work_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::lm::message::StartedWorkUnit& started_work_unit(const Message* msg);
  static void set_has_started_work_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::lm::message::FinishedWorkUnit& finished_work_unit(const Message* msg);
  static void set_has_finished_work_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::lm::message::StartOutputWriter& start_output_writer(const Message* msg);
  static void set_has_start_output_writer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::lm::message::StartedOutputWriter& started_output_writer(const Message* msg);
  static void set_has_started_output_writer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::lm::message::StartCheckpointSignaler& start_checkpoint_signaler(const Message* msg);
  static void set_has_start_checkpoint_signaler(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::lm::message::StartedCheckpointSignaler& started_checkpoint_signaler(const Message* msg);
  static void set_has_started_checkpoint_signaler(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::lm::message::PerformCheckpointing& perform_checkpointing(const Message* msg);
  static void set_has_perform_checkpointing(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::lm::message::FinishedCheckpointing& finished_checkpointing(const Message* msg);
  static void set_has_finished_checkpointing(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::lm::message::StartOutputPerformanceSignaler& start_output_performance_signaler(const Message* msg);
  static void set_has_start_output_performance_signaler(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::lm::message::StartedOutputPerformanceSignaler& started_output_performance_signaler(const Message* msg);
  static void set_has_started_output_performance_signaler(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::lm::message::PerformOutputPerformance& perform_output_performance(const Message* msg);
  static void set_has_perform_output_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::lm::message::StopResourceController& stop_resource_controller(const Message* msg);
  static void set_has_stop_resource_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::lm::message::SupervisorStarted& supervisor_started(const Message* msg);
  static void set_has_supervisor_started(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::lm::message::SupervisorFinished& supervisor_finished(const Message* msg);
  static void set_has_supervisor_finished(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::lm::message::ProcessWorkUnitOutput& process_work_unit_output(const Message* msg);
  static void set_has_process_work_unit_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::lm::message::ProcessAggregatedOutput& process_aggregated_output(const Message* msg);
  static void set_has_process_aggregated_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::lm::message::PingTarget& ping_target(const Message* msg);
  static void set_has_ping_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::lm::message::Endpoint&
Message::_Internal::source_address(const Message* msg) {
  return *msg->source_address_;
}
const ::lm::message::Endpoint&
Message::_Internal::destination_address(const Message* msg) {
  return *msg->destination_address_;
}
const ::lm::message::ResourcesAvailable&
Message::_Internal::resources_available(const Message* msg) {
  return *msg->resources_available_;
}
const ::lm::message::StartedWorkUnitRunner&
Message::_Internal::started_work_unit_runner(const Message* msg) {
  return *msg->started_work_unit_runner_;
}
const ::lm::message::StoppedWorkUnitRunner&
Message::_Internal::stopped_work_unit_runner(const Message* msg) {
  return *msg->stopped_work_unit_runner_;
}
const ::lm::message::RunWorkUnit&
Message::_Internal::run_work_unit(const Message* msg) {
  return *msg->run_work_unit_;
}
const ::lm::message::StartedWorkUnit&
Message::_Internal::started_work_unit(const Message* msg) {
  return *msg->started_work_unit_;
}
const ::lm::message::FinishedWorkUnit&
Message::_Internal::finished_work_unit(const Message* msg) {
  return *msg->finished_work_unit_;
}
const ::lm::message::StartOutputWriter&
Message::_Internal::start_output_writer(const Message* msg) {
  return *msg->start_output_writer_;
}
const ::lm::message::StartedOutputWriter&
Message::_Internal::started_output_writer(const Message* msg) {
  return *msg->started_output_writer_;
}
const ::lm::message::StartCheckpointSignaler&
Message::_Internal::start_checkpoint_signaler(const Message* msg) {
  return *msg->start_checkpoint_signaler_;
}
const ::lm::message::StartedCheckpointSignaler&
Message::_Internal::started_checkpoint_signaler(const Message* msg) {
  return *msg->started_checkpoint_signaler_;
}
const ::lm::message::PerformCheckpointing&
Message::_Internal::perform_checkpointing(const Message* msg) {
  return *msg->perform_checkpointing_;
}
const ::lm::message::FinishedCheckpointing&
Message::_Internal::finished_checkpointing(const Message* msg) {
  return *msg->finished_checkpointing_;
}
const ::lm::message::StartOutputPerformanceSignaler&
Message::_Internal::start_output_performance_signaler(const Message* msg) {
  return *msg->start_output_performance_signaler_;
}
const ::lm::message::StartedOutputPerformanceSignaler&
Message::_Internal::started_output_performance_signaler(const Message* msg) {
  return *msg->started_output_performance_signaler_;
}
const ::lm::message::PerformOutputPerformance&
Message::_Internal::perform_output_performance(const Message* msg) {
  return *msg->perform_output_performance_;
}
const ::lm::message::StopResourceController&
Message::_Internal::stop_resource_controller(const Message* msg) {
  return *msg->stop_resource_controller_;
}
const ::lm::message::SupervisorStarted&
Message::_Internal::supervisor_started(const Message* msg) {
  return *msg->supervisor_started_;
}
const ::lm::message::SupervisorFinished&
Message::_Internal::supervisor_finished(const Message* msg) {
  return *msg->supervisor_finished_;
}
const ::lm::message::ProcessWorkUnitOutput&
Message::_Internal::process_work_unit_output(const Message* msg) {
  return *msg->process_work_unit_output_;
}
const ::lm::message::ProcessAggregatedOutput&
Message::_Internal::process_aggregated_output(const Message* msg) {
  return *msg->process_aggregated_output_;
}
const ::lm::message::PingTarget&
Message::_Internal::ping_target(const Message* msg) {
  return *msg->ping_target_;
}
void Message::clear_source_address() {
  if (source_address_ != nullptr) source_address_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_destination_address() {
  if (destination_address_ != nullptr) destination_address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_resources_available() {
  if (resources_available_ != nullptr) resources_available_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_start_work_unit_runner() {
  start_work_unit_runner_.Clear();
}
void Message::clear_started_work_unit_runner() {
  if (started_work_unit_runner_ != nullptr) started_work_unit_runner_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_stop_work_unit_runner() {
  stop_work_unit_runner_.Clear();
}
void Message::clear_stopped_work_unit_runner() {
  if (stopped_work_unit_runner_ != nullptr) stopped_work_unit_runner_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_run_work_unit() {
  if (run_work_unit_ != nullptr) run_work_unit_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Message::clear_started_work_unit() {
  if (started_work_unit_ != nullptr) started_work_unit_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Message::clear_finished_work_unit() {
  if (finished_work_unit_ != nullptr) finished_work_unit_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Message::clear_start_output_writer() {
  if (start_output_writer_ != nullptr) start_output_writer_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Message::clear_started_output_writer() {
  if (started_output_writer_ != nullptr) started_output_writer_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void Message::clear_start_checkpoint_signaler() {
  if (start_checkpoint_signaler_ != nullptr) start_checkpoint_signaler_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void Message::clear_started_checkpoint_signaler() {
  if (started_checkpoint_signaler_ != nullptr) started_checkpoint_signaler_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void Message::clear_perform_checkpointing() {
  if (perform_checkpointing_ != nullptr) perform_checkpointing_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void Message::clear_finished_checkpointing() {
  if (finished_checkpointing_ != nullptr) finished_checkpointing_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void Message::clear_start_output_performance_signaler() {
  if (start_output_performance_signaler_ != nullptr) start_output_performance_signaler_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void Message::clear_started_output_performance_signaler() {
  if (started_output_performance_signaler_ != nullptr) started_output_performance_signaler_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void Message::clear_perform_output_performance() {
  if (perform_output_performance_ != nullptr) perform_output_performance_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void Message::clear_stop_resource_controller() {
  if (stop_resource_controller_ != nullptr) stop_resource_controller_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void Message::clear_supervisor_started() {
  if (supervisor_started_ != nullptr) supervisor_started_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void Message::clear_supervisor_finished() {
  if (supervisor_finished_ != nullptr) supervisor_finished_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void Message::clear_process_work_unit_output() {
  if (process_work_unit_output_ != nullptr) process_work_unit_output_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void Message::clear_process_aggregated_output() {
  if (process_aggregated_output_ != nullptr) process_aggregated_output_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void Message::clear_ping_target() {
  if (ping_target_ != nullptr) ping_target_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  start_work_unit_runner_(arena),
  stop_work_unit_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.message.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      start_work_unit_runner_(from.start_work_unit_runner_),
      stop_work_unit_runner_(from.stop_work_unit_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_address()) {
    source_address_ = new ::lm::message::Endpoint(*from.source_address_);
  } else {
    source_address_ = nullptr;
  }
  if (from._internal_has_destination_address()) {
    destination_address_ = new ::lm::message::Endpoint(*from.destination_address_);
  } else {
    destination_address_ = nullptr;
  }
  if (from._internal_has_resources_available()) {
    resources_available_ = new ::lm::message::ResourcesAvailable(*from.resources_available_);
  } else {
    resources_available_ = nullptr;
  }
  if (from._internal_has_started_work_unit_runner()) {
    started_work_unit_runner_ = new ::lm::message::StartedWorkUnitRunner(*from.started_work_unit_runner_);
  } else {
    started_work_unit_runner_ = nullptr;
  }
  if (from._internal_has_stopped_work_unit_runner()) {
    stopped_work_unit_runner_ = new ::lm::message::StoppedWorkUnitRunner(*from.stopped_work_unit_runner_);
  } else {
    stopped_work_unit_runner_ = nullptr;
  }
  if (from._internal_has_run_work_unit()) {
    run_work_unit_ = new ::lm::message::RunWorkUnit(*from.run_work_unit_);
  } else {
    run_work_unit_ = nullptr;
  }
  if (from._internal_has_started_work_unit()) {
    started_work_unit_ = new ::lm::message::StartedWorkUnit(*from.started_work_unit_);
  } else {
    started_work_unit_ = nullptr;
  }
  if (from._internal_has_finished_work_unit()) {
    finished_work_unit_ = new ::lm::message::FinishedWorkUnit(*from.finished_work_unit_);
  } else {
    finished_work_unit_ = nullptr;
  }
  if (from._internal_has_start_output_writer()) {
    start_output_writer_ = new ::lm::message::StartOutputWriter(*from.start_output_writer_);
  } else {
    start_output_writer_ = nullptr;
  }
  if (from._internal_has_started_output_writer()) {
    started_output_writer_ = new ::lm::message::StartedOutputWriter(*from.started_output_writer_);
  } else {
    started_output_writer_ = nullptr;
  }
  if (from._internal_has_start_checkpoint_signaler()) {
    start_checkpoint_signaler_ = new ::lm::message::StartCheckpointSignaler(*from.start_checkpoint_signaler_);
  } else {
    start_checkpoint_signaler_ = nullptr;
  }
  if (from._internal_has_started_checkpoint_signaler()) {
    started_checkpoint_signaler_ = new ::lm::message::StartedCheckpointSignaler(*from.started_checkpoint_signaler_);
  } else {
    started_checkpoint_signaler_ = nullptr;
  }
  if (from._internal_has_perform_checkpointing()) {
    perform_checkpointing_ = new ::lm::message::PerformCheckpointing(*from.perform_checkpointing_);
  } else {
    perform_checkpointing_ = nullptr;
  }
  if (from._internal_has_finished_checkpointing()) {
    finished_checkpointing_ = new ::lm::message::FinishedCheckpointing(*from.finished_checkpointing_);
  } else {
    finished_checkpointing_ = nullptr;
  }
  if (from._internal_has_start_output_performance_signaler()) {
    start_output_performance_signaler_ = new ::lm::message::StartOutputPerformanceSignaler(*from.start_output_performance_signaler_);
  } else {
    start_output_performance_signaler_ = nullptr;
  }
  if (from._internal_has_started_output_performance_signaler()) {
    started_output_performance_signaler_ = new ::lm::message::StartedOutputPerformanceSignaler(*from.started_output_performance_signaler_);
  } else {
    started_output_performance_signaler_ = nullptr;
  }
  if (from._internal_has_perform_output_performance()) {
    perform_output_performance_ = new ::lm::message::PerformOutputPerformance(*from.perform_output_performance_);
  } else {
    perform_output_performance_ = nullptr;
  }
  if (from._internal_has_stop_resource_controller()) {
    stop_resource_controller_ = new ::lm::message::StopResourceController(*from.stop_resource_controller_);
  } else {
    stop_resource_controller_ = nullptr;
  }
  if (from._internal_has_supervisor_started()) {
    supervisor_started_ = new ::lm::message::SupervisorStarted(*from.supervisor_started_);
  } else {
    supervisor_started_ = nullptr;
  }
  if (from._internal_has_supervisor_finished()) {
    supervisor_finished_ = new ::lm::message::SupervisorFinished(*from.supervisor_finished_);
  } else {
    supervisor_finished_ = nullptr;
  }
  if (from._internal_has_process_work_unit_output()) {
    process_work_unit_output_ = new ::lm::message::ProcessWorkUnitOutput(*from.process_work_unit_output_);
  } else {
    process_work_unit_output_ = nullptr;
  }
  if (from._internal_has_process_aggregated_output()) {
    process_aggregated_output_ = new ::lm::message::ProcessAggregatedOutput(*from.process_aggregated_output_);
  } else {
    process_aggregated_output_ = nullptr;
  }
  if (from._internal_has_ping_target()) {
    ping_target_ = new ::lm::message::PingTarget(*from.ping_target_);
  } else {
    ping_target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lm.message.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_lm_2fmessage_2fMessage_2eproto.base);
  ::memset(&source_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_target_) -
      reinterpret_cast<char*>(&source_address_)) + sizeof(ping_target_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:lm.message.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_address_;
  if (this != internal_default_instance()) delete destination_address_;
  if (this != internal_default_instance()) delete resources_available_;
  if (this != internal_default_instance()) delete started_work_unit_runner_;
  if (this != internal_default_instance()) delete stopped_work_unit_runner_;
  if (this != internal_default_instance()) delete run_work_unit_;
  if (this != internal_default_instance()) delete started_work_unit_;
  if (this != internal_default_instance()) delete finished_work_unit_;
  if (this != internal_default_instance()) delete start_output_writer_;
  if (this != internal_default_instance()) delete started_output_writer_;
  if (this != internal_default_instance()) delete start_checkpoint_signaler_;
  if (this != internal_default_instance()) delete started_checkpoint_signaler_;
  if (this != internal_default_instance()) delete perform_checkpointing_;
  if (this != internal_default_instance()) delete finished_checkpointing_;
  if (this != internal_default_instance()) delete start_output_performance_signaler_;
  if (this != internal_default_instance()) delete started_output_performance_signaler_;
  if (this != internal_default_instance()) delete perform_output_performance_;
  if (this != internal_default_instance()) delete stop_resource_controller_;
  if (this != internal_default_instance()) delete supervisor_started_;
  if (this != internal_default_instance()) delete supervisor_finished_;
  if (this != internal_default_instance()) delete process_work_unit_output_;
  if (this != internal_default_instance()) delete process_aggregated_output_;
  if (this != internal_default_instance()) delete ping_target_;
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_lm_2fmessage_2fMessage_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.message.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_work_unit_runner_.Clear();
  stop_work_unit_runner_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_address_ != nullptr);
      source_address_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(destination_address_ != nullptr);
      destination_address_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resources_available_ != nullptr);
      resources_available_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(started_work_unit_runner_ != nullptr);
      started_work_unit_runner_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stopped_work_unit_runner_ != nullptr);
      stopped_work_unit_runner_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(run_work_unit_ != nullptr);
      run_work_unit_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(started_work_unit_ != nullptr);
      started_work_unit_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(finished_work_unit_ != nullptr);
      finished_work_unit_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(start_output_writer_ != nullptr);
      start_output_writer_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(started_output_writer_ != nullptr);
      started_output_writer_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(start_checkpoint_signaler_ != nullptr);
      start_checkpoint_signaler_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(started_checkpoint_signaler_ != nullptr);
      started_checkpoint_signaler_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(perform_checkpointing_ != nullptr);
      perform_checkpointing_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(finished_checkpointing_ != nullptr);
      finished_checkpointing_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(start_output_performance_signaler_ != nullptr);
      start_output_performance_signaler_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(started_output_performance_signaler_ != nullptr);
      started_output_performance_signaler_->Clear();
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(perform_output_performance_ != nullptr);
      perform_output_performance_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(stop_resource_controller_ != nullptr);
      stop_resource_controller_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(supervisor_started_ != nullptr);
      supervisor_started_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(supervisor_finished_ != nullptr);
      supervisor_finished_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(process_work_unit_output_ != nullptr);
      process_work_unit_output_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(process_aggregated_output_ != nullptr);
      process_aggregated_output_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(ping_target_ != nullptr);
      ping_target_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .lm.message.Endpoint source_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.message.Endpoint destination_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.ResourcesAvailable resources_available = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources_available(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.message.StartWorkUnitRunner start_work_unit_runner = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_work_unit_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartedWorkUnitRunner started_work_unit_runner = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_work_unit_runner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.message.StopWorkUnitRunner stop_work_unit_runner = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_work_unit_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StoppedWorkUnitRunner stopped_work_unit_runner = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopped_work_unit_runner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.RunWorkUnit run_work_unit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_work_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartedWorkUnit started_work_unit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_work_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.FinishedWorkUnit finished_work_unit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_finished_work_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartOutputWriter start_output_writer = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_output_writer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartedOutputWriter started_output_writer = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_output_writer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartCheckpointSignaler start_checkpoint_signaler = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_checkpoint_signaler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartedCheckpointSignaler started_checkpoint_signaler = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_checkpoint_signaler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.PerformCheckpointing perform_checkpointing = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_checkpointing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.FinishedCheckpointing finished_checkpointing = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_finished_checkpointing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartOutputPerformanceSignaler start_output_performance_signaler = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_output_performance_signaler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StartedOutputPerformanceSignaler started_output_performance_signaler = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_output_performance_signaler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.PerformOutputPerformance perform_output_performance = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_output_performance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.StopResourceController stop_resource_controller = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_resource_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.SupervisorStarted supervisor_started = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_supervisor_started(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.SupervisorFinished supervisor_finished = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_supervisor_finished(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.ProcessWorkUnitOutput process_work_unit_output = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_work_unit_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.ProcessAggregatedOutput process_aggregated_output = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_aggregated_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.message.PingTarget ping_target = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.message.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lm.message.Endpoint source_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_address(this), target, stream);
  }

  // required .lm.message.Endpoint destination_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::destination_address(this), target, stream);
  }

  // optional .lm.message.ResourcesAvailable resources_available = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::resources_available(this), target, stream);
  }

  // repeated .lm.message.StartWorkUnitRunner start_work_unit_runner = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_start_work_unit_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_start_work_unit_runner(i), target, stream);
  }

  // optional .lm.message.StartedWorkUnitRunner started_work_unit_runner = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::started_work_unit_runner(this), target, stream);
  }

  // repeated .lm.message.StopWorkUnitRunner stop_work_unit_runner = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_work_unit_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_stop_work_unit_runner(i), target, stream);
  }

  // optional .lm.message.StoppedWorkUnitRunner stopped_work_unit_runner = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::stopped_work_unit_runner(this), target, stream);
  }

  // optional .lm.message.RunWorkUnit run_work_unit = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::run_work_unit(this), target, stream);
  }

  // optional .lm.message.StartedWorkUnit started_work_unit = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::started_work_unit(this), target, stream);
  }

  // optional .lm.message.FinishedWorkUnit finished_work_unit = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::finished_work_unit(this), target, stream);
  }

  // optional .lm.message.StartOutputWriter start_output_writer = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::start_output_writer(this), target, stream);
  }

  // optional .lm.message.StartedOutputWriter started_output_writer = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::started_output_writer(this), target, stream);
  }

  // optional .lm.message.StartCheckpointSignaler start_checkpoint_signaler = 30;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::start_checkpoint_signaler(this), target, stream);
  }

  // optional .lm.message.StartedCheckpointSignaler started_checkpoint_signaler = 31;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::started_checkpoint_signaler(this), target, stream);
  }

  // optional .lm.message.PerformCheckpointing perform_checkpointing = 32;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::perform_checkpointing(this), target, stream);
  }

  // optional .lm.message.FinishedCheckpointing finished_checkpointing = 33;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::finished_checkpointing(this), target, stream);
  }

  // optional .lm.message.StartOutputPerformanceSignaler start_output_performance_signaler = 40;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::start_output_performance_signaler(this), target, stream);
  }

  // optional .lm.message.StartedOutputPerformanceSignaler started_output_performance_signaler = 41;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::started_output_performance_signaler(this), target, stream);
  }

  // optional .lm.message.PerformOutputPerformance perform_output_performance = 42;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::perform_output_performance(this), target, stream);
  }

  // optional .lm.message.StopResourceController stop_resource_controller = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::stop_resource_controller(this), target, stream);
  }

  // optional .lm.message.SupervisorStarted supervisor_started = 61;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::supervisor_started(this), target, stream);
  }

  // optional .lm.message.SupervisorFinished supervisor_finished = 62;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        62, _Internal::supervisor_finished(this), target, stream);
  }

  // optional .lm.message.ProcessWorkUnitOutput process_work_unit_output = 100;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::process_work_unit_output(this), target, stream);
  }

  // optional .lm.message.ProcessAggregatedOutput process_aggregated_output = 101;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::process_aggregated_output(this), target, stream);
  }

  // optional .lm.message.PingTarget ping_target = 1000;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1000, _Internal::ping_target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.message.Message)
  return target;
}

size_t Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.message.Message)
  size_t total_size = 0;

  if (_internal_has_source_address()) {
    // required .lm.message.Endpoint source_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_address_);
  }

  if (_internal_has_destination_address()) {
    // required .lm.message.Endpoint destination_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_address_);
  }

  return total_size;
}
size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.message.Message)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .lm.message.Endpoint source_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_address_);

    // required .lm.message.Endpoint destination_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_address_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.message.StartWorkUnitRunner start_work_unit_runner = 11;
  total_size += 1UL * this->_internal_start_work_unit_runner_size();
  for (const auto& msg : this->start_work_unit_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.message.StopWorkUnitRunner stop_work_unit_runner = 13;
  total_size += 1UL * this->_internal_stop_work_unit_runner_size();
  for (const auto& msg : this->stop_work_unit_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .lm.message.ResourcesAvailable resources_available = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resources_available_);
    }

    // optional .lm.message.StartedWorkUnitRunner started_work_unit_runner = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *started_work_unit_runner_);
    }

    // optional .lm.message.StoppedWorkUnitRunner stopped_work_unit_runner = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stopped_work_unit_runner_);
    }

    // optional .lm.message.RunWorkUnit run_work_unit = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *run_work_unit_);
    }

    // optional .lm.message.StartedWorkUnit started_work_unit = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *started_work_unit_);
    }

    // optional .lm.message.FinishedWorkUnit finished_work_unit = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *finished_work_unit_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .lm.message.StartOutputWriter start_output_writer = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_output_writer_);
    }

    // optional .lm.message.StartedOutputWriter started_output_writer = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *started_output_writer_);
    }

    // optional .lm.message.StartCheckpointSignaler start_checkpoint_signaler = 30;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_checkpoint_signaler_);
    }

    // optional .lm.message.StartedCheckpointSignaler started_checkpoint_signaler = 31;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *started_checkpoint_signaler_);
    }

    // optional .lm.message.PerformCheckpointing perform_checkpointing = 32;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perform_checkpointing_);
    }

    // optional .lm.message.FinishedCheckpointing finished_checkpointing = 33;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *finished_checkpointing_);
    }

    // optional .lm.message.StartOutputPerformanceSignaler start_output_performance_signaler = 40;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_output_performance_signaler_);
    }

    // optional .lm.message.StartedOutputPerformanceSignaler started_output_performance_signaler = 41;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *started_output_performance_signaler_);
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional .lm.message.PerformOutputPerformance perform_output_performance = 42;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perform_output_performance_);
    }

    // optional .lm.message.StopResourceController stop_resource_controller = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_resource_controller_);
    }

    // optional .lm.message.SupervisorStarted supervisor_started = 61;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *supervisor_started_);
    }

    // optional .lm.message.SupervisorFinished supervisor_finished = 62;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *supervisor_finished_);
    }

    // optional .lm.message.ProcessWorkUnitOutput process_work_unit_output = 100;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_work_unit_output_);
    }

    // optional .lm.message.ProcessAggregatedOutput process_aggregated_output = 101;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_aggregated_output_);
    }

    // optional .lm.message.PingTarget ping_target = 1000;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ping_target_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.message.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.message.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.message.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.message.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_work_unit_runner_.MergeFrom(from.start_work_unit_runner_);
  stop_work_unit_runner_.MergeFrom(from.stop_work_unit_runner_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_source_address()->::lm::message::Endpoint::MergeFrom(from._internal_source_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_destination_address()->::lm::message::Endpoint::MergeFrom(from._internal_destination_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resources_available()->::lm::message::ResourcesAvailable::MergeFrom(from._internal_resources_available());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_started_work_unit_runner()->::lm::message::StartedWorkUnitRunner::MergeFrom(from._internal_started_work_unit_runner());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stopped_work_unit_runner()->::lm::message::StoppedWorkUnitRunner::MergeFrom(from._internal_stopped_work_unit_runner());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_run_work_unit()->::lm::message::RunWorkUnit::MergeFrom(from._internal_run_work_unit());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_started_work_unit()->::lm::message::StartedWorkUnit::MergeFrom(from._internal_started_work_unit());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_finished_work_unit()->::lm::message::FinishedWorkUnit::MergeFrom(from._internal_finished_work_unit());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_start_output_writer()->::lm::message::StartOutputWriter::MergeFrom(from._internal_start_output_writer());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_started_output_writer()->::lm::message::StartedOutputWriter::MergeFrom(from._internal_started_output_writer());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_start_checkpoint_signaler()->::lm::message::StartCheckpointSignaler::MergeFrom(from._internal_start_checkpoint_signaler());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_started_checkpoint_signaler()->::lm::message::StartedCheckpointSignaler::MergeFrom(from._internal_started_checkpoint_signaler());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_perform_checkpointing()->::lm::message::PerformCheckpointing::MergeFrom(from._internal_perform_checkpointing());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_finished_checkpointing()->::lm::message::FinishedCheckpointing::MergeFrom(from._internal_finished_checkpointing());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_start_output_performance_signaler()->::lm::message::StartOutputPerformanceSignaler::MergeFrom(from._internal_start_output_performance_signaler());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_started_output_performance_signaler()->::lm::message::StartedOutputPerformanceSignaler::MergeFrom(from._internal_started_output_performance_signaler());
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_perform_output_performance()->::lm::message::PerformOutputPerformance::MergeFrom(from._internal_perform_output_performance());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_stop_resource_controller()->::lm::message::StopResourceController::MergeFrom(from._internal_stop_resource_controller());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_supervisor_started()->::lm::message::SupervisorStarted::MergeFrom(from._internal_supervisor_started());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_supervisor_finished()->::lm::message::SupervisorFinished::MergeFrom(from._internal_supervisor_finished());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_process_work_unit_output()->::lm::message::ProcessWorkUnitOutput::MergeFrom(from._internal_process_work_unit_output());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_process_aggregated_output()->::lm::message::ProcessAggregatedOutput::MergeFrom(from._internal_process_aggregated_output());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_ping_target()->::lm::message::PingTarget::MergeFrom(from._internal_ping_target());
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(start_work_unit_runner_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stop_work_unit_runner_)) return false;
  if (_internal_has_resources_available()) {
    if (!resources_available_->IsInitialized()) return false;
  }
  if (_internal_has_started_work_unit_runner()) {
    if (!started_work_unit_runner_->IsInitialized()) return false;
  }
  if (_internal_has_stopped_work_unit_runner()) {
    if (!stopped_work_unit_runner_->IsInitialized()) return false;
  }
  if (_internal_has_run_work_unit()) {
    if (!run_work_unit_->IsInitialized()) return false;
  }
  if (_internal_has_started_work_unit()) {
    if (!started_work_unit_->IsInitialized()) return false;
  }
  if (_internal_has_finished_work_unit()) {
    if (!finished_work_unit_->IsInitialized()) return false;
  }
  if (_internal_has_start_output_writer()) {
    if (!start_output_writer_->IsInitialized()) return false;
  }
  if (_internal_has_started_output_writer()) {
    if (!started_output_writer_->IsInitialized()) return false;
  }
  if (_internal_has_start_checkpoint_signaler()) {
    if (!start_checkpoint_signaler_->IsInitialized()) return false;
  }
  if (_internal_has_started_checkpoint_signaler()) {
    if (!started_checkpoint_signaler_->IsInitialized()) return false;
  }
  if (_internal_has_start_output_performance_signaler()) {
    if (!start_output_performance_signaler_->IsInitialized()) return false;
  }
  if (_internal_has_started_output_performance_signaler()) {
    if (!started_output_performance_signaler_->IsInitialized()) return false;
  }
  if (_internal_has_stop_resource_controller()) {
    if (!stop_resource_controller_->IsInitialized()) return false;
  }
  if (_internal_has_supervisor_started()) {
    if (!supervisor_started_->IsInitialized()) return false;
  }
  if (_internal_has_supervisor_finished()) {
    if (!supervisor_finished_->IsInitialized()) return false;
  }
  if (_internal_has_process_work_unit_output()) {
    if (!process_work_unit_output_->IsInitialized()) return false;
  }
  if (_internal_has_process_aggregated_output()) {
    if (!process_aggregated_output_->IsInitialized()) return false;
  }
  if (_internal_has_ping_target()) {
    if (!ping_target_->IsInitialized()) return false;
  }
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_work_unit_runner_.InternalSwap(&other->start_work_unit_runner_);
  stop_work_unit_runner_.InternalSwap(&other->stop_work_unit_runner_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, ping_target_)
      + sizeof(Message::ping_target_)
      - PROTOBUF_FIELD_OFFSET(Message, source_address_)>(
          reinterpret_cast<char*>(&source_address_),
          reinterpret_cast<char*>(&other->source_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::message::Message* Arena::CreateMaybeMessage< ::lm::message::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::message::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
