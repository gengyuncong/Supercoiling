// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/RunWorkUnit.proto

#include "lm/message/RunWorkUnit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fDiffusionModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fMicroenvironmentModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MicroenvironmentModel_lm_2finput_2fMicroenvironmentModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fOutputOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fReactionModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fEndpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Endpoint_lm_2fmessage_2fEndpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fWorkUnit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkUnit_lm_2fmessage_2fWorkUnit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fOrderParameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTrajectoryBarrier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryBarriers_lm_2ftypes_2fTrajectoryBarrier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTrajectoryLimits_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto;
namespace lm {
namespace message {
class RunWorkUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunWorkUnit> _instance;
} _RunWorkUnit_default_instance_;
}  // namespace message
}  // namespace lm
static void InitDefaultsscc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::message::_RunWorkUnit_default_instance_;
    new (ptr) ::lm::message::RunWorkUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::message::RunWorkUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto}, {
      &scc_info_Endpoint_lm_2fmessage_2fEndpoint_2eproto.base,
      &scc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto.base,
      &scc_info_TrajectoryBarriers_lm_2ftypes_2fTrajectoryBarrier_2eproto.base,
      &scc_info_ReactionModel_lm_2finput_2fReactionModel_2eproto.base,
      &scc_info_DiffusionModel_lm_2finput_2fDiffusionModel_2eproto.base,
      &scc_info_MicroenvironmentModel_lm_2finput_2fMicroenvironmentModel_2eproto.base,
      &scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto.base,
      &scc_info_OutputOptions_lm_2finput_2fOutputOptions_2eproto.base,
      &scc_info_WorkUnit_lm_2fmessage_2fWorkUnit_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fmessage_2fRunWorkUnit_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fmessage_2fRunWorkUnit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fmessage_2fRunWorkUnit_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fmessage_2fRunWorkUnit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, work_unit_id_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, solver_type_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, output_address_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, supervisor_address_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, max_steps_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, trajectory_limits_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, trajectory_barriers_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, reaction_model_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, diffusion_model_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, microenv_model_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, order_parameters_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, output_options_),
  PROTOBUF_FIELD_OFFSET(::lm::message::RunWorkUnit, part_),
  9,
  10,
  0,
  1,
  11,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::lm::message::RunWorkUnit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::message::_RunWorkUnit_default_instance_),
};

const char descriptor_table_protodef_lm_2fmessage_2fRunWorkUnit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034lm/message/RunWorkUnit.proto\022\nlm.messa"
  "ge\032\035lm/input/DiffusionModel.proto\032$lm/in"
  "put/MicroenvironmentModel.proto\032\034lm/inpu"
  "t/OutputOptions.proto\032\034lm/input/Reaction"
  "Model.proto\032\031lm/message/Endpoint.proto\032\031"
  "lm/message/WorkUnit.proto\032\036lm/types/Orde"
  "rParameters.proto\032\031lm/types/SolverType.p"
  "roto\032 lm/types/TrajectoryBarrier.proto\032\037"
  "lm/types/TrajectoryLimits.proto\"\332\004\n\013RunW"
  "orkUnit\022\024\n\014work_unit_id\030\001 \002(\004\022)\n\013solver_"
  "type\030\002 \002(\0162\024.lm.types.SolverType\022,\n\016outp"
  "ut_address\030\003 \002(\0132\024.lm.message.Endpoint\0220"
  "\n\022supervisor_address\030\004 \002(\0132\024.lm.message."
  "Endpoint\022\021\n\tmax_steps\030\036 \002(\004\0225\n\021trajector"
  "y_limits\030\037 \001(\0132\032.lm.types.TrajectoryLimi"
  "ts\0229\n\023trajectory_barriers\030  \001(\0132\034.lm.typ"
  "es.TrajectoryBarriers\022/\n\016reaction_model\030"
  "( \001(\0132\027.lm.input.ReactionModel\0221\n\017diffus"
  "ion_model\030) \001(\0132\030.lm.input.DiffusionMode"
  "l\0227\n\016microenv_model\030* \001(\0132\037.lm.input.Mic"
  "roenvironmentModel\0223\n\020order_parameters\0302"
  " \001(\0132\031.lm.types.OrderParameters\022/\n\016outpu"
  "t_options\030[ \001(\0132\027.lm.input.OutputOptions"
  "\022\"\n\004part\030e \003(\0132\024.lm.message.WorkUnit"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto_deps[10] = {
  &::descriptor_table_lm_2finput_2fDiffusionModel_2eproto,
  &::descriptor_table_lm_2finput_2fMicroenvironmentModel_2eproto,
  &::descriptor_table_lm_2finput_2fOutputOptions_2eproto,
  &::descriptor_table_lm_2finput_2fReactionModel_2eproto,
  &::descriptor_table_lm_2fmessage_2fEndpoint_2eproto,
  &::descriptor_table_lm_2fmessage_2fWorkUnit_2eproto,
  &::descriptor_table_lm_2ftypes_2fOrderParameters_2eproto,
  &::descriptor_table_lm_2ftypes_2fSolverType_2eproto,
  &::descriptor_table_lm_2ftypes_2fTrajectoryBarrier_2eproto,
  &::descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto_sccs[1] = {
  &scc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto = {
  false, false, descriptor_table_protodef_lm_2fmessage_2fRunWorkUnit_2eproto, "lm/message/RunWorkUnit.proto", 956,
  &descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto_once, descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto_sccs, descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_lm_2fmessage_2fRunWorkUnit_2eproto::offsets,
  file_level_metadata_lm_2fmessage_2fRunWorkUnit_2eproto, 1, file_level_enum_descriptors_lm_2fmessage_2fRunWorkUnit_2eproto, file_level_service_descriptors_lm_2fmessage_2fRunWorkUnit_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fmessage_2fRunWorkUnit_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fmessage_2fRunWorkUnit_2eproto)), true);
namespace lm {
namespace message {

// ===================================================================

void RunWorkUnit::InitAsDefaultInstance() {
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->output_address_ = const_cast< ::lm::message::Endpoint*>(
      ::lm::message::Endpoint::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->supervisor_address_ = const_cast< ::lm::message::Endpoint*>(
      ::lm::message::Endpoint::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->trajectory_limits_ = const_cast< ::lm::types::TrajectoryLimits*>(
      ::lm::types::TrajectoryLimits::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->trajectory_barriers_ = const_cast< ::lm::types::TrajectoryBarriers*>(
      ::lm::types::TrajectoryBarriers::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->reaction_model_ = const_cast< ::lm::input::ReactionModel*>(
      ::lm::input::ReactionModel::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->diffusion_model_ = const_cast< ::lm::input::DiffusionModel*>(
      ::lm::input::DiffusionModel::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->microenv_model_ = const_cast< ::lm::input::MicroenvironmentModel*>(
      ::lm::input::MicroenvironmentModel::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->order_parameters_ = const_cast< ::lm::types::OrderParameters*>(
      ::lm::types::OrderParameters::internal_default_instance());
  ::lm::message::_RunWorkUnit_default_instance_._instance.get_mutable()->output_options_ = const_cast< ::lm::input::OutputOptions*>(
      ::lm::input::OutputOptions::internal_default_instance());
}
class RunWorkUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<RunWorkUnit>()._has_bits_);
  static void set_has_work_unit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_solver_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::lm::message::Endpoint& output_address(const RunWorkUnit* msg);
  static void set_has_output_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::lm::message::Endpoint& supervisor_address(const RunWorkUnit* msg);
  static void set_has_supervisor_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::lm::types::TrajectoryLimits& trajectory_limits(const RunWorkUnit* msg);
  static void set_has_trajectory_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::lm::types::TrajectoryBarriers& trajectory_barriers(const RunWorkUnit* msg);
  static void set_has_trajectory_barriers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::lm::input::ReactionModel& reaction_model(const RunWorkUnit* msg);
  static void set_has_reaction_model(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::lm::input::DiffusionModel& diffusion_model(const RunWorkUnit* msg);
  static void set_has_diffusion_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::lm::input::MicroenvironmentModel& microenv_model(const RunWorkUnit* msg);
  static void set_has_microenv_model(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::lm::types::OrderParameters& order_parameters(const RunWorkUnit* msg);
  static void set_has_order_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::lm::input::OutputOptions& output_options(const RunWorkUnit* msg);
  static void set_has_output_options(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000e03) ^ 0x00000e03) != 0;
  }
};

const ::lm::message::Endpoint&
RunWorkUnit::_Internal::output_address(const RunWorkUnit* msg) {
  return *msg->output_address_;
}
const ::lm::message::Endpoint&
RunWorkUnit::_Internal::supervisor_address(const RunWorkUnit* msg) {
  return *msg->supervisor_address_;
}
const ::lm::types::TrajectoryLimits&
RunWorkUnit::_Internal::trajectory_limits(const RunWorkUnit* msg) {
  return *msg->trajectory_limits_;
}
const ::lm::types::TrajectoryBarriers&
RunWorkUnit::_Internal::trajectory_barriers(const RunWorkUnit* msg) {
  return *msg->trajectory_barriers_;
}
const ::lm::input::ReactionModel&
RunWorkUnit::_Internal::reaction_model(const RunWorkUnit* msg) {
  return *msg->reaction_model_;
}
const ::lm::input::DiffusionModel&
RunWorkUnit::_Internal::diffusion_model(const RunWorkUnit* msg) {
  return *msg->diffusion_model_;
}
const ::lm::input::MicroenvironmentModel&
RunWorkUnit::_Internal::microenv_model(const RunWorkUnit* msg) {
  return *msg->microenv_model_;
}
const ::lm::types::OrderParameters&
RunWorkUnit::_Internal::order_parameters(const RunWorkUnit* msg) {
  return *msg->order_parameters_;
}
const ::lm::input::OutputOptions&
RunWorkUnit::_Internal::output_options(const RunWorkUnit* msg) {
  return *msg->output_options_;
}
void RunWorkUnit::clear_output_address() {
  if (output_address_ != nullptr) output_address_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RunWorkUnit::clear_supervisor_address() {
  if (supervisor_address_ != nullptr) supervisor_address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RunWorkUnit::clear_trajectory_limits() {
  if (trajectory_limits_ != nullptr) trajectory_limits_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void RunWorkUnit::clear_trajectory_barriers() {
  if (trajectory_barriers_ != nullptr) trajectory_barriers_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void RunWorkUnit::clear_reaction_model() {
  if (reaction_model_ != nullptr) reaction_model_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void RunWorkUnit::clear_diffusion_model() {
  if (diffusion_model_ != nullptr) diffusion_model_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void RunWorkUnit::clear_microenv_model() {
  if (microenv_model_ != nullptr) microenv_model_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void RunWorkUnit::clear_order_parameters() {
  if (order_parameters_ != nullptr) order_parameters_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void RunWorkUnit::clear_output_options() {
  if (output_options_ != nullptr) output_options_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void RunWorkUnit::clear_part() {
  part_.Clear();
}
RunWorkUnit::RunWorkUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  part_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.message.RunWorkUnit)
}
RunWorkUnit::RunWorkUnit(const RunWorkUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      part_(from.part_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_address()) {
    output_address_ = new ::lm::message::Endpoint(*from.output_address_);
  } else {
    output_address_ = nullptr;
  }
  if (from._internal_has_supervisor_address()) {
    supervisor_address_ = new ::lm::message::Endpoint(*from.supervisor_address_);
  } else {
    supervisor_address_ = nullptr;
  }
  if (from._internal_has_trajectory_limits()) {
    trajectory_limits_ = new ::lm::types::TrajectoryLimits(*from.trajectory_limits_);
  } else {
    trajectory_limits_ = nullptr;
  }
  if (from._internal_has_trajectory_barriers()) {
    trajectory_barriers_ = new ::lm::types::TrajectoryBarriers(*from.trajectory_barriers_);
  } else {
    trajectory_barriers_ = nullptr;
  }
  if (from._internal_has_reaction_model()) {
    reaction_model_ = new ::lm::input::ReactionModel(*from.reaction_model_);
  } else {
    reaction_model_ = nullptr;
  }
  if (from._internal_has_diffusion_model()) {
    diffusion_model_ = new ::lm::input::DiffusionModel(*from.diffusion_model_);
  } else {
    diffusion_model_ = nullptr;
  }
  if (from._internal_has_microenv_model()) {
    microenv_model_ = new ::lm::input::MicroenvironmentModel(*from.microenv_model_);
  } else {
    microenv_model_ = nullptr;
  }
  if (from._internal_has_order_parameters()) {
    order_parameters_ = new ::lm::types::OrderParameters(*from.order_parameters_);
  } else {
    order_parameters_ = nullptr;
  }
  if (from._internal_has_output_options()) {
    output_options_ = new ::lm::input::OutputOptions(*from.output_options_);
  } else {
    output_options_ = nullptr;
  }
  ::memcpy(&work_unit_id_, &from.work_unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_steps_) -
    reinterpret_cast<char*>(&work_unit_id_)) + sizeof(max_steps_));
  // @@protoc_insertion_point(copy_constructor:lm.message.RunWorkUnit)
}

void RunWorkUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto.base);
  ::memset(&output_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_steps_) -
      reinterpret_cast<char*>(&output_address_)) + sizeof(max_steps_));
}

RunWorkUnit::~RunWorkUnit() {
  // @@protoc_insertion_point(destructor:lm.message.RunWorkUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunWorkUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_address_;
  if (this != internal_default_instance()) delete supervisor_address_;
  if (this != internal_default_instance()) delete trajectory_limits_;
  if (this != internal_default_instance()) delete trajectory_barriers_;
  if (this != internal_default_instance()) delete reaction_model_;
  if (this != internal_default_instance()) delete diffusion_model_;
  if (this != internal_default_instance()) delete microenv_model_;
  if (this != internal_default_instance()) delete order_parameters_;
  if (this != internal_default_instance()) delete output_options_;
}

void RunWorkUnit::ArenaDtor(void* object) {
  RunWorkUnit* _this = reinterpret_cast< RunWorkUnit* >(object);
  (void)_this;
}
void RunWorkUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunWorkUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunWorkUnit& RunWorkUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunWorkUnit_lm_2fmessage_2fRunWorkUnit_2eproto.base);
  return *internal_default_instance();
}


void RunWorkUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.message.RunWorkUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  part_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(output_address_ != nullptr);
      output_address_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(supervisor_address_ != nullptr);
      supervisor_address_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trajectory_limits_ != nullptr);
      trajectory_limits_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trajectory_barriers_ != nullptr);
      trajectory_barriers_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reaction_model_ != nullptr);
      reaction_model_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(diffusion_model_ != nullptr);
      diffusion_model_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(microenv_model_ != nullptr);
      microenv_model_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(order_parameters_ != nullptr);
      order_parameters_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(output_options_ != nullptr);
    output_options_->Clear();
  }
  if (cached_has_bits & 0x00000e00u) {
    ::memset(&work_unit_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_steps_) -
        reinterpret_cast<char*>(&work_unit_id_)) + sizeof(max_steps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunWorkUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 work_unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_work_unit_id(&has_bits);
          work_unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.types.SolverType solver_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::SolverType_IsValid(val))) {
            _internal_set_solver_type(static_cast<::lm::types::SolverType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .lm.message.Endpoint output_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.message.Endpoint supervisor_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_supervisor_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 max_steps = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_max_steps(&has_bits);
          max_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.TrajectoryLimits trajectory_limits = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.TrajectoryBarriers trajectory_barriers = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_barriers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.ReactionModel reaction_model = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reaction_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.DiffusionModel diffusion_model = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffusion_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.MicroenvironmentModel microenv_model = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_microenv_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.OrderParameters order_parameters = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.OutputOptions output_options = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.message.WorkUnit part = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_part(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunWorkUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.message.RunWorkUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 work_unit_id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_work_unit_id(), target);
  }

  // required .lm.types.SolverType solver_type = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solver_type(), target);
  }

  // required .lm.message.Endpoint output_address = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output_address(this), target, stream);
  }

  // required .lm.message.Endpoint supervisor_address = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::supervisor_address(this), target, stream);
  }

  // required uint64 max_steps = 30;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_max_steps(), target);
  }

  // optional .lm.types.TrajectoryLimits trajectory_limits = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::trajectory_limits(this), target, stream);
  }

  // optional .lm.types.TrajectoryBarriers trajectory_barriers = 32;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::trajectory_barriers(this), target, stream);
  }

  // optional .lm.input.ReactionModel reaction_model = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::reaction_model(this), target, stream);
  }

  // optional .lm.input.DiffusionModel diffusion_model = 41;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::diffusion_model(this), target, stream);
  }

  // optional .lm.input.MicroenvironmentModel microenv_model = 42;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::microenv_model(this), target, stream);
  }

  // optional .lm.types.OrderParameters order_parameters = 50;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::order_parameters(this), target, stream);
  }

  // optional .lm.input.OutputOptions output_options = 91;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        91, _Internal::output_options(this), target, stream);
  }

  // repeated .lm.message.WorkUnit part = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_part_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, this->_internal_part(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.message.RunWorkUnit)
  return target;
}

size_t RunWorkUnit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.message.RunWorkUnit)
  size_t total_size = 0;

  if (_internal_has_output_address()) {
    // required .lm.message.Endpoint output_address = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_address_);
  }

  if (_internal_has_supervisor_address()) {
    // required .lm.message.Endpoint supervisor_address = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supervisor_address_);
  }

  if (_internal_has_work_unit_id()) {
    // required uint64 work_unit_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_work_unit_id());
  }

  if (_internal_has_solver_type()) {
    // required .lm.types.SolverType solver_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solver_type());
  }

  if (_internal_has_max_steps()) {
    // required uint64 max_steps = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_steps());
  }

  return total_size;
}
size_t RunWorkUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.message.RunWorkUnit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000e03) ^ 0x00000e03) == 0) {  // All required fields are present.
    // required .lm.message.Endpoint output_address = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_address_);

    // required .lm.message.Endpoint supervisor_address = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supervisor_address_);

    // required uint64 work_unit_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_work_unit_id());

    // required .lm.types.SolverType solver_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solver_type());

    // required uint64 max_steps = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_steps());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.message.WorkUnit part = 101;
  total_size += 2UL * this->_internal_part_size();
  for (const auto& msg : this->part_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .lm.types.TrajectoryLimits trajectory_limits = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_limits_);
    }

    // optional .lm.types.TrajectoryBarriers trajectory_barriers = 32;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_barriers_);
    }

    // optional .lm.input.ReactionModel reaction_model = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reaction_model_);
    }

    // optional .lm.input.DiffusionModel diffusion_model = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diffusion_model_);
    }

    // optional .lm.input.MicroenvironmentModel microenv_model = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *microenv_model_);
    }

    // optional .lm.types.OrderParameters order_parameters = 50;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_parameters_);
    }

  }
  // optional .lm.input.OutputOptions output_options = 91;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunWorkUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.message.RunWorkUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const RunWorkUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunWorkUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.message.RunWorkUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.message.RunWorkUnit)
    MergeFrom(*source);
  }
}

void RunWorkUnit::MergeFrom(const RunWorkUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.message.RunWorkUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  part_.MergeFrom(from.part_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_output_address()->::lm::message::Endpoint::MergeFrom(from._internal_output_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_supervisor_address()->::lm::message::Endpoint::MergeFrom(from._internal_supervisor_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_trajectory_limits()->::lm::types::TrajectoryLimits::MergeFrom(from._internal_trajectory_limits());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_trajectory_barriers()->::lm::types::TrajectoryBarriers::MergeFrom(from._internal_trajectory_barriers());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reaction_model()->::lm::input::ReactionModel::MergeFrom(from._internal_reaction_model());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_diffusion_model()->::lm::input::DiffusionModel::MergeFrom(from._internal_diffusion_model());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_microenv_model()->::lm::input::MicroenvironmentModel::MergeFrom(from._internal_microenv_model());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_order_parameters()->::lm::types::OrderParameters::MergeFrom(from._internal_order_parameters());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_output_options()->::lm::input::OutputOptions::MergeFrom(from._internal_output_options());
    }
    if (cached_has_bits & 0x00000200u) {
      work_unit_id_ = from.work_unit_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      solver_type_ = from.solver_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_steps_ = from.max_steps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RunWorkUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.message.RunWorkUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunWorkUnit::CopyFrom(const RunWorkUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.message.RunWorkUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunWorkUnit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(part_)) return false;
  if (_internal_has_trajectory_limits()) {
    if (!trajectory_limits_->IsInitialized()) return false;
  }
  if (_internal_has_trajectory_barriers()) {
    if (!trajectory_barriers_->IsInitialized()) return false;
  }
  if (_internal_has_reaction_model()) {
    if (!reaction_model_->IsInitialized()) return false;
  }
  if (_internal_has_diffusion_model()) {
    if (!diffusion_model_->IsInitialized()) return false;
  }
  if (_internal_has_microenv_model()) {
    if (!microenv_model_->IsInitialized()) return false;
  }
  if (_internal_has_order_parameters()) {
    if (!order_parameters_->IsInitialized()) return false;
  }
  return true;
}

void RunWorkUnit::InternalSwap(RunWorkUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  part_.InternalSwap(&other->part_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunWorkUnit, max_steps_)
      + sizeof(RunWorkUnit::max_steps_)
      - PROTOBUF_FIELD_OFFSET(RunWorkUnit, output_address_)>(
          reinterpret_cast<char*>(&output_address_),
          reinterpret_cast<char*>(&other->output_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunWorkUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::message::RunWorkUnit* Arena::CreateMaybeMessage< ::lm::message::RunWorkUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::message::RunWorkUnit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
