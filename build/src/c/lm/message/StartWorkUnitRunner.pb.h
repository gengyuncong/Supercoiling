// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/message/StartWorkUnitRunner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fStartWorkUnitRunner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fStartWorkUnitRunner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fmessage_2fStartWorkUnitRunner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fmessage_2fStartWorkUnitRunner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fmessage_2fStartWorkUnitRunner_2eproto;
namespace lm {
namespace message {
class StartWorkUnitRunner;
class StartWorkUnitRunnerDefaultTypeInternal;
extern StartWorkUnitRunnerDefaultTypeInternal _StartWorkUnitRunner_default_instance_;
}  // namespace message
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::message::StartWorkUnitRunner* Arena::CreateMaybeMessage<::lm::message::StartWorkUnitRunner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace message {

// ===================================================================

class StartWorkUnitRunner PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.message.StartWorkUnitRunner) */ {
 public:
  inline StartWorkUnitRunner() : StartWorkUnitRunner(nullptr) {}
  virtual ~StartWorkUnitRunner();

  StartWorkUnitRunner(const StartWorkUnitRunner& from);
  StartWorkUnitRunner(StartWorkUnitRunner&& from) noexcept
    : StartWorkUnitRunner() {
    *this = ::std::move(from);
  }

  inline StartWorkUnitRunner& operator=(const StartWorkUnitRunner& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartWorkUnitRunner& operator=(StartWorkUnitRunner&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartWorkUnitRunner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartWorkUnitRunner* internal_default_instance() {
    return reinterpret_cast<const StartWorkUnitRunner*>(
               &_StartWorkUnitRunner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartWorkUnitRunner& a, StartWorkUnitRunner& b) {
    a.Swap(&b);
  }
  inline void Swap(StartWorkUnitRunner* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartWorkUnitRunner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartWorkUnitRunner* New() const final {
    return CreateMaybeMessage<StartWorkUnitRunner>(nullptr);
  }

  StartWorkUnitRunner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartWorkUnitRunner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartWorkUnitRunner& from);
  void MergeFrom(const StartWorkUnitRunner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartWorkUnitRunner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.message.StartWorkUnitRunner";
  }
  protected:
  explicit StartWorkUnitRunner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fmessage_2fStartWorkUnitRunner_2eproto);
    return ::descriptor_table_lm_2fmessage_2fStartWorkUnitRunner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 3,
    kGpuFieldNumber = 4,
    kMeSolverFieldNumber = 5,
    kDiffusionPdeSolverFieldNumber = 11,
    kWorkUnitRunnerIdFieldNumber = 1,
    kUseCpuAffinityFieldNumber = 2,
  };
  // repeated int32 cpu = 3;
  int cpu_size() const;
  private:
  int _internal_cpu_size() const;
  public:
  void clear_cpu();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cpu() const;
  void _internal_add_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cpu();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cpu(int index) const;
  void set_cpu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cpu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cpu();

  // repeated int32 gpu = 4;
  int gpu_size() const;
  private:
  int _internal_gpu_size() const;
  public:
  void clear_gpu();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gpu() const;
  void _internal_add_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gpu();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gpu(int index) const;
  void set_gpu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gpu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gpu();

  // required string me_solver = 5;
  bool has_me_solver() const;
  private:
  bool _internal_has_me_solver() const;
  public:
  void clear_me_solver();
  const std::string& me_solver() const;
  void set_me_solver(const std::string& value);
  void set_me_solver(std::string&& value);
  void set_me_solver(const char* value);
  void set_me_solver(const char* value, size_t size);
  std::string* mutable_me_solver();
  std::string* release_me_solver();
  void set_allocated_me_solver(std::string* me_solver);
  private:
  const std::string& _internal_me_solver() const;
  void _internal_set_me_solver(const std::string& value);
  std::string* _internal_mutable_me_solver();
  public:

  // required string diffusion_pde_solver = 11;
  bool has_diffusion_pde_solver() const;
  private:
  bool _internal_has_diffusion_pde_solver() const;
  public:
  void clear_diffusion_pde_solver();
  const std::string& diffusion_pde_solver() const;
  void set_diffusion_pde_solver(const std::string& value);
  void set_diffusion_pde_solver(std::string&& value);
  void set_diffusion_pde_solver(const char* value);
  void set_diffusion_pde_solver(const char* value, size_t size);
  std::string* mutable_diffusion_pde_solver();
  std::string* release_diffusion_pde_solver();
  void set_allocated_diffusion_pde_solver(std::string* diffusion_pde_solver);
  private:
  const std::string& _internal_diffusion_pde_solver() const;
  void _internal_set_diffusion_pde_solver(const std::string& value);
  std::string* _internal_mutable_diffusion_pde_solver();
  public:

  // required int32 work_unit_runner_id = 1;
  bool has_work_unit_runner_id() const;
  private:
  bool _internal_has_work_unit_runner_id() const;
  public:
  void clear_work_unit_runner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 work_unit_runner_id() const;
  void set_work_unit_runner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_work_unit_runner_id() const;
  void _internal_set_work_unit_runner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_cpu_affinity = 2;
  bool has_use_cpu_affinity() const;
  private:
  bool _internal_has_use_cpu_affinity() const;
  public:
  void clear_use_cpu_affinity();
  bool use_cpu_affinity() const;
  void set_use_cpu_affinity(bool value);
  private:
  bool _internal_use_cpu_affinity() const;
  void _internal_set_use_cpu_affinity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lm.message.StartWorkUnitRunner)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cpu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gpu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr me_solver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diffusion_pde_solver_;
  ::PROTOBUF_NAMESPACE_ID::int32 work_unit_runner_id_;
  bool use_cpu_affinity_;
  friend struct ::TableStruct_lm_2fmessage_2fStartWorkUnitRunner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartWorkUnitRunner

// required int32 work_unit_runner_id = 1;
inline bool StartWorkUnitRunner::_internal_has_work_unit_runner_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StartWorkUnitRunner::has_work_unit_runner_id() const {
  return _internal_has_work_unit_runner_id();
}
inline void StartWorkUnitRunner::clear_work_unit_runner_id() {
  work_unit_runner_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartWorkUnitRunner::_internal_work_unit_runner_id() const {
  return work_unit_runner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartWorkUnitRunner::work_unit_runner_id() const {
  // @@protoc_insertion_point(field_get:lm.message.StartWorkUnitRunner.work_unit_runner_id)
  return _internal_work_unit_runner_id();
}
inline void StartWorkUnitRunner::_internal_set_work_unit_runner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  work_unit_runner_id_ = value;
}
inline void StartWorkUnitRunner::set_work_unit_runner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_work_unit_runner_id(value);
  // @@protoc_insertion_point(field_set:lm.message.StartWorkUnitRunner.work_unit_runner_id)
}

// optional bool use_cpu_affinity = 2;
inline bool StartWorkUnitRunner::_internal_has_use_cpu_affinity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StartWorkUnitRunner::has_use_cpu_affinity() const {
  return _internal_has_use_cpu_affinity();
}
inline void StartWorkUnitRunner::clear_use_cpu_affinity() {
  use_cpu_affinity_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool StartWorkUnitRunner::_internal_use_cpu_affinity() const {
  return use_cpu_affinity_;
}
inline bool StartWorkUnitRunner::use_cpu_affinity() const {
  // @@protoc_insertion_point(field_get:lm.message.StartWorkUnitRunner.use_cpu_affinity)
  return _internal_use_cpu_affinity();
}
inline void StartWorkUnitRunner::_internal_set_use_cpu_affinity(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_cpu_affinity_ = value;
}
inline void StartWorkUnitRunner::set_use_cpu_affinity(bool value) {
  _internal_set_use_cpu_affinity(value);
  // @@protoc_insertion_point(field_set:lm.message.StartWorkUnitRunner.use_cpu_affinity)
}

// repeated int32 cpu = 3;
inline int StartWorkUnitRunner::_internal_cpu_size() const {
  return cpu_.size();
}
inline int StartWorkUnitRunner::cpu_size() const {
  return _internal_cpu_size();
}
inline void StartWorkUnitRunner::clear_cpu() {
  cpu_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartWorkUnitRunner::_internal_cpu(int index) const {
  return cpu_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartWorkUnitRunner::cpu(int index) const {
  // @@protoc_insertion_point(field_get:lm.message.StartWorkUnitRunner.cpu)
  return _internal_cpu(index);
}
inline void StartWorkUnitRunner::set_cpu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.message.StartWorkUnitRunner.cpu)
}
inline void StartWorkUnitRunner::_internal_add_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpu_.Add(value);
}
inline void StartWorkUnitRunner::add_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cpu(value);
  // @@protoc_insertion_point(field_add:lm.message.StartWorkUnitRunner.cpu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartWorkUnitRunner::_internal_cpu() const {
  return cpu_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartWorkUnitRunner::cpu() const {
  // @@protoc_insertion_point(field_list:lm.message.StartWorkUnitRunner.cpu)
  return _internal_cpu();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartWorkUnitRunner::_internal_mutable_cpu() {
  return &cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartWorkUnitRunner::mutable_cpu() {
  // @@protoc_insertion_point(field_mutable_list:lm.message.StartWorkUnitRunner.cpu)
  return _internal_mutable_cpu();
}

// repeated int32 gpu = 4;
inline int StartWorkUnitRunner::_internal_gpu_size() const {
  return gpu_.size();
}
inline int StartWorkUnitRunner::gpu_size() const {
  return _internal_gpu_size();
}
inline void StartWorkUnitRunner::clear_gpu() {
  gpu_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartWorkUnitRunner::_internal_gpu(int index) const {
  return gpu_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartWorkUnitRunner::gpu(int index) const {
  // @@protoc_insertion_point(field_get:lm.message.StartWorkUnitRunner.gpu)
  return _internal_gpu(index);
}
inline void StartWorkUnitRunner::set_gpu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.message.StartWorkUnitRunner.gpu)
}
inline void StartWorkUnitRunner::_internal_add_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gpu_.Add(value);
}
inline void StartWorkUnitRunner::add_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gpu(value);
  // @@protoc_insertion_point(field_add:lm.message.StartWorkUnitRunner.gpu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartWorkUnitRunner::_internal_gpu() const {
  return gpu_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartWorkUnitRunner::gpu() const {
  // @@protoc_insertion_point(field_list:lm.message.StartWorkUnitRunner.gpu)
  return _internal_gpu();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartWorkUnitRunner::_internal_mutable_gpu() {
  return &gpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartWorkUnitRunner::mutable_gpu() {
  // @@protoc_insertion_point(field_mutable_list:lm.message.StartWorkUnitRunner.gpu)
  return _internal_mutable_gpu();
}

// required string me_solver = 5;
inline bool StartWorkUnitRunner::_internal_has_me_solver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartWorkUnitRunner::has_me_solver() const {
  return _internal_has_me_solver();
}
inline void StartWorkUnitRunner::clear_me_solver() {
  me_solver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartWorkUnitRunner::me_solver() const {
  // @@protoc_insertion_point(field_get:lm.message.StartWorkUnitRunner.me_solver)
  return _internal_me_solver();
}
inline void StartWorkUnitRunner::set_me_solver(const std::string& value) {
  _internal_set_me_solver(value);
  // @@protoc_insertion_point(field_set:lm.message.StartWorkUnitRunner.me_solver)
}
inline std::string* StartWorkUnitRunner::mutable_me_solver() {
  // @@protoc_insertion_point(field_mutable:lm.message.StartWorkUnitRunner.me_solver)
  return _internal_mutable_me_solver();
}
inline const std::string& StartWorkUnitRunner::_internal_me_solver() const {
  return me_solver_.Get();
}
inline void StartWorkUnitRunner::_internal_set_me_solver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  me_solver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartWorkUnitRunner::set_me_solver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  me_solver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lm.message.StartWorkUnitRunner.me_solver)
}
inline void StartWorkUnitRunner::set_me_solver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  me_solver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lm.message.StartWorkUnitRunner.me_solver)
}
inline void StartWorkUnitRunner::set_me_solver(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  me_solver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lm.message.StartWorkUnitRunner.me_solver)
}
inline std::string* StartWorkUnitRunner::_internal_mutable_me_solver() {
  _has_bits_[0] |= 0x00000001u;
  return me_solver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartWorkUnitRunner::release_me_solver() {
  // @@protoc_insertion_point(field_release:lm.message.StartWorkUnitRunner.me_solver)
  if (!_internal_has_me_solver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return me_solver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartWorkUnitRunner::set_allocated_me_solver(std::string* me_solver) {
  if (me_solver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  me_solver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), me_solver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lm.message.StartWorkUnitRunner.me_solver)
}

// required string diffusion_pde_solver = 11;
inline bool StartWorkUnitRunner::_internal_has_diffusion_pde_solver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StartWorkUnitRunner::has_diffusion_pde_solver() const {
  return _internal_has_diffusion_pde_solver();
}
inline void StartWorkUnitRunner::clear_diffusion_pde_solver() {
  diffusion_pde_solver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StartWorkUnitRunner::diffusion_pde_solver() const {
  // @@protoc_insertion_point(field_get:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
  return _internal_diffusion_pde_solver();
}
inline void StartWorkUnitRunner::set_diffusion_pde_solver(const std::string& value) {
  _internal_set_diffusion_pde_solver(value);
  // @@protoc_insertion_point(field_set:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
}
inline std::string* StartWorkUnitRunner::mutable_diffusion_pde_solver() {
  // @@protoc_insertion_point(field_mutable:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
  return _internal_mutable_diffusion_pde_solver();
}
inline const std::string& StartWorkUnitRunner::_internal_diffusion_pde_solver() const {
  return diffusion_pde_solver_.Get();
}
inline void StartWorkUnitRunner::_internal_set_diffusion_pde_solver(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  diffusion_pde_solver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartWorkUnitRunner::set_diffusion_pde_solver(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  diffusion_pde_solver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
}
inline void StartWorkUnitRunner::set_diffusion_pde_solver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  diffusion_pde_solver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
}
inline void StartWorkUnitRunner::set_diffusion_pde_solver(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  diffusion_pde_solver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
}
inline std::string* StartWorkUnitRunner::_internal_mutable_diffusion_pde_solver() {
  _has_bits_[0] |= 0x00000002u;
  return diffusion_pde_solver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartWorkUnitRunner::release_diffusion_pde_solver() {
  // @@protoc_insertion_point(field_release:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
  if (!_internal_has_diffusion_pde_solver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return diffusion_pde_solver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartWorkUnitRunner::set_allocated_diffusion_pde_solver(std::string* diffusion_pde_solver) {
  if (diffusion_pde_solver != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  diffusion_pde_solver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diffusion_pde_solver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lm.message.StartWorkUnitRunner.diffusion_pde_solver)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fmessage_2fStartWorkUnitRunner_2eproto
