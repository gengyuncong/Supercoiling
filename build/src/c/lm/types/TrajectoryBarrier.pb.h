// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/types/TrajectoryBarrier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fTrajectoryBarrier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fTrajectoryBarrier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTrajectoryBarrier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2ftypes_2fTrajectoryBarrier_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2ftypes_2fTrajectoryBarrier_2eproto;
namespace lm {
namespace types {
class TrajectoryBarrier;
class TrajectoryBarrierDefaultTypeInternal;
extern TrajectoryBarrierDefaultTypeInternal _TrajectoryBarrier_default_instance_;
class TrajectoryBarriers;
class TrajectoryBarriersDefaultTypeInternal;
extern TrajectoryBarriersDefaultTypeInternal _TrajectoryBarriers_default_instance_;
}  // namespace types
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::types::TrajectoryBarrier* Arena::CreateMaybeMessage<::lm::types::TrajectoryBarrier>(Arena*);
template<> ::lm::types::TrajectoryBarriers* Arena::CreateMaybeMessage<::lm::types::TrajectoryBarriers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace types {

enum TrajectoryBarrier_BarrierType : int {
  TrajectoryBarrier_BarrierType_SPECIES = 0,
  TrajectoryBarrier_BarrierType_ORDER_PARAMETER = 1
};
bool TrajectoryBarrier_BarrierType_IsValid(int value);
constexpr TrajectoryBarrier_BarrierType TrajectoryBarrier_BarrierType_BarrierType_MIN = TrajectoryBarrier_BarrierType_SPECIES;
constexpr TrajectoryBarrier_BarrierType TrajectoryBarrier_BarrierType_BarrierType_MAX = TrajectoryBarrier_BarrierType_ORDER_PARAMETER;
constexpr int TrajectoryBarrier_BarrierType_BarrierType_ARRAYSIZE = TrajectoryBarrier_BarrierType_BarrierType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryBarrier_BarrierType_descriptor();
template<typename T>
inline const std::string& TrajectoryBarrier_BarrierType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrajectoryBarrier_BarrierType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrajectoryBarrier_BarrierType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrajectoryBarrier_BarrierType_descriptor(), enum_t_value);
}
inline bool TrajectoryBarrier_BarrierType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrajectoryBarrier_BarrierType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrajectoryBarrier_BarrierType>(
    TrajectoryBarrier_BarrierType_descriptor(), name, value);
}
enum TrajectoryBarrier_BarrierBehavior : int {
  TrajectoryBarrier_BarrierBehavior_REFLECTING = 0,
  TrajectoryBarrier_BarrierBehavior_REFLECTING_DECREASING = 1,
  TrajectoryBarrier_BarrierBehavior_REFLECTING_INCREASING = 2,
  TrajectoryBarrier_BarrierBehavior_TRACKING = 3,
  TrajectoryBarrier_BarrierBehavior_TRACKING_DECREASING_INCLUSIVE = 4,
  TrajectoryBarrier_BarrierBehavior_TRACKING_INCREASING_INCLUSIVE = 5,
  TrajectoryBarrier_BarrierBehavior_TRACKING_DECREASING_EXCLUSIVE = 6,
  TrajectoryBarrier_BarrierBehavior_TRACKING_INCREASING_EXCLUSIVE = 7
};
bool TrajectoryBarrier_BarrierBehavior_IsValid(int value);
constexpr TrajectoryBarrier_BarrierBehavior TrajectoryBarrier_BarrierBehavior_BarrierBehavior_MIN = TrajectoryBarrier_BarrierBehavior_REFLECTING;
constexpr TrajectoryBarrier_BarrierBehavior TrajectoryBarrier_BarrierBehavior_BarrierBehavior_MAX = TrajectoryBarrier_BarrierBehavior_TRACKING_INCREASING_EXCLUSIVE;
constexpr int TrajectoryBarrier_BarrierBehavior_BarrierBehavior_ARRAYSIZE = TrajectoryBarrier_BarrierBehavior_BarrierBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryBarrier_BarrierBehavior_descriptor();
template<typename T>
inline const std::string& TrajectoryBarrier_BarrierBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrajectoryBarrier_BarrierBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrajectoryBarrier_BarrierBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrajectoryBarrier_BarrierBehavior_descriptor(), enum_t_value);
}
inline bool TrajectoryBarrier_BarrierBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrajectoryBarrier_BarrierBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrajectoryBarrier_BarrierBehavior>(
    TrajectoryBarrier_BarrierBehavior_descriptor(), name, value);
}
// ===================================================================

class TrajectoryBarrier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.types.TrajectoryBarrier) */ {
 public:
  inline TrajectoryBarrier() : TrajectoryBarrier(nullptr) {}
  virtual ~TrajectoryBarrier();

  TrajectoryBarrier(const TrajectoryBarrier& from);
  TrajectoryBarrier(TrajectoryBarrier&& from) noexcept
    : TrajectoryBarrier() {
    *this = ::std::move(from);
  }

  inline TrajectoryBarrier& operator=(const TrajectoryBarrier& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryBarrier& operator=(TrajectoryBarrier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryBarrier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryBarrier* internal_default_instance() {
    return reinterpret_cast<const TrajectoryBarrier*>(
               &_TrajectoryBarrier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajectoryBarrier& a, TrajectoryBarrier& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryBarrier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryBarrier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryBarrier* New() const final {
    return CreateMaybeMessage<TrajectoryBarrier>(nullptr);
  }

  TrajectoryBarrier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryBarrier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryBarrier& from);
  void MergeFrom(const TrajectoryBarrier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryBarrier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.types.TrajectoryBarrier";
  }
  protected:
  explicit TrajectoryBarrier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2ftypes_2fTrajectoryBarrier_2eproto);
    return ::descriptor_table_lm_2ftypes_2fTrajectoryBarrier_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrajectoryBarrier_BarrierType BarrierType;
  static constexpr BarrierType SPECIES =
    TrajectoryBarrier_BarrierType_SPECIES;
  static constexpr BarrierType ORDER_PARAMETER =
    TrajectoryBarrier_BarrierType_ORDER_PARAMETER;
  static inline bool BarrierType_IsValid(int value) {
    return TrajectoryBarrier_BarrierType_IsValid(value);
  }
  static constexpr BarrierType BarrierType_MIN =
    TrajectoryBarrier_BarrierType_BarrierType_MIN;
  static constexpr BarrierType BarrierType_MAX =
    TrajectoryBarrier_BarrierType_BarrierType_MAX;
  static constexpr int BarrierType_ARRAYSIZE =
    TrajectoryBarrier_BarrierType_BarrierType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BarrierType_descriptor() {
    return TrajectoryBarrier_BarrierType_descriptor();
  }
  template<typename T>
  static inline const std::string& BarrierType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BarrierType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BarrierType_Name.");
    return TrajectoryBarrier_BarrierType_Name(enum_t_value);
  }
  static inline bool BarrierType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BarrierType* value) {
    return TrajectoryBarrier_BarrierType_Parse(name, value);
  }

  typedef TrajectoryBarrier_BarrierBehavior BarrierBehavior;
  static constexpr BarrierBehavior REFLECTING =
    TrajectoryBarrier_BarrierBehavior_REFLECTING;
  static constexpr BarrierBehavior REFLECTING_DECREASING =
    TrajectoryBarrier_BarrierBehavior_REFLECTING_DECREASING;
  static constexpr BarrierBehavior REFLECTING_INCREASING =
    TrajectoryBarrier_BarrierBehavior_REFLECTING_INCREASING;
  static constexpr BarrierBehavior TRACKING =
    TrajectoryBarrier_BarrierBehavior_TRACKING;
  static constexpr BarrierBehavior TRACKING_DECREASING_INCLUSIVE =
    TrajectoryBarrier_BarrierBehavior_TRACKING_DECREASING_INCLUSIVE;
  static constexpr BarrierBehavior TRACKING_INCREASING_INCLUSIVE =
    TrajectoryBarrier_BarrierBehavior_TRACKING_INCREASING_INCLUSIVE;
  static constexpr BarrierBehavior TRACKING_DECREASING_EXCLUSIVE =
    TrajectoryBarrier_BarrierBehavior_TRACKING_DECREASING_EXCLUSIVE;
  static constexpr BarrierBehavior TRACKING_INCREASING_EXCLUSIVE =
    TrajectoryBarrier_BarrierBehavior_TRACKING_INCREASING_EXCLUSIVE;
  static inline bool BarrierBehavior_IsValid(int value) {
    return TrajectoryBarrier_BarrierBehavior_IsValid(value);
  }
  static constexpr BarrierBehavior BarrierBehavior_MIN =
    TrajectoryBarrier_BarrierBehavior_BarrierBehavior_MIN;
  static constexpr BarrierBehavior BarrierBehavior_MAX =
    TrajectoryBarrier_BarrierBehavior_BarrierBehavior_MAX;
  static constexpr int BarrierBehavior_ARRAYSIZE =
    TrajectoryBarrier_BarrierBehavior_BarrierBehavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BarrierBehavior_descriptor() {
    return TrajectoryBarrier_BarrierBehavior_descriptor();
  }
  template<typename T>
  static inline const std::string& BarrierBehavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BarrierBehavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BarrierBehavior_Name.");
    return TrajectoryBarrier_BarrierBehavior_Name(enum_t_value);
  }
  static inline bool BarrierBehavior_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BarrierBehavior* value) {
    return TrajectoryBarrier_BarrierBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTypeArgFieldNumber = 2,
    kBehaviorFieldNumber = 11,
    kBehaviorValueDoubleFieldNumber = 12,
    kBehaviorValueIntFieldNumber = 13,
  };
  // required .lm.types.TrajectoryBarrier.BarrierType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::lm::types::TrajectoryBarrier_BarrierType type() const;
  void set_type(::lm::types::TrajectoryBarrier_BarrierType value);
  private:
  ::lm::types::TrajectoryBarrier_BarrierType _internal_type() const;
  void _internal_set_type(::lm::types::TrajectoryBarrier_BarrierType value);
  public:

  // optional uint32 type_arg = 2;
  bool has_type_arg() const;
  private:
  bool _internal_has_type_arg() const;
  public:
  void clear_type_arg();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_arg() const;
  void set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_arg() const;
  void _internal_set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .lm.types.TrajectoryBarrier.BarrierBehavior behavior = 11;
  bool has_behavior() const;
  private:
  bool _internal_has_behavior() const;
  public:
  void clear_behavior();
  ::lm::types::TrajectoryBarrier_BarrierBehavior behavior() const;
  void set_behavior(::lm::types::TrajectoryBarrier_BarrierBehavior value);
  private:
  ::lm::types::TrajectoryBarrier_BarrierBehavior _internal_behavior() const;
  void _internal_set_behavior(::lm::types::TrajectoryBarrier_BarrierBehavior value);
  public:

  // optional double behavior_value_double = 12 [default = 0];
  bool has_behavior_value_double() const;
  private:
  bool _internal_has_behavior_value_double() const;
  public:
  void clear_behavior_value_double();
  double behavior_value_double() const;
  void set_behavior_value_double(double value);
  private:
  double _internal_behavior_value_double() const;
  void _internal_set_behavior_value_double(double value);
  public:

  // optional int64 behavior_value_int = 13 [default = 0];
  bool has_behavior_value_int() const;
  private:
  bool _internal_has_behavior_value_int() const;
  public:
  void clear_behavior_value_int();
  ::PROTOBUF_NAMESPACE_ID::int64 behavior_value_int() const;
  void set_behavior_value_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_behavior_value_int() const;
  void _internal_set_behavior_value_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.types.TrajectoryBarrier)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_arg_;
  int behavior_;
  double behavior_value_double_;
  ::PROTOBUF_NAMESPACE_ID::int64 behavior_value_int_;
  friend struct ::TableStruct_lm_2ftypes_2fTrajectoryBarrier_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryBarriers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.types.TrajectoryBarriers) */ {
 public:
  inline TrajectoryBarriers() : TrajectoryBarriers(nullptr) {}
  virtual ~TrajectoryBarriers();

  TrajectoryBarriers(const TrajectoryBarriers& from);
  TrajectoryBarriers(TrajectoryBarriers&& from) noexcept
    : TrajectoryBarriers() {
    *this = ::std::move(from);
  }

  inline TrajectoryBarriers& operator=(const TrajectoryBarriers& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryBarriers& operator=(TrajectoryBarriers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryBarriers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryBarriers* internal_default_instance() {
    return reinterpret_cast<const TrajectoryBarriers*>(
               &_TrajectoryBarriers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrajectoryBarriers& a, TrajectoryBarriers& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryBarriers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryBarriers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryBarriers* New() const final {
    return CreateMaybeMessage<TrajectoryBarriers>(nullptr);
  }

  TrajectoryBarriers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryBarriers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryBarriers& from);
  void MergeFrom(const TrajectoryBarriers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryBarriers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.types.TrajectoryBarriers";
  }
  protected:
  explicit TrajectoryBarriers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2ftypes_2fTrajectoryBarrier_2eproto);
    return ::descriptor_table_lm_2ftypes_2fTrajectoryBarrier_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarrierFieldNumber = 1,
  };
  // repeated .lm.types.TrajectoryBarrier barrier = 1;
  int barrier_size() const;
  private:
  int _internal_barrier_size() const;
  public:
  void clear_barrier();
  ::lm::types::TrajectoryBarrier* mutable_barrier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryBarrier >*
      mutable_barrier();
  private:
  const ::lm::types::TrajectoryBarrier& _internal_barrier(int index) const;
  ::lm::types::TrajectoryBarrier* _internal_add_barrier();
  public:
  const ::lm::types::TrajectoryBarrier& barrier(int index) const;
  ::lm::types::TrajectoryBarrier* add_barrier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryBarrier >&
      barrier() const;

  // @@protoc_insertion_point(class_scope:lm.types.TrajectoryBarriers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryBarrier > barrier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lm_2ftypes_2fTrajectoryBarrier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryBarrier

// required .lm.types.TrajectoryBarrier.BarrierType type = 1;
inline bool TrajectoryBarrier::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrajectoryBarrier::has_type() const {
  return _internal_has_type();
}
inline void TrajectoryBarrier::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::lm::types::TrajectoryBarrier_BarrierType TrajectoryBarrier::_internal_type() const {
  return static_cast< ::lm::types::TrajectoryBarrier_BarrierType >(type_);
}
inline ::lm::types::TrajectoryBarrier_BarrierType TrajectoryBarrier::type() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryBarrier.type)
  return _internal_type();
}
inline void TrajectoryBarrier::_internal_set_type(::lm::types::TrajectoryBarrier_BarrierType value) {
  assert(::lm::types::TrajectoryBarrier_BarrierType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void TrajectoryBarrier::set_type(::lm::types::TrajectoryBarrier_BarrierType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryBarrier.type)
}

// optional uint32 type_arg = 2;
inline bool TrajectoryBarrier::_internal_has_type_arg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrajectoryBarrier::has_type_arg() const {
  return _internal_has_type_arg();
}
inline void TrajectoryBarrier::clear_type_arg() {
  type_arg_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajectoryBarrier::_internal_type_arg() const {
  return type_arg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajectoryBarrier::type_arg() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryBarrier.type_arg)
  return _internal_type_arg();
}
inline void TrajectoryBarrier::_internal_set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_arg_ = value;
}
inline void TrajectoryBarrier::set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_arg(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryBarrier.type_arg)
}

// required .lm.types.TrajectoryBarrier.BarrierBehavior behavior = 11;
inline bool TrajectoryBarrier::_internal_has_behavior() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrajectoryBarrier::has_behavior() const {
  return _internal_has_behavior();
}
inline void TrajectoryBarrier::clear_behavior() {
  behavior_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::lm::types::TrajectoryBarrier_BarrierBehavior TrajectoryBarrier::_internal_behavior() const {
  return static_cast< ::lm::types::TrajectoryBarrier_BarrierBehavior >(behavior_);
}
inline ::lm::types::TrajectoryBarrier_BarrierBehavior TrajectoryBarrier::behavior() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryBarrier.behavior)
  return _internal_behavior();
}
inline void TrajectoryBarrier::_internal_set_behavior(::lm::types::TrajectoryBarrier_BarrierBehavior value) {
  assert(::lm::types::TrajectoryBarrier_BarrierBehavior_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  behavior_ = value;
}
inline void TrajectoryBarrier::set_behavior(::lm::types::TrajectoryBarrier_BarrierBehavior value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryBarrier.behavior)
}

// optional double behavior_value_double = 12 [default = 0];
inline bool TrajectoryBarrier::_internal_has_behavior_value_double() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrajectoryBarrier::has_behavior_value_double() const {
  return _internal_has_behavior_value_double();
}
inline void TrajectoryBarrier::clear_behavior_value_double() {
  behavior_value_double_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrajectoryBarrier::_internal_behavior_value_double() const {
  return behavior_value_double_;
}
inline double TrajectoryBarrier::behavior_value_double() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryBarrier.behavior_value_double)
  return _internal_behavior_value_double();
}
inline void TrajectoryBarrier::_internal_set_behavior_value_double(double value) {
  _has_bits_[0] |= 0x00000008u;
  behavior_value_double_ = value;
}
inline void TrajectoryBarrier::set_behavior_value_double(double value) {
  _internal_set_behavior_value_double(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryBarrier.behavior_value_double)
}

// optional int64 behavior_value_int = 13 [default = 0];
inline bool TrajectoryBarrier::_internal_has_behavior_value_int() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrajectoryBarrier::has_behavior_value_int() const {
  return _internal_has_behavior_value_int();
}
inline void TrajectoryBarrier::clear_behavior_value_int() {
  behavior_value_int_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrajectoryBarrier::_internal_behavior_value_int() const {
  return behavior_value_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrajectoryBarrier::behavior_value_int() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryBarrier.behavior_value_int)
  return _internal_behavior_value_int();
}
inline void TrajectoryBarrier::_internal_set_behavior_value_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  behavior_value_int_ = value;
}
inline void TrajectoryBarrier::set_behavior_value_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_behavior_value_int(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryBarrier.behavior_value_int)
}

// -------------------------------------------------------------------

// TrajectoryBarriers

// repeated .lm.types.TrajectoryBarrier barrier = 1;
inline int TrajectoryBarriers::_internal_barrier_size() const {
  return barrier_.size();
}
inline int TrajectoryBarriers::barrier_size() const {
  return _internal_barrier_size();
}
inline void TrajectoryBarriers::clear_barrier() {
  barrier_.Clear();
}
inline ::lm::types::TrajectoryBarrier* TrajectoryBarriers::mutable_barrier(int index) {
  // @@protoc_insertion_point(field_mutable:lm.types.TrajectoryBarriers.barrier)
  return barrier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryBarrier >*
TrajectoryBarriers::mutable_barrier() {
  // @@protoc_insertion_point(field_mutable_list:lm.types.TrajectoryBarriers.barrier)
  return &barrier_;
}
inline const ::lm::types::TrajectoryBarrier& TrajectoryBarriers::_internal_barrier(int index) const {
  return barrier_.Get(index);
}
inline const ::lm::types::TrajectoryBarrier& TrajectoryBarriers::barrier(int index) const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryBarriers.barrier)
  return _internal_barrier(index);
}
inline ::lm::types::TrajectoryBarrier* TrajectoryBarriers::_internal_add_barrier() {
  return barrier_.Add();
}
inline ::lm::types::TrajectoryBarrier* TrajectoryBarriers::add_barrier() {
  // @@protoc_insertion_point(field_add:lm.types.TrajectoryBarriers.barrier)
  return _internal_add_barrier();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryBarrier >&
TrajectoryBarriers::barrier() const {
  // @@protoc_insertion_point(field_list:lm.types.TrajectoryBarriers.barrier)
  return barrier_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace lm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lm::types::TrajectoryBarrier_BarrierType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::types::TrajectoryBarrier_BarrierType>() {
  return ::lm::types::TrajectoryBarrier_BarrierType_descriptor();
}
template <> struct is_proto_enum< ::lm::types::TrajectoryBarrier_BarrierBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::types::TrajectoryBarrier_BarrierBehavior>() {
  return ::lm::types::TrajectoryBarrier_BarrierBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fTrajectoryBarrier_2eproto
