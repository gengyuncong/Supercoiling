// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/types/TrajectoryLimits.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fTrajectoryLimits_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fTrajectoryLimits_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTrajectoryLimits_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2ftypes_2fTrajectoryLimits_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto;
namespace lm {
namespace types {
class TrajectoryLimit;
class TrajectoryLimitDefaultTypeInternal;
extern TrajectoryLimitDefaultTypeInternal _TrajectoryLimit_default_instance_;
class TrajectoryLimits;
class TrajectoryLimitsDefaultTypeInternal;
extern TrajectoryLimitsDefaultTypeInternal _TrajectoryLimits_default_instance_;
}  // namespace types
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::types::TrajectoryLimit* Arena::CreateMaybeMessage<::lm::types::TrajectoryLimit>(Arena*);
template<> ::lm::types::TrajectoryLimits* Arena::CreateMaybeMessage<::lm::types::TrajectoryLimits>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace types {

enum TrajectoryLimit_LimitType : int {
  TrajectoryLimit_LimitType_NONE = 0,
  TrajectoryLimit_LimitType_TIME = 1,
  TrajectoryLimit_LimitType_SPECIES = 2,
  TrajectoryLimit_LimitType_ORDER_PARAMETER = 3,
  TrajectoryLimit_LimitType_DEGREE_ADVANCEMENT = 4,
  TrajectoryLimit_LimitType_BARRIER_CROSSING = 5
};
bool TrajectoryLimit_LimitType_IsValid(int value);
constexpr TrajectoryLimit_LimitType TrajectoryLimit_LimitType_LimitType_MIN = TrajectoryLimit_LimitType_NONE;
constexpr TrajectoryLimit_LimitType TrajectoryLimit_LimitType_LimitType_MAX = TrajectoryLimit_LimitType_BARRIER_CROSSING;
constexpr int TrajectoryLimit_LimitType_LimitType_ARRAYSIZE = TrajectoryLimit_LimitType_LimitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryLimit_LimitType_descriptor();
template<typename T>
inline const std::string& TrajectoryLimit_LimitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrajectoryLimit_LimitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrajectoryLimit_LimitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrajectoryLimit_LimitType_descriptor(), enum_t_value);
}
inline bool TrajectoryLimit_LimitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrajectoryLimit_LimitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrajectoryLimit_LimitType>(
    TrajectoryLimit_LimitType_descriptor(), name, value);
}
enum TrajectoryLimit_StoppingCondition : int {
  TrajectoryLimit_StoppingCondition_MIN_EXCLUSIVE = 0,
  TrajectoryLimit_StoppingCondition_MIN_INCLUSIVE = 1,
  TrajectoryLimit_StoppingCondition_MAX_EXCLUSIVE = 2,
  TrajectoryLimit_StoppingCondition_MAX_INCLUSIVE = 3,
  TrajectoryLimit_StoppingCondition_DECREASING_EXCLUSIVE = 4,
  TrajectoryLimit_StoppingCondition_DECREASING_INCLUSIVE = 5,
  TrajectoryLimit_StoppingCondition_INCREASING_EXCLUSIVE = 6,
  TrajectoryLimit_StoppingCondition_INCREASING_INCLUSIVE = 7
};
bool TrajectoryLimit_StoppingCondition_IsValid(int value);
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit_StoppingCondition_StoppingCondition_MIN = TrajectoryLimit_StoppingCondition_MIN_EXCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit_StoppingCondition_StoppingCondition_MAX = TrajectoryLimit_StoppingCondition_INCREASING_INCLUSIVE;
constexpr int TrajectoryLimit_StoppingCondition_StoppingCondition_ARRAYSIZE = TrajectoryLimit_StoppingCondition_StoppingCondition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryLimit_StoppingCondition_descriptor();
template<typename T>
inline const std::string& TrajectoryLimit_StoppingCondition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrajectoryLimit_StoppingCondition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrajectoryLimit_StoppingCondition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrajectoryLimit_StoppingCondition_descriptor(), enum_t_value);
}
inline bool TrajectoryLimit_StoppingCondition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrajectoryLimit_StoppingCondition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrajectoryLimit_StoppingCondition>(
    TrajectoryLimit_StoppingCondition_descriptor(), name, value);
}
// ===================================================================

class TrajectoryLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.types.TrajectoryLimit) */ {
 public:
  inline TrajectoryLimit() : TrajectoryLimit(nullptr) {}
  virtual ~TrajectoryLimit();

  TrajectoryLimit(const TrajectoryLimit& from);
  TrajectoryLimit(TrajectoryLimit&& from) noexcept
    : TrajectoryLimit() {
    *this = ::std::move(from);
  }

  inline TrajectoryLimit& operator=(const TrajectoryLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryLimit& operator=(TrajectoryLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryLimit* internal_default_instance() {
    return reinterpret_cast<const TrajectoryLimit*>(
               &_TrajectoryLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajectoryLimit& a, TrajectoryLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryLimit* New() const final {
    return CreateMaybeMessage<TrajectoryLimit>(nullptr);
  }

  TrajectoryLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryLimit& from);
  void MergeFrom(const TrajectoryLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.types.TrajectoryLimit";
  }
  protected:
  explicit TrajectoryLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto);
    return ::descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrajectoryLimit_LimitType LimitType;
  static constexpr LimitType NONE =
    TrajectoryLimit_LimitType_NONE;
  static constexpr LimitType TIME =
    TrajectoryLimit_LimitType_TIME;
  static constexpr LimitType SPECIES =
    TrajectoryLimit_LimitType_SPECIES;
  static constexpr LimitType ORDER_PARAMETER =
    TrajectoryLimit_LimitType_ORDER_PARAMETER;
  static constexpr LimitType DEGREE_ADVANCEMENT =
    TrajectoryLimit_LimitType_DEGREE_ADVANCEMENT;
  static constexpr LimitType BARRIER_CROSSING =
    TrajectoryLimit_LimitType_BARRIER_CROSSING;
  static inline bool LimitType_IsValid(int value) {
    return TrajectoryLimit_LimitType_IsValid(value);
  }
  static constexpr LimitType LimitType_MIN =
    TrajectoryLimit_LimitType_LimitType_MIN;
  static constexpr LimitType LimitType_MAX =
    TrajectoryLimit_LimitType_LimitType_MAX;
  static constexpr int LimitType_ARRAYSIZE =
    TrajectoryLimit_LimitType_LimitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LimitType_descriptor() {
    return TrajectoryLimit_LimitType_descriptor();
  }
  template<typename T>
  static inline const std::string& LimitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LimitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LimitType_Name.");
    return TrajectoryLimit_LimitType_Name(enum_t_value);
  }
  static inline bool LimitType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LimitType* value) {
    return TrajectoryLimit_LimitType_Parse(name, value);
  }

  typedef TrajectoryLimit_StoppingCondition StoppingCondition;
  static constexpr StoppingCondition MIN_EXCLUSIVE =
    TrajectoryLimit_StoppingCondition_MIN_EXCLUSIVE;
  static constexpr StoppingCondition MIN_INCLUSIVE =
    TrajectoryLimit_StoppingCondition_MIN_INCLUSIVE;
  static constexpr StoppingCondition MAX_EXCLUSIVE =
    TrajectoryLimit_StoppingCondition_MAX_EXCLUSIVE;
  static constexpr StoppingCondition MAX_INCLUSIVE =
    TrajectoryLimit_StoppingCondition_MAX_INCLUSIVE;
  static constexpr StoppingCondition DECREASING_EXCLUSIVE =
    TrajectoryLimit_StoppingCondition_DECREASING_EXCLUSIVE;
  static constexpr StoppingCondition DECREASING_INCLUSIVE =
    TrajectoryLimit_StoppingCondition_DECREASING_INCLUSIVE;
  static constexpr StoppingCondition INCREASING_EXCLUSIVE =
    TrajectoryLimit_StoppingCondition_INCREASING_EXCLUSIVE;
  static constexpr StoppingCondition INCREASING_INCLUSIVE =
    TrajectoryLimit_StoppingCondition_INCREASING_INCLUSIVE;
  static inline bool StoppingCondition_IsValid(int value) {
    return TrajectoryLimit_StoppingCondition_IsValid(value);
  }
  static constexpr StoppingCondition StoppingCondition_MIN =
    TrajectoryLimit_StoppingCondition_StoppingCondition_MIN;
  static constexpr StoppingCondition StoppingCondition_MAX =
    TrajectoryLimit_StoppingCondition_StoppingCondition_MAX;
  static constexpr int StoppingCondition_ARRAYSIZE =
    TrajectoryLimit_StoppingCondition_StoppingCondition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StoppingCondition_descriptor() {
    return TrajectoryLimit_StoppingCondition_descriptor();
  }
  template<typename T>
  static inline const std::string& StoppingCondition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StoppingCondition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StoppingCondition_Name.");
    return TrajectoryLimit_StoppingCondition_Name(enum_t_value);
  }
  static inline bool StoppingCondition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StoppingCondition* value) {
    return TrajectoryLimit_StoppingCondition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStoppingConditionFieldNumber = 11,
    kStoppingValueDoubleFieldNumber = 12,
    kStoppingValueIntFieldNumber = 13,
    kTypeFieldNumber = 21,
    kTypeArgFieldNumber = 22,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .lm.types.TrajectoryLimit.StoppingCondition stopping_condition = 11;
  bool has_stopping_condition() const;
  private:
  bool _internal_has_stopping_condition() const;
  public:
  void clear_stopping_condition();
  ::lm::types::TrajectoryLimit_StoppingCondition stopping_condition() const;
  void set_stopping_condition(::lm::types::TrajectoryLimit_StoppingCondition value);
  private:
  ::lm::types::TrajectoryLimit_StoppingCondition _internal_stopping_condition() const;
  void _internal_set_stopping_condition(::lm::types::TrajectoryLimit_StoppingCondition value);
  public:

  // optional double stopping_value_double = 12 [default = 0];
  bool has_stopping_value_double() const;
  private:
  bool _internal_has_stopping_value_double() const;
  public:
  void clear_stopping_value_double();
  double stopping_value_double() const;
  void set_stopping_value_double(double value);
  private:
  double _internal_stopping_value_double() const;
  void _internal_set_stopping_value_double(double value);
  public:

  // optional int64 stopping_value_int = 13 [default = 0];
  bool has_stopping_value_int() const;
  private:
  bool _internal_has_stopping_value_int() const;
  public:
  void clear_stopping_value_int();
  ::PROTOBUF_NAMESPACE_ID::int64 stopping_value_int() const;
  void set_stopping_value_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stopping_value_int() const;
  void _internal_set_stopping_value_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .lm.types.TrajectoryLimit.LimitType type = 21;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::lm::types::TrajectoryLimit_LimitType type() const;
  void set_type(::lm::types::TrajectoryLimit_LimitType value);
  private:
  ::lm::types::TrajectoryLimit_LimitType _internal_type() const;
  void _internal_set_type(::lm::types::TrajectoryLimit_LimitType value);
  public:

  // optional uint32 type_arg = 22;
  bool has_type_arg() const;
  private:
  bool _internal_has_type_arg() const;
  public:
  void clear_type_arg();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_arg() const;
  void set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_arg() const;
  void _internal_set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.types.TrajectoryLimit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int stopping_condition_;
  double stopping_value_double_;
  ::PROTOBUF_NAMESPACE_ID::int64 stopping_value_int_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_arg_;
  friend struct ::TableStruct_lm_2ftypes_2fTrajectoryLimits_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryLimits PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.types.TrajectoryLimits) */ {
 public:
  inline TrajectoryLimits() : TrajectoryLimits(nullptr) {}
  virtual ~TrajectoryLimits();

  TrajectoryLimits(const TrajectoryLimits& from);
  TrajectoryLimits(TrajectoryLimits&& from) noexcept
    : TrajectoryLimits() {
    *this = ::std::move(from);
  }

  inline TrajectoryLimits& operator=(const TrajectoryLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryLimits& operator=(TrajectoryLimits&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryLimits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryLimits* internal_default_instance() {
    return reinterpret_cast<const TrajectoryLimits*>(
               &_TrajectoryLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrajectoryLimits& a, TrajectoryLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryLimits* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryLimits* New() const final {
    return CreateMaybeMessage<TrajectoryLimits>(nullptr);
  }

  TrajectoryLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryLimits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryLimits& from);
  void MergeFrom(const TrajectoryLimits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryLimits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.types.TrajectoryLimits";
  }
  protected:
  explicit TrajectoryLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto);
    return ::descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 1,
  };
  // repeated .lm.types.TrajectoryLimit limits = 1;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  ::lm::types::TrajectoryLimit* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryLimit >*
      mutable_limits();
  private:
  const ::lm::types::TrajectoryLimit& _internal_limits(int index) const;
  ::lm::types::TrajectoryLimit* _internal_add_limits();
  public:
  const ::lm::types::TrajectoryLimit& limits(int index) const;
  ::lm::types::TrajectoryLimit* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryLimit >&
      limits() const;

  // @@protoc_insertion_point(class_scope:lm.types.TrajectoryLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryLimit > limits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lm_2ftypes_2fTrajectoryLimits_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryLimit

// required int32 id = 1;
inline bool TrajectoryLimit::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrajectoryLimit::has_id() const {
  return _internal_has_id();
}
inline void TrajectoryLimit::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrajectoryLimit::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrajectoryLimit::id() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryLimit.id)
  return _internal_id();
}
inline void TrajectoryLimit::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void TrajectoryLimit::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryLimit.id)
}

// required .lm.types.TrajectoryLimit.LimitType type = 21;
inline bool TrajectoryLimit::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrajectoryLimit::has_type() const {
  return _internal_has_type();
}
inline void TrajectoryLimit::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::lm::types::TrajectoryLimit_LimitType TrajectoryLimit::_internal_type() const {
  return static_cast< ::lm::types::TrajectoryLimit_LimitType >(type_);
}
inline ::lm::types::TrajectoryLimit_LimitType TrajectoryLimit::type() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryLimit.type)
  return _internal_type();
}
inline void TrajectoryLimit::_internal_set_type(::lm::types::TrajectoryLimit_LimitType value) {
  assert(::lm::types::TrajectoryLimit_LimitType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void TrajectoryLimit::set_type(::lm::types::TrajectoryLimit_LimitType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryLimit.type)
}

// optional uint32 type_arg = 22;
inline bool TrajectoryLimit::_internal_has_type_arg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrajectoryLimit::has_type_arg() const {
  return _internal_has_type_arg();
}
inline void TrajectoryLimit::clear_type_arg() {
  type_arg_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajectoryLimit::_internal_type_arg() const {
  return type_arg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajectoryLimit::type_arg() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryLimit.type_arg)
  return _internal_type_arg();
}
inline void TrajectoryLimit::_internal_set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  type_arg_ = value;
}
inline void TrajectoryLimit::set_type_arg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_arg(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryLimit.type_arg)
}

// required .lm.types.TrajectoryLimit.StoppingCondition stopping_condition = 11;
inline bool TrajectoryLimit::_internal_has_stopping_condition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrajectoryLimit::has_stopping_condition() const {
  return _internal_has_stopping_condition();
}
inline void TrajectoryLimit::clear_stopping_condition() {
  stopping_condition_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::lm::types::TrajectoryLimit_StoppingCondition TrajectoryLimit::_internal_stopping_condition() const {
  return static_cast< ::lm::types::TrajectoryLimit_StoppingCondition >(stopping_condition_);
}
inline ::lm::types::TrajectoryLimit_StoppingCondition TrajectoryLimit::stopping_condition() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryLimit.stopping_condition)
  return _internal_stopping_condition();
}
inline void TrajectoryLimit::_internal_set_stopping_condition(::lm::types::TrajectoryLimit_StoppingCondition value) {
  assert(::lm::types::TrajectoryLimit_StoppingCondition_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  stopping_condition_ = value;
}
inline void TrajectoryLimit::set_stopping_condition(::lm::types::TrajectoryLimit_StoppingCondition value) {
  _internal_set_stopping_condition(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryLimit.stopping_condition)
}

// optional double stopping_value_double = 12 [default = 0];
inline bool TrajectoryLimit::_internal_has_stopping_value_double() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrajectoryLimit::has_stopping_value_double() const {
  return _internal_has_stopping_value_double();
}
inline void TrajectoryLimit::clear_stopping_value_double() {
  stopping_value_double_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrajectoryLimit::_internal_stopping_value_double() const {
  return stopping_value_double_;
}
inline double TrajectoryLimit::stopping_value_double() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryLimit.stopping_value_double)
  return _internal_stopping_value_double();
}
inline void TrajectoryLimit::_internal_set_stopping_value_double(double value) {
  _has_bits_[0] |= 0x00000004u;
  stopping_value_double_ = value;
}
inline void TrajectoryLimit::set_stopping_value_double(double value) {
  _internal_set_stopping_value_double(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryLimit.stopping_value_double)
}

// optional int64 stopping_value_int = 13 [default = 0];
inline bool TrajectoryLimit::_internal_has_stopping_value_int() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrajectoryLimit::has_stopping_value_int() const {
  return _internal_has_stopping_value_int();
}
inline void TrajectoryLimit::clear_stopping_value_int() {
  stopping_value_int_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrajectoryLimit::_internal_stopping_value_int() const {
  return stopping_value_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrajectoryLimit::stopping_value_int() const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryLimit.stopping_value_int)
  return _internal_stopping_value_int();
}
inline void TrajectoryLimit::_internal_set_stopping_value_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  stopping_value_int_ = value;
}
inline void TrajectoryLimit::set_stopping_value_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stopping_value_int(value);
  // @@protoc_insertion_point(field_set:lm.types.TrajectoryLimit.stopping_value_int)
}

// -------------------------------------------------------------------

// TrajectoryLimits

// repeated .lm.types.TrajectoryLimit limits = 1;
inline int TrajectoryLimits::_internal_limits_size() const {
  return limits_.size();
}
inline int TrajectoryLimits::limits_size() const {
  return _internal_limits_size();
}
inline void TrajectoryLimits::clear_limits() {
  limits_.Clear();
}
inline ::lm::types::TrajectoryLimit* TrajectoryLimits::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:lm.types.TrajectoryLimits.limits)
  return limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryLimit >*
TrajectoryLimits::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:lm.types.TrajectoryLimits.limits)
  return &limits_;
}
inline const ::lm::types::TrajectoryLimit& TrajectoryLimits::_internal_limits(int index) const {
  return limits_.Get(index);
}
inline const ::lm::types::TrajectoryLimit& TrajectoryLimits::limits(int index) const {
  // @@protoc_insertion_point(field_get:lm.types.TrajectoryLimits.limits)
  return _internal_limits(index);
}
inline ::lm::types::TrajectoryLimit* TrajectoryLimits::_internal_add_limits() {
  return limits_.Add();
}
inline ::lm::types::TrajectoryLimit* TrajectoryLimits::add_limits() {
  // @@protoc_insertion_point(field_add:lm.types.TrajectoryLimits.limits)
  return _internal_add_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::types::TrajectoryLimit >&
TrajectoryLimits::limits() const {
  // @@protoc_insertion_point(field_list:lm.types.TrajectoryLimits.limits)
  return limits_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace lm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lm::types::TrajectoryLimit_LimitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::types::TrajectoryLimit_LimitType>() {
  return ::lm::types::TrajectoryLimit_LimitType_descriptor();
}
template <> struct is_proto_enum< ::lm::types::TrajectoryLimit_StoppingCondition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::types::TrajectoryLimit_StoppingCondition>() {
  return ::lm::types::TrajectoryLimit_StoppingCondition_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fTrajectoryLimits_2eproto
