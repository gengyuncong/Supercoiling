// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/types/Tilings.proto

#include "lm/types/Tilings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTilings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tiling_lm_2ftypes_2fTilings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robertslab_2fpbuf_2fNDArray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto;
namespace lm {
namespace types {
class TilingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tiling> _instance;
} _Tiling_default_instance_;
class TilingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tilings> _instance;
} _Tilings_default_instance_;
}  // namespace types
}  // namespace lm
static void InitDefaultsscc_info_Tiling_lm_2ftypes_2fTilings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::types::_Tiling_default_instance_;
    new (ptr) ::lm::types::Tiling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::types::Tiling::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tiling_lm_2ftypes_2fTilings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tiling_lm_2ftypes_2fTilings_2eproto}, {
      &scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto.base,}};

static void InitDefaultsscc_info_Tilings_lm_2ftypes_2fTilings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::types::_Tilings_default_instance_;
    new (ptr) ::lm::types::Tilings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::types::Tilings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tilings_lm_2ftypes_2fTilings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tilings_lm_2ftypes_2fTilings_2eproto}, {
      &scc_info_Tiling_lm_2ftypes_2fTilings_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2ftypes_2fTilings_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2ftypes_2fTilings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2ftypes_2fTilings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2ftypes_2fTilings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::types::Tiling, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::types::Tiling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::types::Tiling, order_parameter_indices_),
  PROTOBUF_FIELD_OFFSET(::lm::types::Tiling, edges_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lm::types::Tilings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::types::Tilings, tiling_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::lm::types::Tiling)},
  { 9, -1, sizeof(::lm::types::Tilings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::types::_Tiling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::types::_Tilings_default_instance_),
};

const char descriptor_table_protodef_lm_2ftypes_2fTilings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026lm/types/Tilings.proto\022\010lm.types\032\035robe"
  "rtslab/pbuf/NDArray.proto\"l\n\006Tiling\0229\n\027o"
  "rder_parameter_indices\030\001 \002(\0132\030.robertsla"
  "b.pbuf.NDArray\022\'\n\005edges\030\002 \002(\0132\030.robertsl"
  "ab.pbuf.NDArray\"+\n\007Tilings\022 \n\006tiling\030\001 \003"
  "(\0132\020.lm.types.Tiling"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2ftypes_2fTilings_2eproto_deps[1] = {
  &::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2ftypes_2fTilings_2eproto_sccs[2] = {
  &scc_info_Tiling_lm_2ftypes_2fTilings_2eproto.base,
  &scc_info_Tilings_lm_2ftypes_2fTilings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2ftypes_2fTilings_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2ftypes_2fTilings_2eproto = {
  false, false, descriptor_table_protodef_lm_2ftypes_2fTilings_2eproto, "lm/types/Tilings.proto", 220,
  &descriptor_table_lm_2ftypes_2fTilings_2eproto_once, descriptor_table_lm_2ftypes_2fTilings_2eproto_sccs, descriptor_table_lm_2ftypes_2fTilings_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_lm_2ftypes_2fTilings_2eproto::offsets,
  file_level_metadata_lm_2ftypes_2fTilings_2eproto, 2, file_level_enum_descriptors_lm_2ftypes_2fTilings_2eproto, file_level_service_descriptors_lm_2ftypes_2fTilings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2ftypes_2fTilings_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2ftypes_2fTilings_2eproto)), true);
namespace lm {
namespace types {

// ===================================================================

void Tiling::InitAsDefaultInstance() {
  ::lm::types::_Tiling_default_instance_._instance.get_mutable()->order_parameter_indices_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::types::_Tiling_default_instance_._instance.get_mutable()->edges_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
}
class Tiling::_Internal {
 public:
  using HasBits = decltype(std::declval<Tiling>()._has_bits_);
  static const ::robertslab::pbuf::NDArray& order_parameter_indices(const Tiling* msg);
  static void set_has_order_parameter_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robertslab::pbuf::NDArray& edges(const Tiling* msg);
  static void set_has_edges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::robertslab::pbuf::NDArray&
Tiling::_Internal::order_parameter_indices(const Tiling* msg) {
  return *msg->order_parameter_indices_;
}
const ::robertslab::pbuf::NDArray&
Tiling::_Internal::edges(const Tiling* msg) {
  return *msg->edges_;
}
void Tiling::clear_order_parameter_indices() {
  if (order_parameter_indices_ != nullptr) order_parameter_indices_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Tiling::clear_edges() {
  if (edges_ != nullptr) edges_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Tiling::Tiling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.types.Tiling)
}
Tiling::Tiling(const Tiling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order_parameter_indices()) {
    order_parameter_indices_ = new ::robertslab::pbuf::NDArray(*from.order_parameter_indices_);
  } else {
    order_parameter_indices_ = nullptr;
  }
  if (from._internal_has_edges()) {
    edges_ = new ::robertslab::pbuf::NDArray(*from.edges_);
  } else {
    edges_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lm.types.Tiling)
}

void Tiling::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tiling_lm_2ftypes_2fTilings_2eproto.base);
  ::memset(&order_parameter_indices_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edges_) -
      reinterpret_cast<char*>(&order_parameter_indices_)) + sizeof(edges_));
}

Tiling::~Tiling() {
  // @@protoc_insertion_point(destructor:lm.types.Tiling)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tiling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_parameter_indices_;
  if (this != internal_default_instance()) delete edges_;
}

void Tiling::ArenaDtor(void* object) {
  Tiling* _this = reinterpret_cast< Tiling* >(object);
  (void)_this;
}
void Tiling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tiling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tiling& Tiling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tiling_lm_2ftypes_2fTilings_2eproto.base);
  return *internal_default_instance();
}


void Tiling::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.types.Tiling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(order_parameter_indices_ != nullptr);
      order_parameter_indices_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(edges_ != nullptr);
      edges_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tiling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .robertslab.pbuf.NDArray order_parameter_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_parameter_indices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tiling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.types.Tiling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .robertslab.pbuf.NDArray order_parameter_indices = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order_parameter_indices(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray edges = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edges(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.types.Tiling)
  return target;
}

size_t Tiling::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.types.Tiling)
  size_t total_size = 0;

  if (_internal_has_order_parameter_indices()) {
    // required .robertslab.pbuf.NDArray order_parameter_indices = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_parameter_indices_);
  }

  if (_internal_has_edges()) {
    // required .robertslab.pbuf.NDArray edges = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);
  }

  return total_size;
}
size_t Tiling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.types.Tiling)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .robertslab.pbuf.NDArray order_parameter_indices = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_parameter_indices_);

    // required .robertslab.pbuf.NDArray edges = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tiling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.types.Tiling)
  GOOGLE_DCHECK_NE(&from, this);
  const Tiling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tiling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.types.Tiling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.types.Tiling)
    MergeFrom(*source);
  }
}

void Tiling::MergeFrom(const Tiling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.types.Tiling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_order_parameter_indices()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_order_parameter_indices());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_edges()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_edges());
    }
  }
}

void Tiling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.types.Tiling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tiling::CopyFrom(const Tiling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.types.Tiling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tiling::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_order_parameter_indices()) {
    if (!order_parameter_indices_->IsInitialized()) return false;
  }
  if (_internal_has_edges()) {
    if (!edges_->IsInitialized()) return false;
  }
  return true;
}

void Tiling::InternalSwap(Tiling* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tiling, edges_)
      + sizeof(Tiling::edges_)
      - PROTOBUF_FIELD_OFFSET(Tiling, order_parameter_indices_)>(
          reinterpret_cast<char*>(&order_parameter_indices_),
          reinterpret_cast<char*>(&other->order_parameter_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tiling::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tilings::InitAsDefaultInstance() {
}
class Tilings::_Internal {
 public:
};

Tilings::Tilings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tiling_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.types.Tilings)
}
Tilings::Tilings(const Tilings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tiling_(from.tiling_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lm.types.Tilings)
}

void Tilings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tilings_lm_2ftypes_2fTilings_2eproto.base);
}

Tilings::~Tilings() {
  // @@protoc_insertion_point(destructor:lm.types.Tilings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tilings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Tilings::ArenaDtor(void* object) {
  Tilings* _this = reinterpret_cast< Tilings* >(object);
  (void)_this;
}
void Tilings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tilings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tilings& Tilings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tilings_lm_2ftypes_2fTilings_2eproto.base);
  return *internal_default_instance();
}


void Tilings::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.types.Tilings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiling_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tilings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lm.types.Tiling tiling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiling(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tilings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.types.Tilings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lm.types.Tiling tiling = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiling_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tiling(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.types.Tilings)
  return target;
}

size_t Tilings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.types.Tilings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.types.Tiling tiling = 1;
  total_size += 1UL * this->_internal_tiling_size();
  for (const auto& msg : this->tiling_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tilings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.types.Tilings)
  GOOGLE_DCHECK_NE(&from, this);
  const Tilings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tilings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.types.Tilings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.types.Tilings)
    MergeFrom(*source);
  }
}

void Tilings::MergeFrom(const Tilings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.types.Tilings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiling_.MergeFrom(from.tiling_);
}

void Tilings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.types.Tilings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tilings::CopyFrom(const Tilings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.types.Tilings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tilings::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tiling_)) return false;
  return true;
}

void Tilings::InternalSwap(Tilings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tiling_.InternalSwap(&other->tiling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tilings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::types::Tiling* Arena::CreateMaybeMessage< ::lm::types::Tiling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::types::Tiling >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::types::Tilings* Arena::CreateMaybeMessage< ::lm::types::Tilings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::types::Tilings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
