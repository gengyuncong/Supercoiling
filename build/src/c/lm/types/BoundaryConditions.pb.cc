// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/types/BoundaryConditions.proto

#include "lm/types/BoundaryConditions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_robertslab_2fpbuf_2fNDArray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto;
namespace lm {
namespace types {
class BoundaryConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryConditions> _instance;
} _BoundaryConditions_default_instance_;
}  // namespace types
}  // namespace lm
static void InitDefaultsscc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::types::_BoundaryConditions_default_instance_;
    new (ptr) ::lm::types::BoundaryConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::types::BoundaryConditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto}, {
      &scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2ftypes_2fBoundaryConditions_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lm_2ftypes_2fBoundaryConditions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2ftypes_2fBoundaryConditions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2ftypes_2fBoundaryConditions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, global_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, axis_specific_boundaries_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, x_plus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, x_minus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, y_plus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, y_minus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, z_plus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, z_minus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_species_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_site_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_concentration_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_concentration_x_plus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_concentration_x_minus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_concentration_y_plus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_concentration_y_minus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_concentration_z_plus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_concentration_z_minus_),
  PROTOBUF_FIELD_OFFSET(::lm::types::BoundaryConditions, boundary_gradient_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::lm::types::BoundaryConditions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::types::_BoundaryConditions_default_instance_),
};

const char descriptor_table_protodef_lm_2ftypes_2fBoundaryConditions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!lm/types/BoundaryConditions.proto\022\010lm."
  "types\032\035robertslab/pbuf/NDArray.proto\"\240\010\n"
  "\022BoundaryConditions\022C\n\006global\030\001 \001(\01623.lm"
  ".types.BoundaryConditions.BoundaryCondit"
  "ionsType\022\'\n\030axis_specific_boundaries\030\002 \001"
  "(\010:\005false\022C\n\006x_plus\030\003 \001(\01623.lm.types.Bou"
  "ndaryConditions.BoundaryConditionsType\022D"
  "\n\007x_minus\030\004 \001(\01623.lm.types.BoundaryCondi"
  "tions.BoundaryConditionsType\022C\n\006y_plus\030\005"
  " \001(\01623.lm.types.BoundaryConditions.Bound"
  "aryConditionsType\022D\n\007y_minus\030\006 \001(\01623.lm."
  "types.BoundaryConditions.BoundaryConditi"
  "onsType\022C\n\006z_plus\030\007 \001(\01623.lm.types.Bound"
  "aryConditions.BoundaryConditionsType\022D\n\007"
  "z_minus\030\010 \001(\01623.lm.types.BoundaryConditi"
  "ons.BoundaryConditionsType\022\030\n\020boundary_s"
  "pecies\030\n \001(\005\022\025\n\rboundary_site\030\013 \001(\005\022\036\n\026b"
  "oundary_concentration\030\025 \001(\001\022%\n\035boundary_"
  "concentration_x_plus\030\026 \001(\001\022&\n\036boundary_c"
  "oncentration_x_minus\030\027 \001(\001\022%\n\035boundary_c"
  "oncentration_y_plus\030\030 \001(\001\022&\n\036boundary_co"
  "ncentration_y_minus\030\031 \001(\001\022%\n\035boundary_co"
  "ncentration_z_plus\030\032 \001(\001\022&\n\036boundary_con"
  "centration_z_minus\030\033 \001(\001\0223\n\021boundary_gra"
  "dient\030  \001(\0132\030.robertslab.pbuf.NDArray\"\207\001"
  "\n\026BoundaryConditionsType\022\016\n\nREFLECTING\020\000"
  "\022\r\n\tABSORBING\020\001\022\014\n\010PERIODIC\020\002\022\027\n\023FIXED_C"
  "ONCENTRATION\020\003\022\022\n\016FIXED_GRADIENT\020\004\022\023\n\017LI"
  "NEAR_GRADIENT\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto_deps[1] = {
  &::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto_sccs[1] = {
  &scc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto = {
  false, false, descriptor_table_protodef_lm_2ftypes_2fBoundaryConditions_2eproto, "lm/types/BoundaryConditions.proto", 1135,
  &descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto_once, descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto_sccs, descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_lm_2ftypes_2fBoundaryConditions_2eproto::offsets,
  file_level_metadata_lm_2ftypes_2fBoundaryConditions_2eproto, 1, file_level_enum_descriptors_lm_2ftypes_2fBoundaryConditions_2eproto, file_level_service_descriptors_lm_2ftypes_2fBoundaryConditions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2ftypes_2fBoundaryConditions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto)), true);
namespace lm {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundaryConditions_BoundaryConditionsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto);
  return file_level_enum_descriptors_lm_2ftypes_2fBoundaryConditions_2eproto[0];
}
bool BoundaryConditions_BoundaryConditionsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::REFLECTING;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::ABSORBING;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::PERIODIC;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::FIXED_CONCENTRATION;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::FIXED_GRADIENT;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::LINEAR_GRADIENT;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::BoundaryConditionsType_MIN;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions::BoundaryConditionsType_MAX;
constexpr int BoundaryConditions::BoundaryConditionsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BoundaryConditions::InitAsDefaultInstance() {
  ::lm::types::_BoundaryConditions_default_instance_._instance.get_mutable()->boundary_gradient_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
}
class BoundaryConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundaryConditions>()._has_bits_);
  static void set_has_global(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axis_specific_boundaries(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x_minus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y_minus(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_z_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_z_minus(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_boundary_species(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_boundary_site(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_boundary_concentration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_boundary_concentration_x_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_boundary_concentration_x_minus(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_boundary_concentration_y_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_boundary_concentration_y_minus(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_boundary_concentration_z_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_boundary_concentration_z_minus(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::robertslab::pbuf::NDArray& boundary_gradient(const BoundaryConditions* msg);
  static void set_has_boundary_gradient(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::robertslab::pbuf::NDArray&
BoundaryConditions::_Internal::boundary_gradient(const BoundaryConditions* msg) {
  return *msg->boundary_gradient_;
}
void BoundaryConditions::clear_boundary_gradient() {
  if (boundary_gradient_ != nullptr) boundary_gradient_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BoundaryConditions::BoundaryConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.types.BoundaryConditions)
}
BoundaryConditions::BoundaryConditions(const BoundaryConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boundary_gradient()) {
    boundary_gradient_ = new ::robertslab::pbuf::NDArray(*from.boundary_gradient_);
  } else {
    boundary_gradient_ = nullptr;
  }
  ::memcpy(&global_, &from.global_,
    static_cast<size_t>(reinterpret_cast<char*>(&boundary_concentration_z_minus_) -
    reinterpret_cast<char*>(&global_)) + sizeof(boundary_concentration_z_minus_));
  // @@protoc_insertion_point(copy_constructor:lm.types.BoundaryConditions)
}

void BoundaryConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto.base);
  ::memset(&boundary_gradient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundary_concentration_z_minus_) -
      reinterpret_cast<char*>(&boundary_gradient_)) + sizeof(boundary_concentration_z_minus_));
}

BoundaryConditions::~BoundaryConditions() {
  // @@protoc_insertion_point(destructor:lm.types.BoundaryConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundaryConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete boundary_gradient_;
}

void BoundaryConditions::ArenaDtor(void* object) {
  BoundaryConditions* _this = reinterpret_cast< BoundaryConditions* >(object);
  (void)_this;
}
void BoundaryConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundaryConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryConditions& BoundaryConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryConditions_lm_2ftypes_2fBoundaryConditions_2eproto.base);
  return *internal_default_instance();
}


void BoundaryConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.types.BoundaryConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(boundary_gradient_ != nullptr);
    boundary_gradient_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&global_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_plus_) -
        reinterpret_cast<char*>(&global_)) + sizeof(z_plus_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&z_minus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boundary_concentration_y_minus_) -
        reinterpret_cast<char*>(&z_minus_)) + sizeof(boundary_concentration_y_minus_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&boundary_concentration_z_plus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boundary_concentration_z_minus_) -
        reinterpret_cast<char*>(&boundary_concentration_z_plus_)) + sizeof(boundary_concentration_z_minus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundaryConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .lm.types.BoundaryConditions.BoundaryConditionsType global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(val))) {
            _internal_set_global(static_cast<::lm::types::BoundaryConditions_BoundaryConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool axis_specific_boundaries = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_axis_specific_boundaries(&has_bits);
          axis_specific_boundaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_plus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(val))) {
            _internal_set_x_plus(static_cast<::lm::types::BoundaryConditions_BoundaryConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_minus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(val))) {
            _internal_set_x_minus(static_cast<::lm::types::BoundaryConditions_BoundaryConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_plus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(val))) {
            _internal_set_y_plus(static_cast<::lm::types::BoundaryConditions_BoundaryConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_minus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(val))) {
            _internal_set_y_minus(static_cast<::lm::types::BoundaryConditions_BoundaryConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_plus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(val))) {
            _internal_set_z_plus(static_cast<::lm::types::BoundaryConditions_BoundaryConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_minus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(val))) {
            _internal_set_z_minus(static_cast<::lm::types::BoundaryConditions_BoundaryConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 boundary_species = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_boundary_species(&has_bits);
          boundary_species_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 boundary_site = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_boundary_site(&has_bits);
          boundary_site_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double boundary_concentration = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_boundary_concentration(&has_bits);
          boundary_concentration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double boundary_concentration_x_plus = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_boundary_concentration_x_plus(&has_bits);
          boundary_concentration_x_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double boundary_concentration_x_minus = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_boundary_concentration_x_minus(&has_bits);
          boundary_concentration_x_minus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double boundary_concentration_y_plus = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_boundary_concentration_y_plus(&has_bits);
          boundary_concentration_y_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double boundary_concentration_y_minus = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_boundary_concentration_y_minus(&has_bits);
          boundary_concentration_y_minus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double boundary_concentration_z_plus = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_boundary_concentration_z_plus(&has_bits);
          boundary_concentration_z_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double boundary_concentration_z_minus = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_boundary_concentration_z_minus(&has_bits);
          boundary_concentration_z_minus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .robertslab.pbuf.NDArray boundary_gradient = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary_gradient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.types.BoundaryConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lm.types.BoundaryConditions.BoundaryConditionsType global = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_global(), target);
  }

  // optional bool axis_specific_boundaries = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_axis_specific_boundaries(), target);
  }

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_plus = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_x_plus(), target);
  }

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_minus = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_x_minus(), target);
  }

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_plus = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_y_plus(), target);
  }

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_minus = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_y_minus(), target);
  }

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_plus = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_z_plus(), target);
  }

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_minus = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_z_minus(), target);
  }

  // optional int32 boundary_species = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_boundary_species(), target);
  }

  // optional int32 boundary_site = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_boundary_site(), target);
  }

  // optional double boundary_concentration = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_boundary_concentration(), target);
  }

  // optional double boundary_concentration_x_plus = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_boundary_concentration_x_plus(), target);
  }

  // optional double boundary_concentration_x_minus = 23;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_boundary_concentration_x_minus(), target);
  }

  // optional double boundary_concentration_y_plus = 24;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_boundary_concentration_y_plus(), target);
  }

  // optional double boundary_concentration_y_minus = 25;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_boundary_concentration_y_minus(), target);
  }

  // optional double boundary_concentration_z_plus = 26;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_boundary_concentration_z_plus(), target);
  }

  // optional double boundary_concentration_z_minus = 27;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_boundary_concentration_z_minus(), target);
  }

  // optional .robertslab.pbuf.NDArray boundary_gradient = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::boundary_gradient(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.types.BoundaryConditions)
  return target;
}

size_t BoundaryConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.types.BoundaryConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .robertslab.pbuf.NDArray boundary_gradient = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boundary_gradient_);
    }

    // optional .lm.types.BoundaryConditions.BoundaryConditionsType global = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_global());
    }

    // optional bool axis_specific_boundaries = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_plus = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_x_plus());
    }

    // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_minus = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_x_minus());
    }

    // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_plus = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_y_plus());
    }

    // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_minus = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_y_minus());
    }

    // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_plus = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_z_plus());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_minus = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_z_minus());
    }

    // optional int32 boundary_species = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_boundary_species());
    }

    // optional int32 boundary_site = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_boundary_site());
    }

    // optional double boundary_concentration = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double boundary_concentration_x_plus = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double boundary_concentration_x_minus = 23;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double boundary_concentration_y_plus = 24;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double boundary_concentration_y_minus = 25;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double boundary_concentration_z_plus = 26;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double boundary_concentration_z_minus = 27;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.types.BoundaryConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.types.BoundaryConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.types.BoundaryConditions)
    MergeFrom(*source);
  }
}

void BoundaryConditions::MergeFrom(const BoundaryConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.types.BoundaryConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_boundary_gradient()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_boundary_gradient());
    }
    if (cached_has_bits & 0x00000002u) {
      global_ = from.global_;
    }
    if (cached_has_bits & 0x00000004u) {
      axis_specific_boundaries_ = from.axis_specific_boundaries_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_plus_ = from.x_plus_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_minus_ = from.x_minus_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_plus_ = from.y_plus_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_minus_ = from.y_minus_;
    }
    if (cached_has_bits & 0x00000080u) {
      z_plus_ = from.z_plus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      z_minus_ = from.z_minus_;
    }
    if (cached_has_bits & 0x00000200u) {
      boundary_species_ = from.boundary_species_;
    }
    if (cached_has_bits & 0x00000400u) {
      boundary_site_ = from.boundary_site_;
    }
    if (cached_has_bits & 0x00000800u) {
      boundary_concentration_ = from.boundary_concentration_;
    }
    if (cached_has_bits & 0x00001000u) {
      boundary_concentration_x_plus_ = from.boundary_concentration_x_plus_;
    }
    if (cached_has_bits & 0x00002000u) {
      boundary_concentration_x_minus_ = from.boundary_concentration_x_minus_;
    }
    if (cached_has_bits & 0x00004000u) {
      boundary_concentration_y_plus_ = from.boundary_concentration_y_plus_;
    }
    if (cached_has_bits & 0x00008000u) {
      boundary_concentration_y_minus_ = from.boundary_concentration_y_minus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      boundary_concentration_z_plus_ = from.boundary_concentration_z_plus_;
    }
    if (cached_has_bits & 0x00020000u) {
      boundary_concentration_z_minus_ = from.boundary_concentration_z_minus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundaryConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.types.BoundaryConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryConditions::CopyFrom(const BoundaryConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.types.BoundaryConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryConditions::IsInitialized() const {
  if (_internal_has_boundary_gradient()) {
    if (!boundary_gradient_->IsInitialized()) return false;
  }
  return true;
}

void BoundaryConditions::InternalSwap(BoundaryConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundaryConditions, boundary_concentration_z_minus_)
      + sizeof(BoundaryConditions::boundary_concentration_z_minus_)
      - PROTOBUF_FIELD_OFFSET(BoundaryConditions, boundary_gradient_)>(
          reinterpret_cast<char*>(&boundary_gradient_),
          reinterpret_cast<char*>(&other->boundary_gradient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::types::BoundaryConditions* Arena::CreateMaybeMessage< ::lm::types::BoundaryConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::types::BoundaryConditions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
