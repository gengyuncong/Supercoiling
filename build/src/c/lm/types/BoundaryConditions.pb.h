// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/types/BoundaryConditions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fBoundaryConditions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fBoundaryConditions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "robertslab/pbuf/NDArray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fBoundaryConditions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2ftypes_2fBoundaryConditions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto;
namespace lm {
namespace types {
class BoundaryConditions;
class BoundaryConditionsDefaultTypeInternal;
extern BoundaryConditionsDefaultTypeInternal _BoundaryConditions_default_instance_;
}  // namespace types
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::types::BoundaryConditions* Arena::CreateMaybeMessage<::lm::types::BoundaryConditions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace types {

enum BoundaryConditions_BoundaryConditionsType : int {
  BoundaryConditions_BoundaryConditionsType_REFLECTING = 0,
  BoundaryConditions_BoundaryConditionsType_ABSORBING = 1,
  BoundaryConditions_BoundaryConditionsType_PERIODIC = 2,
  BoundaryConditions_BoundaryConditionsType_FIXED_CONCENTRATION = 3,
  BoundaryConditions_BoundaryConditionsType_FIXED_GRADIENT = 4,
  BoundaryConditions_BoundaryConditionsType_LINEAR_GRADIENT = 5
};
bool BoundaryConditions_BoundaryConditionsType_IsValid(int value);
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions_BoundaryConditionsType_BoundaryConditionsType_MIN = BoundaryConditions_BoundaryConditionsType_REFLECTING;
constexpr BoundaryConditions_BoundaryConditionsType BoundaryConditions_BoundaryConditionsType_BoundaryConditionsType_MAX = BoundaryConditions_BoundaryConditionsType_LINEAR_GRADIENT;
constexpr int BoundaryConditions_BoundaryConditionsType_BoundaryConditionsType_ARRAYSIZE = BoundaryConditions_BoundaryConditionsType_BoundaryConditionsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundaryConditions_BoundaryConditionsType_descriptor();
template<typename T>
inline const std::string& BoundaryConditions_BoundaryConditionsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoundaryConditions_BoundaryConditionsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoundaryConditions_BoundaryConditionsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoundaryConditions_BoundaryConditionsType_descriptor(), enum_t_value);
}
inline bool BoundaryConditions_BoundaryConditionsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoundaryConditions_BoundaryConditionsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoundaryConditions_BoundaryConditionsType>(
    BoundaryConditions_BoundaryConditionsType_descriptor(), name, value);
}
// ===================================================================

class BoundaryConditions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.types.BoundaryConditions) */ {
 public:
  inline BoundaryConditions() : BoundaryConditions(nullptr) {}
  virtual ~BoundaryConditions();

  BoundaryConditions(const BoundaryConditions& from);
  BoundaryConditions(BoundaryConditions&& from) noexcept
    : BoundaryConditions() {
    *this = ::std::move(from);
  }

  inline BoundaryConditions& operator=(const BoundaryConditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundaryConditions& operator=(BoundaryConditions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundaryConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundaryConditions* internal_default_instance() {
    return reinterpret_cast<const BoundaryConditions*>(
               &_BoundaryConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoundaryConditions& a, BoundaryConditions& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundaryConditions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundaryConditions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundaryConditions* New() const final {
    return CreateMaybeMessage<BoundaryConditions>(nullptr);
  }

  BoundaryConditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundaryConditions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundaryConditions& from);
  void MergeFrom(const BoundaryConditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundaryConditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.types.BoundaryConditions";
  }
  protected:
  explicit BoundaryConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto);
    return ::descriptor_table_lm_2ftypes_2fBoundaryConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BoundaryConditions_BoundaryConditionsType BoundaryConditionsType;
  static constexpr BoundaryConditionsType REFLECTING =
    BoundaryConditions_BoundaryConditionsType_REFLECTING;
  static constexpr BoundaryConditionsType ABSORBING =
    BoundaryConditions_BoundaryConditionsType_ABSORBING;
  static constexpr BoundaryConditionsType PERIODIC =
    BoundaryConditions_BoundaryConditionsType_PERIODIC;
  static constexpr BoundaryConditionsType FIXED_CONCENTRATION =
    BoundaryConditions_BoundaryConditionsType_FIXED_CONCENTRATION;
  static constexpr BoundaryConditionsType FIXED_GRADIENT =
    BoundaryConditions_BoundaryConditionsType_FIXED_GRADIENT;
  static constexpr BoundaryConditionsType LINEAR_GRADIENT =
    BoundaryConditions_BoundaryConditionsType_LINEAR_GRADIENT;
  static inline bool BoundaryConditionsType_IsValid(int value) {
    return BoundaryConditions_BoundaryConditionsType_IsValid(value);
  }
  static constexpr BoundaryConditionsType BoundaryConditionsType_MIN =
    BoundaryConditions_BoundaryConditionsType_BoundaryConditionsType_MIN;
  static constexpr BoundaryConditionsType BoundaryConditionsType_MAX =
    BoundaryConditions_BoundaryConditionsType_BoundaryConditionsType_MAX;
  static constexpr int BoundaryConditionsType_ARRAYSIZE =
    BoundaryConditions_BoundaryConditionsType_BoundaryConditionsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BoundaryConditionsType_descriptor() {
    return BoundaryConditions_BoundaryConditionsType_descriptor();
  }
  template<typename T>
  static inline const std::string& BoundaryConditionsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BoundaryConditionsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BoundaryConditionsType_Name.");
    return BoundaryConditions_BoundaryConditionsType_Name(enum_t_value);
  }
  static inline bool BoundaryConditionsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BoundaryConditionsType* value) {
    return BoundaryConditions_BoundaryConditionsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBoundaryGradientFieldNumber = 32,
    kGlobalFieldNumber = 1,
    kAxisSpecificBoundariesFieldNumber = 2,
    kXPlusFieldNumber = 3,
    kXMinusFieldNumber = 4,
    kYPlusFieldNumber = 5,
    kYMinusFieldNumber = 6,
    kZPlusFieldNumber = 7,
    kZMinusFieldNumber = 8,
    kBoundarySpeciesFieldNumber = 10,
    kBoundarySiteFieldNumber = 11,
    kBoundaryConcentrationFieldNumber = 21,
    kBoundaryConcentrationXPlusFieldNumber = 22,
    kBoundaryConcentrationXMinusFieldNumber = 23,
    kBoundaryConcentrationYPlusFieldNumber = 24,
    kBoundaryConcentrationYMinusFieldNumber = 25,
    kBoundaryConcentrationZPlusFieldNumber = 26,
    kBoundaryConcentrationZMinusFieldNumber = 27,
  };
  // optional .robertslab.pbuf.NDArray boundary_gradient = 32;
  bool has_boundary_gradient() const;
  private:
  bool _internal_has_boundary_gradient() const;
  public:
  void clear_boundary_gradient();
  const ::robertslab::pbuf::NDArray& boundary_gradient() const;
  ::robertslab::pbuf::NDArray* release_boundary_gradient();
  ::robertslab::pbuf::NDArray* mutable_boundary_gradient();
  void set_allocated_boundary_gradient(::robertslab::pbuf::NDArray* boundary_gradient);
  private:
  const ::robertslab::pbuf::NDArray& _internal_boundary_gradient() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_boundary_gradient();
  public:
  void unsafe_arena_set_allocated_boundary_gradient(
      ::robertslab::pbuf::NDArray* boundary_gradient);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_boundary_gradient();

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType global = 1;
  bool has_global() const;
  private:
  bool _internal_has_global() const;
  public:
  void clear_global();
  ::lm::types::BoundaryConditions_BoundaryConditionsType global() const;
  void set_global(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  private:
  ::lm::types::BoundaryConditions_BoundaryConditionsType _internal_global() const;
  void _internal_set_global(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  public:

  // optional bool axis_specific_boundaries = 2 [default = false];
  bool has_axis_specific_boundaries() const;
  private:
  bool _internal_has_axis_specific_boundaries() const;
  public:
  void clear_axis_specific_boundaries();
  bool axis_specific_boundaries() const;
  void set_axis_specific_boundaries(bool value);
  private:
  bool _internal_axis_specific_boundaries() const;
  void _internal_set_axis_specific_boundaries(bool value);
  public:

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_plus = 3;
  bool has_x_plus() const;
  private:
  bool _internal_has_x_plus() const;
  public:
  void clear_x_plus();
  ::lm::types::BoundaryConditions_BoundaryConditionsType x_plus() const;
  void set_x_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  private:
  ::lm::types::BoundaryConditions_BoundaryConditionsType _internal_x_plus() const;
  void _internal_set_x_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  public:

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType x_minus = 4;
  bool has_x_minus() const;
  private:
  bool _internal_has_x_minus() const;
  public:
  void clear_x_minus();
  ::lm::types::BoundaryConditions_BoundaryConditionsType x_minus() const;
  void set_x_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  private:
  ::lm::types::BoundaryConditions_BoundaryConditionsType _internal_x_minus() const;
  void _internal_set_x_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  public:

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_plus = 5;
  bool has_y_plus() const;
  private:
  bool _internal_has_y_plus() const;
  public:
  void clear_y_plus();
  ::lm::types::BoundaryConditions_BoundaryConditionsType y_plus() const;
  void set_y_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  private:
  ::lm::types::BoundaryConditions_BoundaryConditionsType _internal_y_plus() const;
  void _internal_set_y_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  public:

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType y_minus = 6;
  bool has_y_minus() const;
  private:
  bool _internal_has_y_minus() const;
  public:
  void clear_y_minus();
  ::lm::types::BoundaryConditions_BoundaryConditionsType y_minus() const;
  void set_y_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  private:
  ::lm::types::BoundaryConditions_BoundaryConditionsType _internal_y_minus() const;
  void _internal_set_y_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  public:

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_plus = 7;
  bool has_z_plus() const;
  private:
  bool _internal_has_z_plus() const;
  public:
  void clear_z_plus();
  ::lm::types::BoundaryConditions_BoundaryConditionsType z_plus() const;
  void set_z_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  private:
  ::lm::types::BoundaryConditions_BoundaryConditionsType _internal_z_plus() const;
  void _internal_set_z_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  public:

  // optional .lm.types.BoundaryConditions.BoundaryConditionsType z_minus = 8;
  bool has_z_minus() const;
  private:
  bool _internal_has_z_minus() const;
  public:
  void clear_z_minus();
  ::lm::types::BoundaryConditions_BoundaryConditionsType z_minus() const;
  void set_z_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  private:
  ::lm::types::BoundaryConditions_BoundaryConditionsType _internal_z_minus() const;
  void _internal_set_z_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value);
  public:

  // optional int32 boundary_species = 10;
  bool has_boundary_species() const;
  private:
  bool _internal_has_boundary_species() const;
  public:
  void clear_boundary_species();
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_species() const;
  void set_boundary_species(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boundary_species() const;
  void _internal_set_boundary_species(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 boundary_site = 11;
  bool has_boundary_site() const;
  private:
  bool _internal_has_boundary_site() const;
  public:
  void clear_boundary_site();
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_site() const;
  void set_boundary_site(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boundary_site() const;
  void _internal_set_boundary_site(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double boundary_concentration = 21;
  bool has_boundary_concentration() const;
  private:
  bool _internal_has_boundary_concentration() const;
  public:
  void clear_boundary_concentration();
  double boundary_concentration() const;
  void set_boundary_concentration(double value);
  private:
  double _internal_boundary_concentration() const;
  void _internal_set_boundary_concentration(double value);
  public:

  // optional double boundary_concentration_x_plus = 22;
  bool has_boundary_concentration_x_plus() const;
  private:
  bool _internal_has_boundary_concentration_x_plus() const;
  public:
  void clear_boundary_concentration_x_plus();
  double boundary_concentration_x_plus() const;
  void set_boundary_concentration_x_plus(double value);
  private:
  double _internal_boundary_concentration_x_plus() const;
  void _internal_set_boundary_concentration_x_plus(double value);
  public:

  // optional double boundary_concentration_x_minus = 23;
  bool has_boundary_concentration_x_minus() const;
  private:
  bool _internal_has_boundary_concentration_x_minus() const;
  public:
  void clear_boundary_concentration_x_minus();
  double boundary_concentration_x_minus() const;
  void set_boundary_concentration_x_minus(double value);
  private:
  double _internal_boundary_concentration_x_minus() const;
  void _internal_set_boundary_concentration_x_minus(double value);
  public:

  // optional double boundary_concentration_y_plus = 24;
  bool has_boundary_concentration_y_plus() const;
  private:
  bool _internal_has_boundary_concentration_y_plus() const;
  public:
  void clear_boundary_concentration_y_plus();
  double boundary_concentration_y_plus() const;
  void set_boundary_concentration_y_plus(double value);
  private:
  double _internal_boundary_concentration_y_plus() const;
  void _internal_set_boundary_concentration_y_plus(double value);
  public:

  // optional double boundary_concentration_y_minus = 25;
  bool has_boundary_concentration_y_minus() const;
  private:
  bool _internal_has_boundary_concentration_y_minus() const;
  public:
  void clear_boundary_concentration_y_minus();
  double boundary_concentration_y_minus() const;
  void set_boundary_concentration_y_minus(double value);
  private:
  double _internal_boundary_concentration_y_minus() const;
  void _internal_set_boundary_concentration_y_minus(double value);
  public:

  // optional double boundary_concentration_z_plus = 26;
  bool has_boundary_concentration_z_plus() const;
  private:
  bool _internal_has_boundary_concentration_z_plus() const;
  public:
  void clear_boundary_concentration_z_plus();
  double boundary_concentration_z_plus() const;
  void set_boundary_concentration_z_plus(double value);
  private:
  double _internal_boundary_concentration_z_plus() const;
  void _internal_set_boundary_concentration_z_plus(double value);
  public:

  // optional double boundary_concentration_z_minus = 27;
  bool has_boundary_concentration_z_minus() const;
  private:
  bool _internal_has_boundary_concentration_z_minus() const;
  public:
  void clear_boundary_concentration_z_minus();
  double boundary_concentration_z_minus() const;
  void set_boundary_concentration_z_minus(double value);
  private:
  double _internal_boundary_concentration_z_minus() const;
  void _internal_set_boundary_concentration_z_minus(double value);
  public:

  // @@protoc_insertion_point(class_scope:lm.types.BoundaryConditions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::robertslab::pbuf::NDArray* boundary_gradient_;
  int global_;
  bool axis_specific_boundaries_;
  int x_plus_;
  int x_minus_;
  int y_plus_;
  int y_minus_;
  int z_plus_;
  int z_minus_;
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_species_;
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_site_;
  double boundary_concentration_;
  double boundary_concentration_x_plus_;
  double boundary_concentration_x_minus_;
  double boundary_concentration_y_plus_;
  double boundary_concentration_y_minus_;
  double boundary_concentration_z_plus_;
  double boundary_concentration_z_minus_;
  friend struct ::TableStruct_lm_2ftypes_2fBoundaryConditions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoundaryConditions

// optional .lm.types.BoundaryConditions.BoundaryConditionsType global = 1;
inline bool BoundaryConditions::_internal_has_global() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoundaryConditions::has_global() const {
  return _internal_has_global();
}
inline void BoundaryConditions::clear_global() {
  global_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::_internal_global() const {
  return static_cast< ::lm::types::BoundaryConditions_BoundaryConditionsType >(global_);
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::global() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.global)
  return _internal_global();
}
inline void BoundaryConditions::_internal_set_global(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  assert(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  global_ = value;
}
inline void BoundaryConditions::set_global(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  _internal_set_global(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.global)
}

// optional bool axis_specific_boundaries = 2 [default = false];
inline bool BoundaryConditions::_internal_has_axis_specific_boundaries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoundaryConditions::has_axis_specific_boundaries() const {
  return _internal_has_axis_specific_boundaries();
}
inline void BoundaryConditions::clear_axis_specific_boundaries() {
  axis_specific_boundaries_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BoundaryConditions::_internal_axis_specific_boundaries() const {
  return axis_specific_boundaries_;
}
inline bool BoundaryConditions::axis_specific_boundaries() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.axis_specific_boundaries)
  return _internal_axis_specific_boundaries();
}
inline void BoundaryConditions::_internal_set_axis_specific_boundaries(bool value) {
  _has_bits_[0] |= 0x00000004u;
  axis_specific_boundaries_ = value;
}
inline void BoundaryConditions::set_axis_specific_boundaries(bool value) {
  _internal_set_axis_specific_boundaries(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.axis_specific_boundaries)
}

// optional .lm.types.BoundaryConditions.BoundaryConditionsType x_plus = 3;
inline bool BoundaryConditions::_internal_has_x_plus() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BoundaryConditions::has_x_plus() const {
  return _internal_has_x_plus();
}
inline void BoundaryConditions::clear_x_plus() {
  x_plus_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::_internal_x_plus() const {
  return static_cast< ::lm::types::BoundaryConditions_BoundaryConditionsType >(x_plus_);
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::x_plus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.x_plus)
  return _internal_x_plus();
}
inline void BoundaryConditions::_internal_set_x_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  assert(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  x_plus_ = value;
}
inline void BoundaryConditions::set_x_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  _internal_set_x_plus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.x_plus)
}

// optional .lm.types.BoundaryConditions.BoundaryConditionsType x_minus = 4;
inline bool BoundaryConditions::_internal_has_x_minus() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BoundaryConditions::has_x_minus() const {
  return _internal_has_x_minus();
}
inline void BoundaryConditions::clear_x_minus() {
  x_minus_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::_internal_x_minus() const {
  return static_cast< ::lm::types::BoundaryConditions_BoundaryConditionsType >(x_minus_);
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::x_minus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.x_minus)
  return _internal_x_minus();
}
inline void BoundaryConditions::_internal_set_x_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  assert(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  x_minus_ = value;
}
inline void BoundaryConditions::set_x_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  _internal_set_x_minus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.x_minus)
}

// optional .lm.types.BoundaryConditions.BoundaryConditionsType y_plus = 5;
inline bool BoundaryConditions::_internal_has_y_plus() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BoundaryConditions::has_y_plus() const {
  return _internal_has_y_plus();
}
inline void BoundaryConditions::clear_y_plus() {
  y_plus_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::_internal_y_plus() const {
  return static_cast< ::lm::types::BoundaryConditions_BoundaryConditionsType >(y_plus_);
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::y_plus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.y_plus)
  return _internal_y_plus();
}
inline void BoundaryConditions::_internal_set_y_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  assert(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  y_plus_ = value;
}
inline void BoundaryConditions::set_y_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  _internal_set_y_plus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.y_plus)
}

// optional .lm.types.BoundaryConditions.BoundaryConditionsType y_minus = 6;
inline bool BoundaryConditions::_internal_has_y_minus() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BoundaryConditions::has_y_minus() const {
  return _internal_has_y_minus();
}
inline void BoundaryConditions::clear_y_minus() {
  y_minus_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::_internal_y_minus() const {
  return static_cast< ::lm::types::BoundaryConditions_BoundaryConditionsType >(y_minus_);
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::y_minus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.y_minus)
  return _internal_y_minus();
}
inline void BoundaryConditions::_internal_set_y_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  assert(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  y_minus_ = value;
}
inline void BoundaryConditions::set_y_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  _internal_set_y_minus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.y_minus)
}

// optional .lm.types.BoundaryConditions.BoundaryConditionsType z_plus = 7;
inline bool BoundaryConditions::_internal_has_z_plus() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BoundaryConditions::has_z_plus() const {
  return _internal_has_z_plus();
}
inline void BoundaryConditions::clear_z_plus() {
  z_plus_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::_internal_z_plus() const {
  return static_cast< ::lm::types::BoundaryConditions_BoundaryConditionsType >(z_plus_);
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::z_plus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.z_plus)
  return _internal_z_plus();
}
inline void BoundaryConditions::_internal_set_z_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  assert(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  z_plus_ = value;
}
inline void BoundaryConditions::set_z_plus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  _internal_set_z_plus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.z_plus)
}

// optional .lm.types.BoundaryConditions.BoundaryConditionsType z_minus = 8;
inline bool BoundaryConditions::_internal_has_z_minus() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BoundaryConditions::has_z_minus() const {
  return _internal_has_z_minus();
}
inline void BoundaryConditions::clear_z_minus() {
  z_minus_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::_internal_z_minus() const {
  return static_cast< ::lm::types::BoundaryConditions_BoundaryConditionsType >(z_minus_);
}
inline ::lm::types::BoundaryConditions_BoundaryConditionsType BoundaryConditions::z_minus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.z_minus)
  return _internal_z_minus();
}
inline void BoundaryConditions::_internal_set_z_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  assert(::lm::types::BoundaryConditions_BoundaryConditionsType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  z_minus_ = value;
}
inline void BoundaryConditions::set_z_minus(::lm::types::BoundaryConditions_BoundaryConditionsType value) {
  _internal_set_z_minus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.z_minus)
}

// optional int32 boundary_species = 10;
inline bool BoundaryConditions::_internal_has_boundary_species() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_species() const {
  return _internal_has_boundary_species();
}
inline void BoundaryConditions::clear_boundary_species() {
  boundary_species_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundaryConditions::_internal_boundary_species() const {
  return boundary_species_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundaryConditions::boundary_species() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_species)
  return _internal_boundary_species();
}
inline void BoundaryConditions::_internal_set_boundary_species(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  boundary_species_ = value;
}
inline void BoundaryConditions::set_boundary_species(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boundary_species(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_species)
}

// optional int32 boundary_site = 11;
inline bool BoundaryConditions::_internal_has_boundary_site() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_site() const {
  return _internal_has_boundary_site();
}
inline void BoundaryConditions::clear_boundary_site() {
  boundary_site_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundaryConditions::_internal_boundary_site() const {
  return boundary_site_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundaryConditions::boundary_site() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_site)
  return _internal_boundary_site();
}
inline void BoundaryConditions::_internal_set_boundary_site(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  boundary_site_ = value;
}
inline void BoundaryConditions::set_boundary_site(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boundary_site(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_site)
}

// optional double boundary_concentration = 21;
inline bool BoundaryConditions::_internal_has_boundary_concentration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_concentration() const {
  return _internal_has_boundary_concentration();
}
inline void BoundaryConditions::clear_boundary_concentration() {
  boundary_concentration_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double BoundaryConditions::_internal_boundary_concentration() const {
  return boundary_concentration_;
}
inline double BoundaryConditions::boundary_concentration() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_concentration)
  return _internal_boundary_concentration();
}
inline void BoundaryConditions::_internal_set_boundary_concentration(double value) {
  _has_bits_[0] |= 0x00000800u;
  boundary_concentration_ = value;
}
inline void BoundaryConditions::set_boundary_concentration(double value) {
  _internal_set_boundary_concentration(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_concentration)
}

// optional double boundary_concentration_x_plus = 22;
inline bool BoundaryConditions::_internal_has_boundary_concentration_x_plus() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_concentration_x_plus() const {
  return _internal_has_boundary_concentration_x_plus();
}
inline void BoundaryConditions::clear_boundary_concentration_x_plus() {
  boundary_concentration_x_plus_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double BoundaryConditions::_internal_boundary_concentration_x_plus() const {
  return boundary_concentration_x_plus_;
}
inline double BoundaryConditions::boundary_concentration_x_plus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_concentration_x_plus)
  return _internal_boundary_concentration_x_plus();
}
inline void BoundaryConditions::_internal_set_boundary_concentration_x_plus(double value) {
  _has_bits_[0] |= 0x00001000u;
  boundary_concentration_x_plus_ = value;
}
inline void BoundaryConditions::set_boundary_concentration_x_plus(double value) {
  _internal_set_boundary_concentration_x_plus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_concentration_x_plus)
}

// optional double boundary_concentration_x_minus = 23;
inline bool BoundaryConditions::_internal_has_boundary_concentration_x_minus() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_concentration_x_minus() const {
  return _internal_has_boundary_concentration_x_minus();
}
inline void BoundaryConditions::clear_boundary_concentration_x_minus() {
  boundary_concentration_x_minus_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double BoundaryConditions::_internal_boundary_concentration_x_minus() const {
  return boundary_concentration_x_minus_;
}
inline double BoundaryConditions::boundary_concentration_x_minus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_concentration_x_minus)
  return _internal_boundary_concentration_x_minus();
}
inline void BoundaryConditions::_internal_set_boundary_concentration_x_minus(double value) {
  _has_bits_[0] |= 0x00002000u;
  boundary_concentration_x_minus_ = value;
}
inline void BoundaryConditions::set_boundary_concentration_x_minus(double value) {
  _internal_set_boundary_concentration_x_minus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_concentration_x_minus)
}

// optional double boundary_concentration_y_plus = 24;
inline bool BoundaryConditions::_internal_has_boundary_concentration_y_plus() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_concentration_y_plus() const {
  return _internal_has_boundary_concentration_y_plus();
}
inline void BoundaryConditions::clear_boundary_concentration_y_plus() {
  boundary_concentration_y_plus_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double BoundaryConditions::_internal_boundary_concentration_y_plus() const {
  return boundary_concentration_y_plus_;
}
inline double BoundaryConditions::boundary_concentration_y_plus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_concentration_y_plus)
  return _internal_boundary_concentration_y_plus();
}
inline void BoundaryConditions::_internal_set_boundary_concentration_y_plus(double value) {
  _has_bits_[0] |= 0x00004000u;
  boundary_concentration_y_plus_ = value;
}
inline void BoundaryConditions::set_boundary_concentration_y_plus(double value) {
  _internal_set_boundary_concentration_y_plus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_concentration_y_plus)
}

// optional double boundary_concentration_y_minus = 25;
inline bool BoundaryConditions::_internal_has_boundary_concentration_y_minus() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_concentration_y_minus() const {
  return _internal_has_boundary_concentration_y_minus();
}
inline void BoundaryConditions::clear_boundary_concentration_y_minus() {
  boundary_concentration_y_minus_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double BoundaryConditions::_internal_boundary_concentration_y_minus() const {
  return boundary_concentration_y_minus_;
}
inline double BoundaryConditions::boundary_concentration_y_minus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_concentration_y_minus)
  return _internal_boundary_concentration_y_minus();
}
inline void BoundaryConditions::_internal_set_boundary_concentration_y_minus(double value) {
  _has_bits_[0] |= 0x00008000u;
  boundary_concentration_y_minus_ = value;
}
inline void BoundaryConditions::set_boundary_concentration_y_minus(double value) {
  _internal_set_boundary_concentration_y_minus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_concentration_y_minus)
}

// optional double boundary_concentration_z_plus = 26;
inline bool BoundaryConditions::_internal_has_boundary_concentration_z_plus() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_concentration_z_plus() const {
  return _internal_has_boundary_concentration_z_plus();
}
inline void BoundaryConditions::clear_boundary_concentration_z_plus() {
  boundary_concentration_z_plus_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double BoundaryConditions::_internal_boundary_concentration_z_plus() const {
  return boundary_concentration_z_plus_;
}
inline double BoundaryConditions::boundary_concentration_z_plus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_concentration_z_plus)
  return _internal_boundary_concentration_z_plus();
}
inline void BoundaryConditions::_internal_set_boundary_concentration_z_plus(double value) {
  _has_bits_[0] |= 0x00010000u;
  boundary_concentration_z_plus_ = value;
}
inline void BoundaryConditions::set_boundary_concentration_z_plus(double value) {
  _internal_set_boundary_concentration_z_plus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_concentration_z_plus)
}

// optional double boundary_concentration_z_minus = 27;
inline bool BoundaryConditions::_internal_has_boundary_concentration_z_minus() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BoundaryConditions::has_boundary_concentration_z_minus() const {
  return _internal_has_boundary_concentration_z_minus();
}
inline void BoundaryConditions::clear_boundary_concentration_z_minus() {
  boundary_concentration_z_minus_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double BoundaryConditions::_internal_boundary_concentration_z_minus() const {
  return boundary_concentration_z_minus_;
}
inline double BoundaryConditions::boundary_concentration_z_minus() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_concentration_z_minus)
  return _internal_boundary_concentration_z_minus();
}
inline void BoundaryConditions::_internal_set_boundary_concentration_z_minus(double value) {
  _has_bits_[0] |= 0x00020000u;
  boundary_concentration_z_minus_ = value;
}
inline void BoundaryConditions::set_boundary_concentration_z_minus(double value) {
  _internal_set_boundary_concentration_z_minus(value);
  // @@protoc_insertion_point(field_set:lm.types.BoundaryConditions.boundary_concentration_z_minus)
}

// optional .robertslab.pbuf.NDArray boundary_gradient = 32;
inline bool BoundaryConditions::_internal_has_boundary_gradient() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || boundary_gradient_ != nullptr);
  return value;
}
inline bool BoundaryConditions::has_boundary_gradient() const {
  return _internal_has_boundary_gradient();
}
inline const ::robertslab::pbuf::NDArray& BoundaryConditions::_internal_boundary_gradient() const {
  const ::robertslab::pbuf::NDArray* p = boundary_gradient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& BoundaryConditions::boundary_gradient() const {
  // @@protoc_insertion_point(field_get:lm.types.BoundaryConditions.boundary_gradient)
  return _internal_boundary_gradient();
}
inline void BoundaryConditions::unsafe_arena_set_allocated_boundary_gradient(
    ::robertslab::pbuf::NDArray* boundary_gradient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundary_gradient_);
  }
  boundary_gradient_ = boundary_gradient;
  if (boundary_gradient) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.types.BoundaryConditions.boundary_gradient)
}
inline ::robertslab::pbuf::NDArray* BoundaryConditions::release_boundary_gradient() {
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = boundary_gradient_;
  boundary_gradient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* BoundaryConditions::unsafe_arena_release_boundary_gradient() {
  // @@protoc_insertion_point(field_release:lm.types.BoundaryConditions.boundary_gradient)
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = boundary_gradient_;
  boundary_gradient_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* BoundaryConditions::_internal_mutable_boundary_gradient() {
  _has_bits_[0] |= 0x00000001u;
  if (boundary_gradient_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    boundary_gradient_ = p;
  }
  return boundary_gradient_;
}
inline ::robertslab::pbuf::NDArray* BoundaryConditions::mutable_boundary_gradient() {
  // @@protoc_insertion_point(field_mutable:lm.types.BoundaryConditions.boundary_gradient)
  return _internal_mutable_boundary_gradient();
}
inline void BoundaryConditions::set_allocated_boundary_gradient(::robertslab::pbuf::NDArray* boundary_gradient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundary_gradient_);
  }
  if (boundary_gradient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundary_gradient)->GetArena();
    if (message_arena != submessage_arena) {
      boundary_gradient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundary_gradient, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  boundary_gradient_ = boundary_gradient;
  // @@protoc_insertion_point(field_set_allocated:lm.types.BoundaryConditions.boundary_gradient)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace lm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lm::types::BoundaryConditions_BoundaryConditionsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::types::BoundaryConditions_BoundaryConditionsType>() {
  return ::lm::types::BoundaryConditions_BoundaryConditionsType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2ftypes_2fBoundaryConditions_2eproto
