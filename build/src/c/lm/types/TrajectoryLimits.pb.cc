// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/types/TrajectoryLimits.proto

#include "lm/types/TrajectoryLimits.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTrajectoryLimits_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto;
namespace lm {
namespace types {
class TrajectoryLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryLimit> _instance;
} _TrajectoryLimit_default_instance_;
class TrajectoryLimitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryLimits> _instance;
} _TrajectoryLimits_default_instance_;
}  // namespace types
}  // namespace lm
static void InitDefaultsscc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::types::_TrajectoryLimit_default_instance_;
    new (ptr) ::lm::types::TrajectoryLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::types::TrajectoryLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::types::_TrajectoryLimits_default_instance_;
    new (ptr) ::lm::types::TrajectoryLimits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::types::TrajectoryLimits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto}, {
      &scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2ftypes_2fTrajectoryLimits_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lm_2ftypes_2fTrajectoryLimits_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2ftypes_2fTrajectoryLimits_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2ftypes_2fTrajectoryLimits_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, id_),
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, type_),
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, type_arg_),
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, stopping_condition_),
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, stopping_value_double_),
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimit, stopping_value_int_),
  0,
  4,
  5,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::types::TrajectoryLimits, limits_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::lm::types::TrajectoryLimit)},
  { 17, -1, sizeof(::lm::types::TrajectoryLimits)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::types::_TrajectoryLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::types::_TrajectoryLimits_default_instance_),
};

const char descriptor_table_protodef_lm_2ftypes_2fTrajectoryLimits_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037lm/types/TrajectoryLimits.proto\022\010lm.ty"
  "pes\"\247\004\n\017TrajectoryLimit\022\n\n\002id\030\001 \002(\005\0221\n\004t"
  "ype\030\025 \002(\0162#.lm.types.TrajectoryLimit.Lim"
  "itType\022\020\n\010type_arg\030\026 \001(\r\022G\n\022stopping_con"
  "dition\030\013 \002(\0162+.lm.types.TrajectoryLimit."
  "StoppingCondition\022 \n\025stopping_value_doub"
  "le\030\014 \001(\001:\0010\022\035\n\022stopping_value_int\030\r \001(\003:"
  "\0010\"o\n\tLimitType\022\010\n\004NONE\020\000\022\010\n\004TIME\020\001\022\013\n\007S"
  "PECIES\020\002\022\023\n\017ORDER_PARAMETER\020\003\022\026\n\022DEGREE_"
  "ADVANCEMENT\020\004\022\024\n\020BARRIER_CROSSING\020\005\"\307\001\n\021"
  "StoppingCondition\022\021\n\rMIN_EXCLUSIVE\020\000\022\021\n\r"
  "MIN_INCLUSIVE\020\001\022\021\n\rMAX_EXCLUSIVE\020\002\022\021\n\rMA"
  "X_INCLUSIVE\020\003\022\030\n\024DECREASING_EXCLUSIVE\020\004\022"
  "\030\n\024DECREASING_INCLUSIVE\020\005\022\030\n\024INCREASING_"
  "EXCLUSIVE\020\006\022\030\n\024INCREASING_INCLUSIVE\020\007\"=\n"
  "\020TrajectoryLimits\022)\n\006limits\030\001 \003(\0132\031.lm.t"
  "ypes.TrajectoryLimit"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto_sccs[2] = {
  &scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto.base,
  &scc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto = {
  false, false, descriptor_table_protodef_lm_2ftypes_2fTrajectoryLimits_2eproto, "lm/types/TrajectoryLimits.proto", 660,
  &descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto_once, descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto_sccs, descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_lm_2ftypes_2fTrajectoryLimits_2eproto::offsets,
  file_level_metadata_lm_2ftypes_2fTrajectoryLimits_2eproto, 2, file_level_enum_descriptors_lm_2ftypes_2fTrajectoryLimits_2eproto, file_level_service_descriptors_lm_2ftypes_2fTrajectoryLimits_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2ftypes_2fTrajectoryLimits_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto)), true);
namespace lm {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryLimit_LimitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto);
  return file_level_enum_descriptors_lm_2ftypes_2fTrajectoryLimits_2eproto[0];
}
bool TrajectoryLimit_LimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrajectoryLimit_LimitType TrajectoryLimit::NONE;
constexpr TrajectoryLimit_LimitType TrajectoryLimit::TIME;
constexpr TrajectoryLimit_LimitType TrajectoryLimit::SPECIES;
constexpr TrajectoryLimit_LimitType TrajectoryLimit::ORDER_PARAMETER;
constexpr TrajectoryLimit_LimitType TrajectoryLimit::DEGREE_ADVANCEMENT;
constexpr TrajectoryLimit_LimitType TrajectoryLimit::BARRIER_CROSSING;
constexpr TrajectoryLimit_LimitType TrajectoryLimit::LimitType_MIN;
constexpr TrajectoryLimit_LimitType TrajectoryLimit::LimitType_MAX;
constexpr int TrajectoryLimit::LimitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryLimit_StoppingCondition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto);
  return file_level_enum_descriptors_lm_2ftypes_2fTrajectoryLimits_2eproto[1];
}
bool TrajectoryLimit_StoppingCondition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::MIN_EXCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::MIN_INCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::MAX_EXCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::MAX_INCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::DECREASING_EXCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::DECREASING_INCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::INCREASING_EXCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::INCREASING_INCLUSIVE;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::StoppingCondition_MIN;
constexpr TrajectoryLimit_StoppingCondition TrajectoryLimit::StoppingCondition_MAX;
constexpr int TrajectoryLimit::StoppingCondition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrajectoryLimit::InitAsDefaultInstance() {
}
class TrajectoryLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryLimit>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stopping_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stopping_value_double(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stopping_value_int(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

TrajectoryLimit::TrajectoryLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.types.TrajectoryLimit)
}
TrajectoryLimit::TrajectoryLimit(const TrajectoryLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_arg_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_arg_));
  // @@protoc_insertion_point(copy_constructor:lm.types.TrajectoryLimit)
}

void TrajectoryLimit::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_arg_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_arg_));
}

TrajectoryLimit::~TrajectoryLimit() {
  // @@protoc_insertion_point(destructor:lm.types.TrajectoryLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrajectoryLimit::ArenaDtor(void* object) {
  TrajectoryLimit* _this = reinterpret_cast< TrajectoryLimit* >(object);
  (void)_this;
}
void TrajectoryLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryLimit& TrajectoryLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.types.TrajectoryLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_arg_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_arg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.types.TrajectoryLimit.StoppingCondition stopping_condition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::TrajectoryLimit_StoppingCondition_IsValid(val))) {
            _internal_set_stopping_condition(static_cast<::lm::types::TrajectoryLimit_StoppingCondition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double stopping_value_double = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_stopping_value_double(&has_bits);
          stopping_value_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 stopping_value_int = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_stopping_value_int(&has_bits);
          stopping_value_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.types.TrajectoryLimit.LimitType type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::types::TrajectoryLimit_LimitType_IsValid(val))) {
            _internal_set_type(static_cast<::lm::types::TrajectoryLimit_LimitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 type_arg = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_type_arg(&has_bits);
          type_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.types.TrajectoryLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .lm.types.TrajectoryLimit.StoppingCondition stopping_condition = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_stopping_condition(), target);
  }

  // optional double stopping_value_double = 12 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_stopping_value_double(), target);
  }

  // optional int64 stopping_value_int = 13 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_stopping_value_int(), target);
  }

  // required .lm.types.TrajectoryLimit.LimitType type = 21;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_type(), target);
  }

  // optional uint32 type_arg = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_type_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.types.TrajectoryLimit)
  return target;
}

size_t TrajectoryLimit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.types.TrajectoryLimit)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_stopping_condition()) {
    // required .lm.types.TrajectoryLimit.StoppingCondition stopping_condition = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stopping_condition());
  }

  if (_internal_has_type()) {
    // required .lm.types.TrajectoryLimit.LimitType type = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t TrajectoryLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.types.TrajectoryLimit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required .lm.types.TrajectoryLimit.StoppingCondition stopping_condition = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stopping_condition());

    // required .lm.types.TrajectoryLimit.LimitType type = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional double stopping_value_double = 12 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int64 stopping_value_int = 13 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_stopping_value_int());
    }

  }
  // optional uint32 type_arg = 22;
  if (cached_has_bits & 0x00000020u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.types.TrajectoryLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.types.TrajectoryLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.types.TrajectoryLimit)
    MergeFrom(*source);
  }
}

void TrajectoryLimit::MergeFrom(const TrajectoryLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.types.TrajectoryLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stopping_condition_ = from.stopping_condition_;
    }
    if (cached_has_bits & 0x00000004u) {
      stopping_value_double_ = from.stopping_value_double_;
    }
    if (cached_has_bits & 0x00000008u) {
      stopping_value_int_ = from.stopping_value_int_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_arg_ = from.type_arg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.types.TrajectoryLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryLimit::CopyFrom(const TrajectoryLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.types.TrajectoryLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryLimit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrajectoryLimit::InternalSwap(TrajectoryLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryLimit, type_arg_)
      + sizeof(TrajectoryLimit::type_arg_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryLimit, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryLimits::InitAsDefaultInstance() {
}
class TrajectoryLimits::_Internal {
 public:
};

TrajectoryLimits::TrajectoryLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  limits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.types.TrajectoryLimits)
}
TrajectoryLimits::TrajectoryLimits(const TrajectoryLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      limits_(from.limits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lm.types.TrajectoryLimits)
}

void TrajectoryLimits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto.base);
}

TrajectoryLimits::~TrajectoryLimits() {
  // @@protoc_insertion_point(destructor:lm.types.TrajectoryLimits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrajectoryLimits::ArenaDtor(void* object) {
  TrajectoryLimits* _this = reinterpret_cast< TrajectoryLimits* >(object);
  (void)_this;
}
void TrajectoryLimits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryLimits& TrajectoryLimits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryLimits_lm_2ftypes_2fTrajectoryLimits_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.types.TrajectoryLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryLimits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lm.types.TrajectoryLimit limits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryLimits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.types.TrajectoryLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lm.types.TrajectoryLimit limits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_limits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.types.TrajectoryLimits)
  return target;
}

size_t TrajectoryLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.types.TrajectoryLimits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.types.TrajectoryLimit limits = 1;
  total_size += 1UL * this->_internal_limits_size();
  for (const auto& msg : this->limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryLimits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.types.TrajectoryLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryLimits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryLimits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.types.TrajectoryLimits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.types.TrajectoryLimits)
    MergeFrom(*source);
  }
}

void TrajectoryLimits::MergeFrom(const TrajectoryLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.types.TrajectoryLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
}

void TrajectoryLimits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.types.TrajectoryLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryLimits::CopyFrom(const TrajectoryLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.types.TrajectoryLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryLimits::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(limits_)) return false;
  return true;
}

void TrajectoryLimits::InternalSwap(TrajectoryLimits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  limits_.InternalSwap(&other->limits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryLimits::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::types::TrajectoryLimit* Arena::CreateMaybeMessage< ::lm::types::TrajectoryLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::types::TrajectoryLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::types::TrajectoryLimits* Arena::CreateMaybeMessage< ::lm::types::TrajectoryLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::types::TrajectoryLimits >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
