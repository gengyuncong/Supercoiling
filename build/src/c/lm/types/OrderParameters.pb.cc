// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/types/OrderParameters.proto

#include "lm/types/OrderParameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fOrderParameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderParameter_lm_2ftypes_2fOrderParameters_2eproto;
namespace lm {
namespace types {
class OrderParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderParameter> _instance;
} _OrderParameter_default_instance_;
class OrderParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderParameters> _instance;
} _OrderParameters_default_instance_;
}  // namespace types
}  // namespace lm
static void InitDefaultsscc_info_OrderParameter_lm_2ftypes_2fOrderParameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::types::_OrderParameter_default_instance_;
    new (ptr) ::lm::types::OrderParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::types::OrderParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderParameter_lm_2ftypes_2fOrderParameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderParameter_lm_2ftypes_2fOrderParameters_2eproto}, {}};

static void InitDefaultsscc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::types::_OrderParameters_default_instance_;
    new (ptr) ::lm::types::OrderParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::types::OrderParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto}, {
      &scc_info_OrderParameter_lm_2ftypes_2fOrderParameters_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2ftypes_2fOrderParameters_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2ftypes_2fOrderParameters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2ftypes_2fOrderParameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2ftypes_2fOrderParameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameter, type_),
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameter, species_index_),
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameter, species_coefficient_),
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameter, species_exponent_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::types::OrderParameters, order_parameter_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::lm::types::OrderParameter)},
  { 13, -1, sizeof(::lm::types::OrderParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::types::_OrderParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::types::_OrderParameters_default_instance_),
};

const char descriptor_table_protodef_lm_2ftypes_2fOrderParameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036lm/types/OrderParameters.proto\022\010lm.typ"
  "es\"x\n\016OrderParameter\022\014\n\004type\030\001 \002(\r\022\031\n\rsp"
  "ecies_index\030\002 \003(\rB\002\020\001\022\037\n\023species_coeffic"
  "ient\030\003 \003(\001B\002\020\001\022\034\n\020species_exponent\030\004 \003(\001"
  "B\002\020\001\"D\n\017OrderParameters\0221\n\017order_paramet"
  "er\030\001 \003(\0132\030.lm.types.OrderParameter"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2ftypes_2fOrderParameters_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2ftypes_2fOrderParameters_2eproto_sccs[2] = {
  &scc_info_OrderParameter_lm_2ftypes_2fOrderParameters_2eproto.base,
  &scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2ftypes_2fOrderParameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2ftypes_2fOrderParameters_2eproto = {
  false, false, descriptor_table_protodef_lm_2ftypes_2fOrderParameters_2eproto, "lm/types/OrderParameters.proto", 234,
  &descriptor_table_lm_2ftypes_2fOrderParameters_2eproto_once, descriptor_table_lm_2ftypes_2fOrderParameters_2eproto_sccs, descriptor_table_lm_2ftypes_2fOrderParameters_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_lm_2ftypes_2fOrderParameters_2eproto::offsets,
  file_level_metadata_lm_2ftypes_2fOrderParameters_2eproto, 2, file_level_enum_descriptors_lm_2ftypes_2fOrderParameters_2eproto, file_level_service_descriptors_lm_2ftypes_2fOrderParameters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2ftypes_2fOrderParameters_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2ftypes_2fOrderParameters_2eproto)), true);
namespace lm {
namespace types {

// ===================================================================

void OrderParameter::InitAsDefaultInstance() {
}
class OrderParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderParameter>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OrderParameter::OrderParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  species_index_(arena),
  species_coefficient_(arena),
  species_exponent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.types.OrderParameter)
}
OrderParameter::OrderParameter(const OrderParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      species_index_(from.species_index_),
      species_coefficient_(from.species_coefficient_),
      species_exponent_(from.species_exponent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:lm.types.OrderParameter)
}

void OrderParameter::SharedCtor() {
  type_ = 0u;
}

OrderParameter::~OrderParameter() {
  // @@protoc_insertion_point(destructor:lm.types.OrderParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderParameter::ArenaDtor(void* object) {
  OrderParameter* _this = reinterpret_cast< OrderParameter* >(object);
  (void)_this;
}
void OrderParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderParameter& OrderParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderParameter_lm_2ftypes_2fOrderParameters_2eproto.base);
  return *internal_default_instance();
}


void OrderParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.types.OrderParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_index_.Clear();
  species_coefficient_.Clear();
  species_exponent_.Clear();
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 species_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_species_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_species_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double species_coefficient = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_species_coefficient(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_species_coefficient(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double species_exponent = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_species_exponent(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_species_exponent(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.types.OrderParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated uint32 species_index = 2 [packed = true];
  {
    int byte_size = _species_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_species_index(), byte_size, target);
    }
  }

  // repeated double species_coefficient = 3 [packed = true];
  if (this->_internal_species_coefficient_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_species_coefficient(), target);
  }

  // repeated double species_exponent = 4 [packed = true];
  if (this->_internal_species_exponent_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_species_exponent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.types.OrderParameter)
  return target;
}

size_t OrderParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.types.OrderParameter)
  size_t total_size = 0;

  // required uint32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 species_index = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->species_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _species_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double species_coefficient = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_species_coefficient_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _species_coefficient_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double species_exponent = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_species_exponent_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _species_exponent_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.types.OrderParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.types.OrderParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.types.OrderParameter)
    MergeFrom(*source);
  }
}

void OrderParameter::MergeFrom(const OrderParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.types.OrderParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  species_index_.MergeFrom(from.species_index_);
  species_coefficient_.MergeFrom(from.species_coefficient_);
  species_exponent_.MergeFrom(from.species_exponent_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void OrderParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.types.OrderParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderParameter::CopyFrom(const OrderParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.types.OrderParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderParameter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OrderParameter::InternalSwap(OrderParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  species_index_.InternalSwap(&other->species_index_);
  species_coefficient_.InternalSwap(&other->species_coefficient_);
  species_exponent_.InternalSwap(&other->species_exponent_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderParameters::InitAsDefaultInstance() {
}
class OrderParameters::_Internal {
 public:
};

OrderParameters::OrderParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  order_parameter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.types.OrderParameters)
}
OrderParameters::OrderParameters(const OrderParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      order_parameter_(from.order_parameter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lm.types.OrderParameters)
}

void OrderParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto.base);
}

OrderParameters::~OrderParameters() {
  // @@protoc_insertion_point(destructor:lm.types.OrderParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderParameters::ArenaDtor(void* object) {
  OrderParameters* _this = reinterpret_cast< OrderParameters* >(object);
  (void)_this;
}
void OrderParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderParameters& OrderParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderParameters_lm_2ftypes_2fOrderParameters_2eproto.base);
  return *internal_default_instance();
}


void OrderParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.types.OrderParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_parameter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lm.types.OrderParameter order_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_parameter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.types.OrderParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lm.types.OrderParameter order_parameter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_order_parameter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_order_parameter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.types.OrderParameters)
  return target;
}

size_t OrderParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.types.OrderParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.types.OrderParameter order_parameter = 1;
  total_size += 1UL * this->_internal_order_parameter_size();
  for (const auto& msg : this->order_parameter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.types.OrderParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.types.OrderParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.types.OrderParameters)
    MergeFrom(*source);
  }
}

void OrderParameters::MergeFrom(const OrderParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.types.OrderParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_parameter_.MergeFrom(from.order_parameter_);
}

void OrderParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.types.OrderParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderParameters::CopyFrom(const OrderParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.types.OrderParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderParameters::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(order_parameter_)) return false;
  return true;
}

void OrderParameters::InternalSwap(OrderParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_parameter_.InternalSwap(&other->order_parameter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::types::OrderParameter* Arena::CreateMaybeMessage< ::lm::types::OrderParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::types::OrderParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::types::OrderParameters* Arena::CreateMaybeMessage< ::lm::types::OrderParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::types::OrderParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
