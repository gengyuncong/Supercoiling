// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/TilingHist.proto

#include "lm/io/TilingHist.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace lm {
namespace io {
class TilingHistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TilingHist> _instance;
} _TilingHist_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_TilingHist_lm_2fio_2fTilingHist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_TilingHist_default_instance_;
    new (ptr) ::lm::io::TilingHist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::TilingHist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TilingHist_lm_2fio_2fTilingHist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TilingHist_lm_2fio_2fTilingHist_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fTilingHist_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fTilingHist_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fTilingHist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fTilingHist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::TilingHist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TilingHist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::TilingHist, number_tiles_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TilingHist, tiling_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TilingHist, tile_indices_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TilingHist, tile_vals_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::lm::io::TilingHist)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_TilingHist_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fTilingHist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026lm/io/TilingHist.proto\022\005lm.io\"l\n\nTilin"
  "gHist\022\027\n\014number_tiles\030\001 \001(\004:\0010\022\024\n\ttiling"
  "_id\030\002 \001(\r:\0010\022\030\n\014tile_indices\030\003 \003(\rB\002\020\001\022\025"
  "\n\ttile_vals\030\004 \003(\001B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fTilingHist_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fTilingHist_2eproto_sccs[1] = {
  &scc_info_TilingHist_lm_2fio_2fTilingHist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fTilingHist_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fTilingHist_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fTilingHist_2eproto, "lm/io/TilingHist.proto", 141,
  &descriptor_table_lm_2fio_2fTilingHist_2eproto_once, descriptor_table_lm_2fio_2fTilingHist_2eproto_sccs, descriptor_table_lm_2fio_2fTilingHist_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_lm_2fio_2fTilingHist_2eproto::offsets,
  file_level_metadata_lm_2fio_2fTilingHist_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fTilingHist_2eproto, file_level_service_descriptors_lm_2fio_2fTilingHist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fTilingHist_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fTilingHist_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void TilingHist::InitAsDefaultInstance() {
}
class TilingHist::_Internal {
 public:
  using HasBits = decltype(std::declval<TilingHist>()._has_bits_);
  static void set_has_number_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tiling_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TilingHist::TilingHist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tile_indices_(arena),
  tile_vals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.TilingHist)
}
TilingHist::TilingHist(const TilingHist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_indices_(from.tile_indices_),
      tile_vals_(from.tile_vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&number_tiles_, &from.number_tiles_,
    static_cast<size_t>(reinterpret_cast<char*>(&tiling_id_) -
    reinterpret_cast<char*>(&number_tiles_)) + sizeof(tiling_id_));
  // @@protoc_insertion_point(copy_constructor:lm.io.TilingHist)
}

void TilingHist::SharedCtor() {
  ::memset(&number_tiles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tiling_id_) -
      reinterpret_cast<char*>(&number_tiles_)) + sizeof(tiling_id_));
}

TilingHist::~TilingHist() {
  // @@protoc_insertion_point(destructor:lm.io.TilingHist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TilingHist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TilingHist::ArenaDtor(void* object) {
  TilingHist* _this = reinterpret_cast< TilingHist* >(object);
  (void)_this;
}
void TilingHist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TilingHist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TilingHist& TilingHist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TilingHist_lm_2fio_2fTilingHist_2eproto.base);
  return *internal_default_instance();
}


void TilingHist::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.TilingHist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_indices_.Clear();
  tile_vals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&number_tiles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tiling_id_) -
        reinterpret_cast<char*>(&number_tiles_)) + sizeof(tiling_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TilingHist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 number_tiles = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number_tiles(&has_bits);
          number_tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tiling_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tiling_id(&has_bits);
          tiling_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 tile_indices = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tile_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_tile_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double tile_vals = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_tile_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_tile_vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TilingHist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.TilingHist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 number_tiles = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_number_tiles(), target);
  }

  // optional uint32 tiling_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tiling_id(), target);
  }

  // repeated uint32 tile_indices = 3 [packed = true];
  {
    int byte_size = _tile_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_tile_indices(), byte_size, target);
    }
  }

  // repeated double tile_vals = 4 [packed = true];
  if (this->_internal_tile_vals_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_tile_vals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.TilingHist)
  return target;
}

size_t TilingHist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.TilingHist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tile_indices = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tile_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tile_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double tile_vals = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tile_vals_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tile_vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 number_tiles = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_number_tiles());
    }

    // optional uint32 tiling_id = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tiling_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TilingHist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.TilingHist)
  GOOGLE_DCHECK_NE(&from, this);
  const TilingHist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TilingHist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.TilingHist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.TilingHist)
    MergeFrom(*source);
  }
}

void TilingHist::MergeFrom(const TilingHist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.TilingHist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_indices_.MergeFrom(from.tile_indices_);
  tile_vals_.MergeFrom(from.tile_vals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      number_tiles_ = from.number_tiles_;
    }
    if (cached_has_bits & 0x00000002u) {
      tiling_id_ = from.tiling_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TilingHist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.TilingHist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TilingHist::CopyFrom(const TilingHist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.TilingHist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TilingHist::IsInitialized() const {
  return true;
}

void TilingHist::InternalSwap(TilingHist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_indices_.InternalSwap(&other->tile_indices_);
  tile_vals_.InternalSwap(&other->tile_vals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TilingHist, tiling_id_)
      + sizeof(TilingHist::tiling_id_)
      - PROTOBUF_FIELD_OFFSET(TilingHist, number_tiles_)>(
          reinterpret_cast<char*>(&number_tiles_),
          reinterpret_cast<char*>(&other->number_tiles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TilingHist::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::TilingHist* Arena::CreateMaybeMessage< ::lm::io::TilingHist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::TilingHist >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
