// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/SpeciesTimeSeries.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fSpeciesTimeSeries_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fSpeciesTimeSeries_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "robertslab/pbuf/NDArray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fSpeciesTimeSeries_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fSpeciesTimeSeries_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fSpeciesTimeSeries_2eproto;
namespace lm {
namespace io {
class SpeciesTimeSeries;
class SpeciesTimeSeriesDefaultTypeInternal;
extern SpeciesTimeSeriesDefaultTypeInternal _SpeciesTimeSeries_default_instance_;
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::SpeciesTimeSeries* Arena::CreateMaybeMessage<::lm::io::SpeciesTimeSeries>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {

// ===================================================================

class SpeciesTimeSeries PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.SpeciesTimeSeries) */ {
 public:
  inline SpeciesTimeSeries() : SpeciesTimeSeries(nullptr) {}
  virtual ~SpeciesTimeSeries();

  SpeciesTimeSeries(const SpeciesTimeSeries& from);
  SpeciesTimeSeries(SpeciesTimeSeries&& from) noexcept
    : SpeciesTimeSeries() {
    *this = ::std::move(from);
  }

  inline SpeciesTimeSeries& operator=(const SpeciesTimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeciesTimeSeries& operator=(SpeciesTimeSeries&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeciesTimeSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeciesTimeSeries* internal_default_instance() {
    return reinterpret_cast<const SpeciesTimeSeries*>(
               &_SpeciesTimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeciesTimeSeries& a, SpeciesTimeSeries& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeciesTimeSeries* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeciesTimeSeries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeciesTimeSeries* New() const final {
    return CreateMaybeMessage<SpeciesTimeSeries>(nullptr);
  }

  SpeciesTimeSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeciesTimeSeries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeciesTimeSeries& from);
  void MergeFrom(const SpeciesTimeSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeciesTimeSeries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.SpeciesTimeSeries";
  }
  protected:
  explicit SpeciesTimeSeries(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fSpeciesTimeSeries_2eproto);
    return ::descriptor_table_lm_2fio_2fSpeciesTimeSeries_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 2,
    kTimesFieldNumber = 3,
    kTrajectoryIdFieldNumber = 1,
  };
  // required .robertslab.pbuf.NDArray counts = 2;
  bool has_counts() const;
  private:
  bool _internal_has_counts() const;
  public:
  void clear_counts();
  const ::robertslab::pbuf::NDArray& counts() const;
  ::robertslab::pbuf::NDArray* release_counts();
  ::robertslab::pbuf::NDArray* mutable_counts();
  void set_allocated_counts(::robertslab::pbuf::NDArray* counts);
  private:
  const ::robertslab::pbuf::NDArray& _internal_counts() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_counts();
  public:
  void unsafe_arena_set_allocated_counts(
      ::robertslab::pbuf::NDArray* counts);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_counts();

  // required .robertslab.pbuf.NDArray times = 3;
  bool has_times() const;
  private:
  bool _internal_has_times() const;
  public:
  void clear_times();
  const ::robertslab::pbuf::NDArray& times() const;
  ::robertslab::pbuf::NDArray* release_times();
  ::robertslab::pbuf::NDArray* mutable_times();
  void set_allocated_times(::robertslab::pbuf::NDArray* times);
  private:
  const ::robertslab::pbuf::NDArray& _internal_times() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_times();
  public:
  void unsafe_arena_set_allocated_times(
      ::robertslab::pbuf::NDArray* times);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_times();

  // required uint64 trajectory_id = 1;
  bool has_trajectory_id() const;
  private:
  bool _internal_has_trajectory_id() const;
  public:
  void clear_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 trajectory_id() const;
  void set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trajectory_id() const;
  void _internal_set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.SpeciesTimeSeries)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::robertslab::pbuf::NDArray* counts_;
  ::robertslab::pbuf::NDArray* times_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trajectory_id_;
  friend struct ::TableStruct_lm_2fio_2fSpeciesTimeSeries_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeciesTimeSeries

// required uint64 trajectory_id = 1;
inline bool SpeciesTimeSeries::_internal_has_trajectory_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpeciesTimeSeries::has_trajectory_id() const {
  return _internal_has_trajectory_id();
}
inline void SpeciesTimeSeries::clear_trajectory_id() {
  trajectory_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpeciesTimeSeries::_internal_trajectory_id() const {
  return trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpeciesTimeSeries::trajectory_id() const {
  // @@protoc_insertion_point(field_get:lm.io.SpeciesTimeSeries.trajectory_id)
  return _internal_trajectory_id();
}
inline void SpeciesTimeSeries::_internal_set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  trajectory_id_ = value;
}
inline void SpeciesTimeSeries::set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:lm.io.SpeciesTimeSeries.trajectory_id)
}

// required .robertslab.pbuf.NDArray counts = 2;
inline bool SpeciesTimeSeries::_internal_has_counts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || counts_ != nullptr);
  return value;
}
inline bool SpeciesTimeSeries::has_counts() const {
  return _internal_has_counts();
}
inline const ::robertslab::pbuf::NDArray& SpeciesTimeSeries::_internal_counts() const {
  const ::robertslab::pbuf::NDArray* p = counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& SpeciesTimeSeries::counts() const {
  // @@protoc_insertion_point(field_get:lm.io.SpeciesTimeSeries.counts)
  return _internal_counts();
}
inline void SpeciesTimeSeries::unsafe_arena_set_allocated_counts(
    ::robertslab::pbuf::NDArray* counts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts_);
  }
  counts_ = counts;
  if (counts) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.SpeciesTimeSeries.counts)
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::release_counts() {
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = counts_;
  counts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::unsafe_arena_release_counts() {
  // @@protoc_insertion_point(field_release:lm.io.SpeciesTimeSeries.counts)
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = counts_;
  counts_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::_internal_mutable_counts() {
  _has_bits_[0] |= 0x00000001u;
  if (counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    counts_ = p;
  }
  return counts_;
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::mutable_counts() {
  // @@protoc_insertion_point(field_mutable:lm.io.SpeciesTimeSeries.counts)
  return _internal_mutable_counts();
}
inline void SpeciesTimeSeries::set_allocated_counts(::robertslab::pbuf::NDArray* counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts_);
  }
  if (counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts)->GetArena();
    if (message_arena != submessage_arena) {
      counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  counts_ = counts;
  // @@protoc_insertion_point(field_set_allocated:lm.io.SpeciesTimeSeries.counts)
}

// required .robertslab.pbuf.NDArray times = 3;
inline bool SpeciesTimeSeries::_internal_has_times() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || times_ != nullptr);
  return value;
}
inline bool SpeciesTimeSeries::has_times() const {
  return _internal_has_times();
}
inline const ::robertslab::pbuf::NDArray& SpeciesTimeSeries::_internal_times() const {
  const ::robertslab::pbuf::NDArray* p = times_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& SpeciesTimeSeries::times() const {
  // @@protoc_insertion_point(field_get:lm.io.SpeciesTimeSeries.times)
  return _internal_times();
}
inline void SpeciesTimeSeries::unsafe_arena_set_allocated_times(
    ::robertslab::pbuf::NDArray* times) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(times_);
  }
  times_ = times;
  if (times) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.SpeciesTimeSeries.times)
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::release_times() {
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = times_;
  times_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::unsafe_arena_release_times() {
  // @@protoc_insertion_point(field_release:lm.io.SpeciesTimeSeries.times)
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = times_;
  times_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::_internal_mutable_times() {
  _has_bits_[0] |= 0x00000002u;
  if (times_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    times_ = p;
  }
  return times_;
}
inline ::robertslab::pbuf::NDArray* SpeciesTimeSeries::mutable_times() {
  // @@protoc_insertion_point(field_mutable:lm.io.SpeciesTimeSeries.times)
  return _internal_mutable_times();
}
inline void SpeciesTimeSeries::set_allocated_times(::robertslab::pbuf::NDArray* times) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(times_);
  }
  if (times) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(times)->GetArena();
    if (message_arena != submessage_arena) {
      times = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, times, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  times_ = times;
  // @@protoc_insertion_point(field_set_allocated:lm.io.SpeciesTimeSeries.times)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fSpeciesTimeSeries_2eproto
