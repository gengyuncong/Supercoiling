// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/LimitFlux.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fLimitFlux_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fLimitFlux_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/types/TrajectoryLimits.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fLimitFlux_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fLimitFlux_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fLimitFlux_2eproto;
namespace lm {
namespace io {
class FluxesFromStartingLimit;
class FluxesFromStartingLimitDefaultTypeInternal;
extern FluxesFromStartingLimitDefaultTypeInternal _FluxesFromStartingLimit_default_instance_;
class LimitFlux;
class LimitFluxDefaultTypeInternal;
extern LimitFluxDefaultTypeInternal _LimitFlux_default_instance_;
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::FluxesFromStartingLimit* Arena::CreateMaybeMessage<::lm::io::FluxesFromStartingLimit>(Arena*);
template<> ::lm::io::LimitFlux* Arena::CreateMaybeMessage<::lm::io::LimitFlux>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {

// ===================================================================

class LimitFlux PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.LimitFlux) */ {
 public:
  inline LimitFlux() : LimitFlux(nullptr) {}
  virtual ~LimitFlux();

  LimitFlux(const LimitFlux& from);
  LimitFlux(LimitFlux&& from) noexcept
    : LimitFlux() {
    *this = ::std::move(from);
  }

  inline LimitFlux& operator=(const LimitFlux& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitFlux& operator=(LimitFlux&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LimitFlux& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LimitFlux* internal_default_instance() {
    return reinterpret_cast<const LimitFlux*>(
               &_LimitFlux_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LimitFlux& a, LimitFlux& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitFlux* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitFlux* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitFlux* New() const final {
    return CreateMaybeMessage<LimitFlux>(nullptr);
  }

  LimitFlux* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitFlux>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LimitFlux& from);
  void MergeFrom(const LimitFlux& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitFlux* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.LimitFlux";
  }
  protected:
  explicit LimitFlux(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fLimitFlux_2eproto);
    return ::descriptor_table_lm_2fio_2fLimitFlux_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kCountFieldNumber = 2,
    kTimeFieldNumber = 3,
    kFluxFieldNumber = 4,
  };
  // optional .lm.types.TrajectoryLimit limit = 1;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const ::lm::types::TrajectoryLimit& limit() const;
  ::lm::types::TrajectoryLimit* release_limit();
  ::lm::types::TrajectoryLimit* mutable_limit();
  void set_allocated_limit(::lm::types::TrajectoryLimit* limit);
  private:
  const ::lm::types::TrajectoryLimit& _internal_limit() const;
  ::lm::types::TrajectoryLimit* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      ::lm::types::TrajectoryLimit* limit);
  ::lm::types::TrajectoryLimit* unsafe_arena_release_limit();

  // optional uint64 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional double flux = 4;
  bool has_flux() const;
  private:
  bool _internal_has_flux() const;
  public:
  void clear_flux();
  double flux() const;
  void set_flux(double value);
  private:
  double _internal_flux() const;
  void _internal_set_flux(double value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.LimitFlux)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::lm::types::TrajectoryLimit* limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  double time_;
  double flux_;
  friend struct ::TableStruct_lm_2fio_2fLimitFlux_2eproto;
};
// -------------------------------------------------------------------

class FluxesFromStartingLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.FluxesFromStartingLimit) */ {
 public:
  inline FluxesFromStartingLimit() : FluxesFromStartingLimit(nullptr) {}
  virtual ~FluxesFromStartingLimit();

  FluxesFromStartingLimit(const FluxesFromStartingLimit& from);
  FluxesFromStartingLimit(FluxesFromStartingLimit&& from) noexcept
    : FluxesFromStartingLimit() {
    *this = ::std::move(from);
  }

  inline FluxesFromStartingLimit& operator=(const FluxesFromStartingLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline FluxesFromStartingLimit& operator=(FluxesFromStartingLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FluxesFromStartingLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FluxesFromStartingLimit* internal_default_instance() {
    return reinterpret_cast<const FluxesFromStartingLimit*>(
               &_FluxesFromStartingLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FluxesFromStartingLimit& a, FluxesFromStartingLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(FluxesFromStartingLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FluxesFromStartingLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FluxesFromStartingLimit* New() const final {
    return CreateMaybeMessage<FluxesFromStartingLimit>(nullptr);
  }

  FluxesFromStartingLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FluxesFromStartingLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FluxesFromStartingLimit& from);
  void MergeFrom(const FluxesFromStartingLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FluxesFromStartingLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.FluxesFromStartingLimit";
  }
  protected:
  explicit FluxesFromStartingLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fLimitFlux_2eproto);
    return ::descriptor_table_lm_2fio_2fLimitFlux_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFluxesFieldNumber = 2,
    kStartingLimitFieldNumber = 1,
  };
  // repeated .lm.io.LimitFlux limit_fluxes = 2;
  int limit_fluxes_size() const;
  private:
  int _internal_limit_fluxes_size() const;
  public:
  void clear_limit_fluxes();
  ::lm::io::LimitFlux* mutable_limit_fluxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::LimitFlux >*
      mutable_limit_fluxes();
  private:
  const ::lm::io::LimitFlux& _internal_limit_fluxes(int index) const;
  ::lm::io::LimitFlux* _internal_add_limit_fluxes();
  public:
  const ::lm::io::LimitFlux& limit_fluxes(int index) const;
  ::lm::io::LimitFlux* add_limit_fluxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::LimitFlux >&
      limit_fluxes() const;

  // optional .lm.types.TrajectoryLimit starting_limit = 1;
  bool has_starting_limit() const;
  private:
  bool _internal_has_starting_limit() const;
  public:
  void clear_starting_limit();
  const ::lm::types::TrajectoryLimit& starting_limit() const;
  ::lm::types::TrajectoryLimit* release_starting_limit();
  ::lm::types::TrajectoryLimit* mutable_starting_limit();
  void set_allocated_starting_limit(::lm::types::TrajectoryLimit* starting_limit);
  private:
  const ::lm::types::TrajectoryLimit& _internal_starting_limit() const;
  ::lm::types::TrajectoryLimit* _internal_mutable_starting_limit();
  public:
  void unsafe_arena_set_allocated_starting_limit(
      ::lm::types::TrajectoryLimit* starting_limit);
  ::lm::types::TrajectoryLimit* unsafe_arena_release_starting_limit();

  // @@protoc_insertion_point(class_scope:lm.io.FluxesFromStartingLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::LimitFlux > limit_fluxes_;
  ::lm::types::TrajectoryLimit* starting_limit_;
  friend struct ::TableStruct_lm_2fio_2fLimitFlux_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LimitFlux

// optional .lm.types.TrajectoryLimit limit = 1;
inline bool LimitFlux::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || limit_ != nullptr);
  return value;
}
inline bool LimitFlux::has_limit() const {
  return _internal_has_limit();
}
inline const ::lm::types::TrajectoryLimit& LimitFlux::_internal_limit() const {
  const ::lm::types::TrajectoryLimit* p = limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::TrajectoryLimit*>(
      &::lm::types::_TrajectoryLimit_default_instance_);
}
inline const ::lm::types::TrajectoryLimit& LimitFlux::limit() const {
  // @@protoc_insertion_point(field_get:lm.io.LimitFlux.limit)
  return _internal_limit();
}
inline void LimitFlux::unsafe_arena_set_allocated_limit(
    ::lm::types::TrajectoryLimit* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.LimitFlux.limit)
}
inline ::lm::types::TrajectoryLimit* LimitFlux::release_limit() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::types::TrajectoryLimit* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::TrajectoryLimit* LimitFlux::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:lm.io.LimitFlux.limit)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::types::TrajectoryLimit* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline ::lm::types::TrajectoryLimit* LimitFlux::_internal_mutable_limit() {
  _has_bits_[0] |= 0x00000001u;
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::TrajectoryLimit>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline ::lm::types::TrajectoryLimit* LimitFlux::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:lm.io.LimitFlux.limit)
  return _internal_mutable_limit();
}
inline void LimitFlux::set_allocated_limit(::lm::types::TrajectoryLimit* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:lm.io.LimitFlux.limit)
}

// optional uint64 count = 2;
inline bool LimitFlux::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LimitFlux::has_count() const {
  return _internal_has_count();
}
inline void LimitFlux::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitFlux::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitFlux::count() const {
  // @@protoc_insertion_point(field_get:lm.io.LimitFlux.count)
  return _internal_count();
}
inline void LimitFlux::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void LimitFlux::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:lm.io.LimitFlux.count)
}

// optional double time = 3;
inline bool LimitFlux::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LimitFlux::has_time() const {
  return _internal_has_time();
}
inline void LimitFlux::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LimitFlux::_internal_time() const {
  return time_;
}
inline double LimitFlux::time() const {
  // @@protoc_insertion_point(field_get:lm.io.LimitFlux.time)
  return _internal_time();
}
inline void LimitFlux::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
}
inline void LimitFlux::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:lm.io.LimitFlux.time)
}

// optional double flux = 4;
inline bool LimitFlux::_internal_has_flux() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LimitFlux::has_flux() const {
  return _internal_has_flux();
}
inline void LimitFlux::clear_flux() {
  flux_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LimitFlux::_internal_flux() const {
  return flux_;
}
inline double LimitFlux::flux() const {
  // @@protoc_insertion_point(field_get:lm.io.LimitFlux.flux)
  return _internal_flux();
}
inline void LimitFlux::_internal_set_flux(double value) {
  _has_bits_[0] |= 0x00000008u;
  flux_ = value;
}
inline void LimitFlux::set_flux(double value) {
  _internal_set_flux(value);
  // @@protoc_insertion_point(field_set:lm.io.LimitFlux.flux)
}

// -------------------------------------------------------------------

// FluxesFromStartingLimit

// optional .lm.types.TrajectoryLimit starting_limit = 1;
inline bool FluxesFromStartingLimit::_internal_has_starting_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || starting_limit_ != nullptr);
  return value;
}
inline bool FluxesFromStartingLimit::has_starting_limit() const {
  return _internal_has_starting_limit();
}
inline const ::lm::types::TrajectoryLimit& FluxesFromStartingLimit::_internal_starting_limit() const {
  const ::lm::types::TrajectoryLimit* p = starting_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::types::TrajectoryLimit*>(
      &::lm::types::_TrajectoryLimit_default_instance_);
}
inline const ::lm::types::TrajectoryLimit& FluxesFromStartingLimit::starting_limit() const {
  // @@protoc_insertion_point(field_get:lm.io.FluxesFromStartingLimit.starting_limit)
  return _internal_starting_limit();
}
inline void FluxesFromStartingLimit::unsafe_arena_set_allocated_starting_limit(
    ::lm::types::TrajectoryLimit* starting_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_limit_);
  }
  starting_limit_ = starting_limit;
  if (starting_limit) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.FluxesFromStartingLimit.starting_limit)
}
inline ::lm::types::TrajectoryLimit* FluxesFromStartingLimit::release_starting_limit() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::types::TrajectoryLimit* temp = starting_limit_;
  starting_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::types::TrajectoryLimit* FluxesFromStartingLimit::unsafe_arena_release_starting_limit() {
  // @@protoc_insertion_point(field_release:lm.io.FluxesFromStartingLimit.starting_limit)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::types::TrajectoryLimit* temp = starting_limit_;
  starting_limit_ = nullptr;
  return temp;
}
inline ::lm::types::TrajectoryLimit* FluxesFromStartingLimit::_internal_mutable_starting_limit() {
  _has_bits_[0] |= 0x00000001u;
  if (starting_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::types::TrajectoryLimit>(GetArena());
    starting_limit_ = p;
  }
  return starting_limit_;
}
inline ::lm::types::TrajectoryLimit* FluxesFromStartingLimit::mutable_starting_limit() {
  // @@protoc_insertion_point(field_mutable:lm.io.FluxesFromStartingLimit.starting_limit)
  return _internal_mutable_starting_limit();
}
inline void FluxesFromStartingLimit::set_allocated_starting_limit(::lm::types::TrajectoryLimit* starting_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_limit_);
  }
  if (starting_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_limit)->GetArena();
    if (message_arena != submessage_arena) {
      starting_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starting_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  starting_limit_ = starting_limit;
  // @@protoc_insertion_point(field_set_allocated:lm.io.FluxesFromStartingLimit.starting_limit)
}

// repeated .lm.io.LimitFlux limit_fluxes = 2;
inline int FluxesFromStartingLimit::_internal_limit_fluxes_size() const {
  return limit_fluxes_.size();
}
inline int FluxesFromStartingLimit::limit_fluxes_size() const {
  return _internal_limit_fluxes_size();
}
inline void FluxesFromStartingLimit::clear_limit_fluxes() {
  limit_fluxes_.Clear();
}
inline ::lm::io::LimitFlux* FluxesFromStartingLimit::mutable_limit_fluxes(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.FluxesFromStartingLimit.limit_fluxes)
  return limit_fluxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::LimitFlux >*
FluxesFromStartingLimit::mutable_limit_fluxes() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.FluxesFromStartingLimit.limit_fluxes)
  return &limit_fluxes_;
}
inline const ::lm::io::LimitFlux& FluxesFromStartingLimit::_internal_limit_fluxes(int index) const {
  return limit_fluxes_.Get(index);
}
inline const ::lm::io::LimitFlux& FluxesFromStartingLimit::limit_fluxes(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.FluxesFromStartingLimit.limit_fluxes)
  return _internal_limit_fluxes(index);
}
inline ::lm::io::LimitFlux* FluxesFromStartingLimit::_internal_add_limit_fluxes() {
  return limit_fluxes_.Add();
}
inline ::lm::io::LimitFlux* FluxesFromStartingLimit::add_limit_fluxes() {
  // @@protoc_insertion_point(field_add:lm.io.FluxesFromStartingLimit.limit_fluxes)
  return _internal_add_limit_fluxes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::LimitFlux >&
FluxesFromStartingLimit::limit_fluxes() const {
  // @@protoc_insertion_point(field_list:lm.io.FluxesFromStartingLimit.limit_fluxes)
  return limit_fluxes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fLimitFlux_2eproto
