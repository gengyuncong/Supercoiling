// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/Hist.proto

#include "lm/io/Hist.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace lm {
namespace io {
class HistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hist> _instance;
} _Hist_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_Hist_lm_2fio_2fHist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_Hist_default_instance_;
    new (ptr) ::lm::io::Hist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::Hist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hist_lm_2fio_2fHist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hist_lm_2fio_2fHist_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fHist_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lm_2fio_2fHist_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fHist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fHist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::Hist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::Hist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::Hist, rank_),
  PROTOBUF_FIELD_OFFSET(::lm::io::Hist, dims_),
  PROTOBUF_FIELD_OFFSET(::lm::io::Hist, edges_),
  PROTOBUF_FIELD_OFFSET(::lm::io::Hist, vals_),
  PROTOBUF_FIELD_OFFSET(::lm::io::Hist, edge_types_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::lm::io::Hist)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_Hist_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fHist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020lm/io/Hist.proto\022\005lm.io\"\251\001\n\004Hist\022\014\n\004ra"
  "nk\030\001 \001(\004\022\020\n\004dims\030\002 \003(\004B\002\020\001\022\021\n\005edges\030d \003("
  "\001B\002\020\001\022\020\n\004vals\030e \003(\001B\002\020\001\022-\n\nedge_types\030\310\001"
  " \003(\0162\024.lm.io.Hist.EdgeTypeB\002\020\001\"-\n\010EdgeTy"
  "pe\022\n\n\006CLOSED\020\000\022\010\n\004OPEN\020\001\022\013\n\007IGNORED\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fHist_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fHist_2eproto_sccs[1] = {
  &scc_info_Hist_lm_2fio_2fHist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fHist_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fHist_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fHist_2eproto, "lm/io/Hist.proto", 197,
  &descriptor_table_lm_2fio_2fHist_2eproto_once, descriptor_table_lm_2fio_2fHist_2eproto_sccs, descriptor_table_lm_2fio_2fHist_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_lm_2fio_2fHist_2eproto::offsets,
  file_level_metadata_lm_2fio_2fHist_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fHist_2eproto, file_level_service_descriptors_lm_2fio_2fHist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fHist_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fHist_2eproto)), true);
namespace lm {
namespace io {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Hist_EdgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2fio_2fHist_2eproto);
  return file_level_enum_descriptors_lm_2fio_2fHist_2eproto[0];
}
bool Hist_EdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Hist_EdgeType Hist::CLOSED;
constexpr Hist_EdgeType Hist::OPEN;
constexpr Hist_EdgeType Hist::IGNORED;
constexpr Hist_EdgeType Hist::EdgeType_MIN;
constexpr Hist_EdgeType Hist::EdgeType_MAX;
constexpr int Hist::EdgeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Hist::InitAsDefaultInstance() {
}
class Hist::_Internal {
 public:
  using HasBits = decltype(std::declval<Hist>()._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Hist::Hist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dims_(arena),
  edges_(arena),
  vals_(arena),
  edge_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.Hist)
}
Hist::Hist(const Hist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dims_(from.dims_),
      edges_(from.edges_),
      vals_(from.vals_),
      edge_types_(from.edge_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:lm.io.Hist)
}

void Hist::SharedCtor() {
  rank_ = PROTOBUF_ULONGLONG(0);
}

Hist::~Hist() {
  // @@protoc_insertion_point(destructor:lm.io.Hist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Hist::ArenaDtor(void* object) {
  Hist* _this = reinterpret_cast< Hist* >(object);
  (void)_this;
}
void Hist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hist& Hist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hist_lm_2fio_2fHist_2eproto.base);
  return *internal_default_instance();
}


void Hist::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.Hist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  edges_.Clear();
  vals_.Clear();
  edge_types_.Clear();
  rank_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 dims = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double edges = 100 [packed = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_edges(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_edges(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double vals = 101 [packed = true];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.Hist.EdgeType edge_types = 200 [packed = true];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_edge_types(), ptr, ctx, ::lm::io::Hist_EdgeType_IsValid, &_internal_metadata_, 200);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::io::Hist_EdgeType_IsValid(val))) {
            _internal_add_edge_types(static_cast<::lm::io::Hist_EdgeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(200, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.Hist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rank(), target);
  }

  // repeated uint64 dims = 2 [packed = true];
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_dims(), byte_size, target);
    }
  }

  // repeated double edges = 100 [packed = true];
  if (this->_internal_edges_size() > 0) {
    target = stream->WriteFixedPacked(100, _internal_edges(), target);
  }

  // repeated double vals = 101 [packed = true];
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(101, _internal_vals(), target);
  }

  // repeated .lm.io.Hist.EdgeType edge_types = 200 [packed = true];
  {
    int byte_size = _edge_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          200, edge_types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.Hist)
  return target;
}

size_t Hist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.Hist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 dims = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double edges = 100 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_edges_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _edges_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double vals = 101 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .lm.io.Hist.EdgeType edge_types = 200 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_edge_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_edge_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _edge_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint64 rank = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.Hist)
  GOOGLE_DCHECK_NE(&from, this);
  const Hist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.Hist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.Hist)
    MergeFrom(*source);
  }
}

void Hist::MergeFrom(const Hist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.Hist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  edges_.MergeFrom(from.edges_);
  vals_.MergeFrom(from.vals_);
  edge_types_.MergeFrom(from.edge_types_);
  if (from._internal_has_rank()) {
    _internal_set_rank(from._internal_rank());
  }
}

void Hist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.Hist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hist::CopyFrom(const Hist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.Hist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hist::IsInitialized() const {
  return true;
}

void Hist::InternalSwap(Hist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dims_.InternalSwap(&other->dims_);
  edges_.InternalSwap(&other->edges_);
  vals_.InternalSwap(&other->vals_);
  edge_types_.InternalSwap(&other->edge_types_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hist::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::Hist* Arena::CreateMaybeMessage< ::lm::io::Hist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::Hist >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
