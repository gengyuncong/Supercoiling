// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/CMEState.proto

#include "lm/io/CMEState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fFirstPassageTimes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirstPassageTimes_lm_2fio_2fFirstPassageTimes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderParameterFirstPassageTimes_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fOrderParametersValues_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderParametersValues_lm_2fio_2fOrderParametersValues_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fSpeciesCounts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeciesCounts_lm_2fio_2fSpeciesCounts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robertslab_2fpbuf_2fNDArray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto;
namespace lm {
namespace io {
class CMEStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMEState> _instance;
} _CMEState_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_CMEState_lm_2fio_2fCMEState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_CMEState_default_instance_;
    new (ptr) ::lm::io::CMEState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::CMEState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CMEState_lm_2fio_2fCMEState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CMEState_lm_2fio_2fCMEState_2eproto}, {
      &scc_info_SpeciesCounts_lm_2fio_2fSpeciesCounts_2eproto.base,
      &scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto.base,
      &scc_info_OrderParametersValues_lm_2fio_2fOrderParametersValues_2eproto.base,
      &scc_info_FirstPassageTimes_lm_2fio_2fFirstPassageTimes_2eproto.base,
      &scc_info_OrderParameterFirstPassageTimes_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fCMEState_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fCMEState_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fCMEState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fCMEState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, total_steps_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, species_counts_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, degree_advancements_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, order_parameter_values_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, first_passage_times_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, order_parameter_first_passage_times_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, tiling_histogram_),
  PROTOBUF_FIELD_OFFSET(::lm::io::CMEState, barrier_crossings_),
  3,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::lm::io::CMEState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_CMEState_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fCMEState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024lm/io/CMEState.proto\022\005lm.io\032\035lm/io/Fir"
  "stPassageTimes.proto\032+lm/io/OrderParamet"
  "erFirstPassageTimes.proto\032!lm/io/OrderPa"
  "rametersValues.proto\032\031lm/io/SpeciesCount"
  "s.proto\032\035robertslab/pbuf/NDArray.proto\"\235"
  "\003\n\010CMEState\022\023\n\013total_steps\030\003 \002(\004\022,\n\016spec"
  "ies_counts\030\001 \002(\0132\024.lm.io.SpeciesCounts\0225"
  "\n\023degree_advancements\030\002 \001(\0132\030.robertslab"
  ".pbuf.NDArray\022<\n\026order_parameter_values\030"
  "\037 \001(\0132\034.lm.io.OrderParametersValues\0225\n\023f"
  "irst_passage_times\030\013 \003(\0132\030.lm.io.FirstPa"
  "ssageTimes\022S\n#order_parameter_first_pass"
  "age_times\030\025 \003(\0132&.lm.io.OrderParameterFi"
  "rstPassageTimes\0222\n\020tiling_histogram\030( \003("
  "\0132\030.robertslab.pbuf.NDArray\022\031\n\021barrier_c"
  "rossings\0302 \003(\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fCMEState_2eproto_deps[5] = {
  &::descriptor_table_lm_2fio_2fFirstPassageTimes_2eproto,
  &::descriptor_table_lm_2fio_2fOrderParameterFirstPassageTimes_2eproto,
  &::descriptor_table_lm_2fio_2fOrderParametersValues_2eproto,
  &::descriptor_table_lm_2fio_2fSpeciesCounts_2eproto,
  &::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fCMEState_2eproto_sccs[1] = {
  &scc_info_CMEState_lm_2fio_2fCMEState_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fCMEState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fCMEState_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fCMEState_2eproto, "lm/io/CMEState.proto", 614,
  &descriptor_table_lm_2fio_2fCMEState_2eproto_once, descriptor_table_lm_2fio_2fCMEState_2eproto_sccs, descriptor_table_lm_2fio_2fCMEState_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_lm_2fio_2fCMEState_2eproto::offsets,
  file_level_metadata_lm_2fio_2fCMEState_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fCMEState_2eproto, file_level_service_descriptors_lm_2fio_2fCMEState_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fCMEState_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fCMEState_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void CMEState::InitAsDefaultInstance() {
  ::lm::io::_CMEState_default_instance_._instance.get_mutable()->species_counts_ = const_cast< ::lm::io::SpeciesCounts*>(
      ::lm::io::SpeciesCounts::internal_default_instance());
  ::lm::io::_CMEState_default_instance_._instance.get_mutable()->degree_advancements_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::_CMEState_default_instance_._instance.get_mutable()->order_parameter_values_ = const_cast< ::lm::io::OrderParametersValues*>(
      ::lm::io::OrderParametersValues::internal_default_instance());
}
class CMEState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMEState>()._has_bits_);
  static void set_has_total_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::lm::io::SpeciesCounts& species_counts(const CMEState* msg);
  static void set_has_species_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robertslab::pbuf::NDArray& degree_advancements(const CMEState* msg);
  static void set_has_degree_advancements(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::lm::io::OrderParametersValues& order_parameter_values(const CMEState* msg);
  static void set_has_order_parameter_values(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::lm::io::SpeciesCounts&
CMEState::_Internal::species_counts(const CMEState* msg) {
  return *msg->species_counts_;
}
const ::robertslab::pbuf::NDArray&
CMEState::_Internal::degree_advancements(const CMEState* msg) {
  return *msg->degree_advancements_;
}
const ::lm::io::OrderParametersValues&
CMEState::_Internal::order_parameter_values(const CMEState* msg) {
  return *msg->order_parameter_values_;
}
void CMEState::clear_species_counts() {
  if (species_counts_ != nullptr) species_counts_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMEState::clear_degree_advancements() {
  if (degree_advancements_ != nullptr) degree_advancements_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMEState::clear_order_parameter_values() {
  if (order_parameter_values_ != nullptr) order_parameter_values_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CMEState::clear_first_passage_times() {
  first_passage_times_.Clear();
}
void CMEState::clear_order_parameter_first_passage_times() {
  order_parameter_first_passage_times_.Clear();
}
void CMEState::clear_tiling_histogram() {
  tiling_histogram_.Clear();
}
CMEState::CMEState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  first_passage_times_(arena),
  order_parameter_first_passage_times_(arena),
  tiling_histogram_(arena),
  barrier_crossings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.CMEState)
}
CMEState::CMEState(const CMEState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      first_passage_times_(from.first_passage_times_),
      order_parameter_first_passage_times_(from.order_parameter_first_passage_times_),
      tiling_histogram_(from.tiling_histogram_),
      barrier_crossings_(from.barrier_crossings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_species_counts()) {
    species_counts_ = new ::lm::io::SpeciesCounts(*from.species_counts_);
  } else {
    species_counts_ = nullptr;
  }
  if (from._internal_has_degree_advancements()) {
    degree_advancements_ = new ::robertslab::pbuf::NDArray(*from.degree_advancements_);
  } else {
    degree_advancements_ = nullptr;
  }
  if (from._internal_has_order_parameter_values()) {
    order_parameter_values_ = new ::lm::io::OrderParametersValues(*from.order_parameter_values_);
  } else {
    order_parameter_values_ = nullptr;
  }
  total_steps_ = from.total_steps_;
  // @@protoc_insertion_point(copy_constructor:lm.io.CMEState)
}

void CMEState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMEState_lm_2fio_2fCMEState_2eproto.base);
  ::memset(&species_counts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_steps_) -
      reinterpret_cast<char*>(&species_counts_)) + sizeof(total_steps_));
}

CMEState::~CMEState() {
  // @@protoc_insertion_point(destructor:lm.io.CMEState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMEState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete species_counts_;
  if (this != internal_default_instance()) delete degree_advancements_;
  if (this != internal_default_instance()) delete order_parameter_values_;
}

void CMEState::ArenaDtor(void* object) {
  CMEState* _this = reinterpret_cast< CMEState* >(object);
  (void)_this;
}
void CMEState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMEState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMEState& CMEState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMEState_lm_2fio_2fCMEState_2eproto.base);
  return *internal_default_instance();
}


void CMEState::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.CMEState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_passage_times_.Clear();
  order_parameter_first_passage_times_.Clear();
  tiling_histogram_.Clear();
  barrier_crossings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(species_counts_ != nullptr);
      species_counts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(degree_advancements_ != nullptr);
      degree_advancements_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(order_parameter_values_ != nullptr);
      order_parameter_values_->Clear();
    }
  }
  total_steps_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMEState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .lm.io.SpeciesCounts species_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_species_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .robertslab.pbuf.NDArray degree_advancements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_degree_advancements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 total_steps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_steps(&has_bits);
          total_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.FirstPassageTimes first_passage_times = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_passage_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_order_parameter_first_passage_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .lm.io.OrderParametersValues order_parameter_values = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_parameter_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .robertslab.pbuf.NDArray tiling_histogram = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tiling_histogram(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 barrier_crossings = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_barrier_crossings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<400>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_barrier_crossings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMEState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.CMEState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lm.io.SpeciesCounts species_counts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::species_counts(this), target, stream);
  }

  // optional .robertslab.pbuf.NDArray degree_advancements = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::degree_advancements(this), target, stream);
  }

  // required uint64 total_steps = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_steps(), target);
  }

  // repeated .lm.io.FirstPassageTimes first_passage_times = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_passage_times_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_first_passage_times(i), target, stream);
  }

  // repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_order_parameter_first_passage_times_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_order_parameter_first_passage_times(i), target, stream);
  }

  // optional .lm.io.OrderParametersValues order_parameter_values = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::order_parameter_values(this), target, stream);
  }

  // repeated .robertslab.pbuf.NDArray tiling_histogram = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiling_histogram_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_tiling_histogram(i), target, stream);
  }

  // repeated uint64 barrier_crossings = 50;
  for (int i = 0, n = this->_internal_barrier_crossings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(50, this->_internal_barrier_crossings(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.CMEState)
  return target;
}

size_t CMEState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.io.CMEState)
  size_t total_size = 0;

  if (_internal_has_species_counts()) {
    // required .lm.io.SpeciesCounts species_counts = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *species_counts_);
  }

  if (_internal_has_total_steps()) {
    // required uint64 total_steps = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_steps());
  }

  return total_size;
}
size_t CMEState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.CMEState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .lm.io.SpeciesCounts species_counts = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *species_counts_);

    // required uint64 total_steps = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_steps());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.io.FirstPassageTimes first_passage_times = 11;
  total_size += 1UL * this->_internal_first_passage_times_size();
  for (const auto& msg : this->first_passage_times_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 21;
  total_size += 2UL * this->_internal_order_parameter_first_passage_times_size();
  for (const auto& msg : this->order_parameter_first_passage_times_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .robertslab.pbuf.NDArray tiling_histogram = 40;
  total_size += 2UL * this->_internal_tiling_histogram_size();
  for (const auto& msg : this->tiling_histogram_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 barrier_crossings = 50;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->barrier_crossings_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_barrier_crossings_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .robertslab.pbuf.NDArray degree_advancements = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *degree_advancements_);
    }

    // optional .lm.io.OrderParametersValues order_parameter_values = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_parameter_values_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMEState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.CMEState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMEState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMEState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.CMEState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.CMEState)
    MergeFrom(*source);
  }
}

void CMEState::MergeFrom(const CMEState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.CMEState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_passage_times_.MergeFrom(from.first_passage_times_);
  order_parameter_first_passage_times_.MergeFrom(from.order_parameter_first_passage_times_);
  tiling_histogram_.MergeFrom(from.tiling_histogram_);
  barrier_crossings_.MergeFrom(from.barrier_crossings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_species_counts()->::lm::io::SpeciesCounts::MergeFrom(from._internal_species_counts());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_degree_advancements()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_degree_advancements());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_order_parameter_values()->::lm::io::OrderParametersValues::MergeFrom(from._internal_order_parameter_values());
    }
    if (cached_has_bits & 0x00000008u) {
      total_steps_ = from.total_steps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMEState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.CMEState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMEState::CopyFrom(const CMEState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.CMEState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMEState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(first_passage_times_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(order_parameter_first_passage_times_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tiling_histogram_)) return false;
  if (_internal_has_species_counts()) {
    if (!species_counts_->IsInitialized()) return false;
  }
  if (_internal_has_degree_advancements()) {
    if (!degree_advancements_->IsInitialized()) return false;
  }
  if (_internal_has_order_parameter_values()) {
    if (!order_parameter_values_->IsInitialized()) return false;
  }
  return true;
}

void CMEState::InternalSwap(CMEState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  first_passage_times_.InternalSwap(&other->first_passage_times_);
  order_parameter_first_passage_times_.InternalSwap(&other->order_parameter_first_passage_times_);
  tiling_histogram_.InternalSwap(&other->tiling_histogram_);
  barrier_crossings_.InternalSwap(&other->barrier_crossings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMEState, total_steps_)
      + sizeof(CMEState::total_steps_)
      - PROTOBUF_FIELD_OFFSET(CMEState, species_counts_)>(
          reinterpret_cast<char*>(&species_counts_),
          reinterpret_cast<char*>(&other->species_counts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMEState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::CMEState* Arena::CreateMaybeMessage< ::lm::io::CMEState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::CMEState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
