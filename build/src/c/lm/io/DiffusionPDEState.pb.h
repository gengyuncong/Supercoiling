// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/DiffusionPDEState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fDiffusionPDEState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fDiffusionPDEState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "robertslab/pbuf/NDArray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fDiffusionPDEState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fDiffusionPDEState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fDiffusionPDEState_2eproto;
namespace lm {
namespace io {
class DiffusionPDEState;
class DiffusionPDEStateDefaultTypeInternal;
extern DiffusionPDEStateDefaultTypeInternal _DiffusionPDEState_default_instance_;
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::DiffusionPDEState* Arena::CreateMaybeMessage<::lm::io::DiffusionPDEState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {

// ===================================================================

class DiffusionPDEState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.DiffusionPDEState) */ {
 public:
  inline DiffusionPDEState() : DiffusionPDEState(nullptr) {}
  virtual ~DiffusionPDEState();

  DiffusionPDEState(const DiffusionPDEState& from);
  DiffusionPDEState(DiffusionPDEState&& from) noexcept
    : DiffusionPDEState() {
    *this = ::std::move(from);
  }

  inline DiffusionPDEState& operator=(const DiffusionPDEState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffusionPDEState& operator=(DiffusionPDEState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiffusionPDEState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiffusionPDEState* internal_default_instance() {
    return reinterpret_cast<const DiffusionPDEState*>(
               &_DiffusionPDEState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiffusionPDEState& a, DiffusionPDEState& b) {
    a.Swap(&b);
  }
  inline void Swap(DiffusionPDEState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiffusionPDEState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiffusionPDEState* New() const final {
    return CreateMaybeMessage<DiffusionPDEState>(nullptr);
  }

  DiffusionPDEState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiffusionPDEState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiffusionPDEState& from);
  void MergeFrom(const DiffusionPDEState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffusionPDEState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.DiffusionPDEState";
  }
  protected:
  explicit DiffusionPDEState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fDiffusionPDEState_2eproto);
    return ::descriptor_table_lm_2fio_2fDiffusionPDEState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcentrationsFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .robertslab.pbuf.NDArray concentrations = 2;
  int concentrations_size() const;
  private:
  int _internal_concentrations_size() const;
  public:
  void clear_concentrations();
  ::robertslab::pbuf::NDArray* mutable_concentrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >*
      mutable_concentrations();
  private:
  const ::robertslab::pbuf::NDArray& _internal_concentrations(int index) const;
  ::robertslab::pbuf::NDArray* _internal_add_concentrations();
  public:
  const ::robertslab::pbuf::NDArray& concentrations(int index) const;
  ::robertslab::pbuf::NDArray* add_concentrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >&
      concentrations() const;

  // required double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.DiffusionPDEState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray > concentrations_;
  double time_;
  friend struct ::TableStruct_lm_2fio_2fDiffusionPDEState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiffusionPDEState

// required double time = 1;
inline bool DiffusionPDEState::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiffusionPDEState::has_time() const {
  return _internal_has_time();
}
inline void DiffusionPDEState::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DiffusionPDEState::_internal_time() const {
  return time_;
}
inline double DiffusionPDEState::time() const {
  // @@protoc_insertion_point(field_get:lm.io.DiffusionPDEState.time)
  return _internal_time();
}
inline void DiffusionPDEState::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void DiffusionPDEState::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:lm.io.DiffusionPDEState.time)
}

// repeated .robertslab.pbuf.NDArray concentrations = 2;
inline int DiffusionPDEState::_internal_concentrations_size() const {
  return concentrations_.size();
}
inline int DiffusionPDEState::concentrations_size() const {
  return _internal_concentrations_size();
}
inline ::robertslab::pbuf::NDArray* DiffusionPDEState::mutable_concentrations(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.DiffusionPDEState.concentrations)
  return concentrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >*
DiffusionPDEState::mutable_concentrations() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.DiffusionPDEState.concentrations)
  return &concentrations_;
}
inline const ::robertslab::pbuf::NDArray& DiffusionPDEState::_internal_concentrations(int index) const {
  return concentrations_.Get(index);
}
inline const ::robertslab::pbuf::NDArray& DiffusionPDEState::concentrations(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.DiffusionPDEState.concentrations)
  return _internal_concentrations(index);
}
inline ::robertslab::pbuf::NDArray* DiffusionPDEState::_internal_add_concentrations() {
  return concentrations_.Add();
}
inline ::robertslab::pbuf::NDArray* DiffusionPDEState::add_concentrations() {
  // @@protoc_insertion_point(field_add:lm.io.DiffusionPDEState.concentrations)
  return _internal_add_concentrations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >&
DiffusionPDEState::concentrations() const {
  // @@protoc_insertion_point(field_list:lm.io.DiffusionPDEState.concentrations)
  return concentrations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fDiffusionPDEState_2eproto
