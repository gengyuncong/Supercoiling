// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/TrajectoryState.proto

#include "lm/io/TrajectoryState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fCMEState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CMEState_lm_2fio_2fCMEState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fDiffusionPDEState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiffusionPDEState_lm_2fio_2fDiffusionPDEState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fRDMEState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RDMEState_lm_2fio_2fRDMEState_2eproto;
namespace lm {
namespace io {
class TrajectoryStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryState> _instance;
} _TrajectoryState_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_TrajectoryState_default_instance_;
    new (ptr) ::lm::io::TrajectoryState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::TrajectoryState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto}, {
      &scc_info_CMEState_lm_2fio_2fCMEState_2eproto.base,
      &scc_info_RDMEState_lm_2fio_2fRDMEState_2eproto.base,
      &scc_info_DiffusionPDEState_lm_2fio_2fDiffusionPDEState_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fTrajectoryState_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fTrajectoryState_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fTrajectoryState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fTrajectoryState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, trajectory_started_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, cme_state_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, rdme_state_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, diffusion_pde_state_),
  PROTOBUF_FIELD_OFFSET(::lm::io::TrajectoryState, solver_state_),
  4,
  5,
  1,
  2,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::lm::io::TrajectoryState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_TrajectoryState_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fTrajectoryState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033lm/io/TrajectoryState.proto\022\005lm.io\032\024lm"
  "/io/CMEState.proto\032\035lm/io/DiffusionPDESt"
  "ate.proto\032\025lm/io/RDMEState.proto\"\333\001\n\017Tra"
  "jectoryState\022\025\n\rtrajectory_id\030\001 \002(\004\022\032\n\022t"
  "rajectory_started\030\002 \002(\010\022\"\n\tcme_state\030\003 \001"
  "(\0132\017.lm.io.CMEState\022$\n\nrdme_state\030\004 \001(\0132"
  "\020.lm.io.RDMEState\0225\n\023diffusion_pde_state"
  "\030\007 \001(\0132\030.lm.io.DiffusionPDEState\022\024\n\014solv"
  "er_state\030d \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fTrajectoryState_2eproto_deps[3] = {
  &::descriptor_table_lm_2fio_2fCMEState_2eproto,
  &::descriptor_table_lm_2fio_2fDiffusionPDEState_2eproto,
  &::descriptor_table_lm_2fio_2fRDMEState_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fTrajectoryState_2eproto_sccs[1] = {
  &scc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fTrajectoryState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fTrajectoryState_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fTrajectoryState_2eproto, "lm/io/TrajectoryState.proto", 334,
  &descriptor_table_lm_2fio_2fTrajectoryState_2eproto_once, descriptor_table_lm_2fio_2fTrajectoryState_2eproto_sccs, descriptor_table_lm_2fio_2fTrajectoryState_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_lm_2fio_2fTrajectoryState_2eproto::offsets,
  file_level_metadata_lm_2fio_2fTrajectoryState_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fTrajectoryState_2eproto, file_level_service_descriptors_lm_2fio_2fTrajectoryState_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fTrajectoryState_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fTrajectoryState_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void TrajectoryState::InitAsDefaultInstance() {
  ::lm::io::_TrajectoryState_default_instance_._instance.get_mutable()->cme_state_ = const_cast< ::lm::io::CMEState*>(
      ::lm::io::CMEState::internal_default_instance());
  ::lm::io::_TrajectoryState_default_instance_._instance.get_mutable()->rdme_state_ = const_cast< ::lm::io::RDMEState*>(
      ::lm::io::RDMEState::internal_default_instance());
  ::lm::io::_TrajectoryState_default_instance_._instance.get_mutable()->diffusion_pde_state_ = const_cast< ::lm::io::DiffusionPDEState*>(
      ::lm::io::DiffusionPDEState::internal_default_instance());
}
class TrajectoryState::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryState>()._has_bits_);
  static void set_has_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trajectory_started(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::lm::io::CMEState& cme_state(const TrajectoryState* msg);
  static void set_has_cme_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::lm::io::RDMEState& rdme_state(const TrajectoryState* msg);
  static void set_has_rdme_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::lm::io::DiffusionPDEState& diffusion_pde_state(const TrajectoryState* msg);
  static void set_has_diffusion_pde_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_solver_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000030) ^ 0x00000030) != 0;
  }
};

const ::lm::io::CMEState&
TrajectoryState::_Internal::cme_state(const TrajectoryState* msg) {
  return *msg->cme_state_;
}
const ::lm::io::RDMEState&
TrajectoryState::_Internal::rdme_state(const TrajectoryState* msg) {
  return *msg->rdme_state_;
}
const ::lm::io::DiffusionPDEState&
TrajectoryState::_Internal::diffusion_pde_state(const TrajectoryState* msg) {
  return *msg->diffusion_pde_state_;
}
void TrajectoryState::clear_cme_state() {
  if (cme_state_ != nullptr) cme_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryState::clear_rdme_state() {
  if (rdme_state_ != nullptr) rdme_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryState::clear_diffusion_pde_state() {
  if (diffusion_pde_state_ != nullptr) diffusion_pde_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TrajectoryState::TrajectoryState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.TrajectoryState)
}
TrajectoryState::TrajectoryState(const TrajectoryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  solver_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_solver_state()) {
    solver_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_solver_state(),
      GetArena());
  }
  if (from._internal_has_cme_state()) {
    cme_state_ = new ::lm::io::CMEState(*from.cme_state_);
  } else {
    cme_state_ = nullptr;
  }
  if (from._internal_has_rdme_state()) {
    rdme_state_ = new ::lm::io::RDMEState(*from.rdme_state_);
  } else {
    rdme_state_ = nullptr;
  }
  if (from._internal_has_diffusion_pde_state()) {
    diffusion_pde_state_ = new ::lm::io::DiffusionPDEState(*from.diffusion_pde_state_);
  } else {
    diffusion_pde_state_ = nullptr;
  }
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_started_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(trajectory_started_));
  // @@protoc_insertion_point(copy_constructor:lm.io.TrajectoryState)
}

void TrajectoryState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto.base);
  solver_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cme_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_started_) -
      reinterpret_cast<char*>(&cme_state_)) + sizeof(trajectory_started_));
}

TrajectoryState::~TrajectoryState() {
  // @@protoc_insertion_point(destructor:lm.io.TrajectoryState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  solver_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cme_state_;
  if (this != internal_default_instance()) delete rdme_state_;
  if (this != internal_default_instance()) delete diffusion_pde_state_;
}

void TrajectoryState::ArenaDtor(void* object) {
  TrajectoryState* _this = reinterpret_cast< TrajectoryState* >(object);
  (void)_this;
}
void TrajectoryState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryState& TrajectoryState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryState_lm_2fio_2fTrajectoryState_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryState::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.TrajectoryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      solver_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cme_state_ != nullptr);
      cme_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rdme_state_ != nullptr);
      rdme_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(diffusion_pde_state_ != nullptr);
      diffusion_pde_state_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&trajectory_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trajectory_started_) -
        reinterpret_cast<char*>(&trajectory_id_)) + sizeof(trajectory_started_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trajectory_id(&has_bits);
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool trajectory_started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trajectory_started(&has_bits);
          trajectory_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.CMEState cme_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cme_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.RDMEState rdme_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rdme_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.DiffusionPDEState diffusion_pde_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffusion_pde_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes solver_state = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_solver_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.TrajectoryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trajectory_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trajectory_id(), target);
  }

  // required bool trajectory_started = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_trajectory_started(), target);
  }

  // optional .lm.io.CMEState cme_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cme_state(this), target, stream);
  }

  // optional .lm.io.RDMEState rdme_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rdme_state(this), target, stream);
  }

  // optional .lm.io.DiffusionPDEState diffusion_pde_state = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::diffusion_pde_state(this), target, stream);
  }

  // optional bytes solver_state = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        100, this->_internal_solver_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.TrajectoryState)
  return target;
}

size_t TrajectoryState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.io.TrajectoryState)
  size_t total_size = 0;

  if (_internal_has_trajectory_id()) {
    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());
  }

  if (_internal_has_trajectory_started()) {
    // required bool trajectory_started = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TrajectoryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.TrajectoryState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());

    // required bool trajectory_started = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes solver_state = 100;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_solver_state());
    }

    // optional .lm.io.CMEState cme_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cme_state_);
    }

    // optional .lm.io.RDMEState rdme_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rdme_state_);
    }

    // optional .lm.io.DiffusionPDEState diffusion_pde_state = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diffusion_pde_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.TrajectoryState)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.TrajectoryState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.TrajectoryState)
    MergeFrom(*source);
  }
}

void TrajectoryState::MergeFrom(const TrajectoryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.TrajectoryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_solver_state(from._internal_solver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cme_state()->::lm::io::CMEState::MergeFrom(from._internal_cme_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rdme_state()->::lm::io::RDMEState::MergeFrom(from._internal_rdme_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_diffusion_pde_state()->::lm::io::DiffusionPDEState::MergeFrom(from._internal_diffusion_pde_state());
    }
    if (cached_has_bits & 0x00000010u) {
      trajectory_id_ = from.trajectory_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      trajectory_started_ = from.trajectory_started_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.TrajectoryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryState::CopyFrom(const TrajectoryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.TrajectoryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cme_state()) {
    if (!cme_state_->IsInitialized()) return false;
  }
  if (_internal_has_rdme_state()) {
    if (!rdme_state_->IsInitialized()) return false;
  }
  if (_internal_has_diffusion_pde_state()) {
    if (!diffusion_pde_state_->IsInitialized()) return false;
  }
  return true;
}

void TrajectoryState::InternalSwap(TrajectoryState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  solver_state_.Swap(&other->solver_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryState, trajectory_started_)
      + sizeof(TrajectoryState::trajectory_started_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryState, cme_state_)>(
          reinterpret_cast<char*>(&cme_state_),
          reinterpret_cast<char*>(&other->cme_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::TrajectoryState* Arena::CreateMaybeMessage< ::lm::io::TrajectoryState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::TrajectoryState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
