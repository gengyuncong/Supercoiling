// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/TrajectoryState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fTrajectoryState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fTrajectoryState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/io/CMEState.pb.h"
#include "lm/io/DiffusionPDEState.pb.h"
#include "lm/io/RDMEState.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fTrajectoryState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fTrajectoryState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fTrajectoryState_2eproto;
namespace lm {
namespace io {
class TrajectoryState;
class TrajectoryStateDefaultTypeInternal;
extern TrajectoryStateDefaultTypeInternal _TrajectoryState_default_instance_;
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::TrajectoryState* Arena::CreateMaybeMessage<::lm::io::TrajectoryState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {

// ===================================================================

class TrajectoryState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.TrajectoryState) */ {
 public:
  inline TrajectoryState() : TrajectoryState(nullptr) {}
  virtual ~TrajectoryState();

  TrajectoryState(const TrajectoryState& from);
  TrajectoryState(TrajectoryState&& from) noexcept
    : TrajectoryState() {
    *this = ::std::move(from);
  }

  inline TrajectoryState& operator=(const TrajectoryState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryState& operator=(TrajectoryState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryState* internal_default_instance() {
    return reinterpret_cast<const TrajectoryState*>(
               &_TrajectoryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajectoryState& a, TrajectoryState& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryState* New() const final {
    return CreateMaybeMessage<TrajectoryState>(nullptr);
  }

  TrajectoryState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryState& from);
  void MergeFrom(const TrajectoryState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.TrajectoryState";
  }
  protected:
  explicit TrajectoryState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fTrajectoryState_2eproto);
    return ::descriptor_table_lm_2fio_2fTrajectoryState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverStateFieldNumber = 100,
    kCmeStateFieldNumber = 3,
    kRdmeStateFieldNumber = 4,
    kDiffusionPdeStateFieldNumber = 7,
    kTrajectoryIdFieldNumber = 1,
    kTrajectoryStartedFieldNumber = 2,
  };
  // optional bytes solver_state = 100;
  bool has_solver_state() const;
  private:
  bool _internal_has_solver_state() const;
  public:
  void clear_solver_state();
  const std::string& solver_state() const;
  void set_solver_state(const std::string& value);
  void set_solver_state(std::string&& value);
  void set_solver_state(const char* value);
  void set_solver_state(const void* value, size_t size);
  std::string* mutable_solver_state();
  std::string* release_solver_state();
  void set_allocated_solver_state(std::string* solver_state);
  private:
  const std::string& _internal_solver_state() const;
  void _internal_set_solver_state(const std::string& value);
  std::string* _internal_mutable_solver_state();
  public:

  // optional .lm.io.CMEState cme_state = 3;
  bool has_cme_state() const;
  private:
  bool _internal_has_cme_state() const;
  public:
  void clear_cme_state();
  const ::lm::io::CMEState& cme_state() const;
  ::lm::io::CMEState* release_cme_state();
  ::lm::io::CMEState* mutable_cme_state();
  void set_allocated_cme_state(::lm::io::CMEState* cme_state);
  private:
  const ::lm::io::CMEState& _internal_cme_state() const;
  ::lm::io::CMEState* _internal_mutable_cme_state();
  public:
  void unsafe_arena_set_allocated_cme_state(
      ::lm::io::CMEState* cme_state);
  ::lm::io::CMEState* unsafe_arena_release_cme_state();

  // optional .lm.io.RDMEState rdme_state = 4;
  bool has_rdme_state() const;
  private:
  bool _internal_has_rdme_state() const;
  public:
  void clear_rdme_state();
  const ::lm::io::RDMEState& rdme_state() const;
  ::lm::io::RDMEState* release_rdme_state();
  ::lm::io::RDMEState* mutable_rdme_state();
  void set_allocated_rdme_state(::lm::io::RDMEState* rdme_state);
  private:
  const ::lm::io::RDMEState& _internal_rdme_state() const;
  ::lm::io::RDMEState* _internal_mutable_rdme_state();
  public:
  void unsafe_arena_set_allocated_rdme_state(
      ::lm::io::RDMEState* rdme_state);
  ::lm::io::RDMEState* unsafe_arena_release_rdme_state();

  // optional .lm.io.DiffusionPDEState diffusion_pde_state = 7;
  bool has_diffusion_pde_state() const;
  private:
  bool _internal_has_diffusion_pde_state() const;
  public:
  void clear_diffusion_pde_state();
  const ::lm::io::DiffusionPDEState& diffusion_pde_state() const;
  ::lm::io::DiffusionPDEState* release_diffusion_pde_state();
  ::lm::io::DiffusionPDEState* mutable_diffusion_pde_state();
  void set_allocated_diffusion_pde_state(::lm::io::DiffusionPDEState* diffusion_pde_state);
  private:
  const ::lm::io::DiffusionPDEState& _internal_diffusion_pde_state() const;
  ::lm::io::DiffusionPDEState* _internal_mutable_diffusion_pde_state();
  public:
  void unsafe_arena_set_allocated_diffusion_pde_state(
      ::lm::io::DiffusionPDEState* diffusion_pde_state);
  ::lm::io::DiffusionPDEState* unsafe_arena_release_diffusion_pde_state();

  // required uint64 trajectory_id = 1;
  bool has_trajectory_id() const;
  private:
  bool _internal_has_trajectory_id() const;
  public:
  void clear_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 trajectory_id() const;
  void set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trajectory_id() const;
  void _internal_set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool trajectory_started = 2;
  bool has_trajectory_started() const;
  private:
  bool _internal_has_trajectory_started() const;
  public:
  void clear_trajectory_started();
  bool trajectory_started() const;
  void set_trajectory_started(bool value);
  private:
  bool _internal_trajectory_started() const;
  void _internal_set_trajectory_started(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.TrajectoryState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solver_state_;
  ::lm::io::CMEState* cme_state_;
  ::lm::io::RDMEState* rdme_state_;
  ::lm::io::DiffusionPDEState* diffusion_pde_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trajectory_id_;
  bool trajectory_started_;
  friend struct ::TableStruct_lm_2fio_2fTrajectoryState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryState

// required uint64 trajectory_id = 1;
inline bool TrajectoryState::_internal_has_trajectory_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrajectoryState::has_trajectory_id() const {
  return _internal_has_trajectory_id();
}
inline void TrajectoryState::clear_trajectory_id() {
  trajectory_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrajectoryState::_internal_trajectory_id() const {
  return trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrajectoryState::trajectory_id() const {
  // @@protoc_insertion_point(field_get:lm.io.TrajectoryState.trajectory_id)
  return _internal_trajectory_id();
}
inline void TrajectoryState::_internal_set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  trajectory_id_ = value;
}
inline void TrajectoryState::set_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:lm.io.TrajectoryState.trajectory_id)
}

// required bool trajectory_started = 2;
inline bool TrajectoryState::_internal_has_trajectory_started() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrajectoryState::has_trajectory_started() const {
  return _internal_has_trajectory_started();
}
inline void TrajectoryState::clear_trajectory_started() {
  trajectory_started_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrajectoryState::_internal_trajectory_started() const {
  return trajectory_started_;
}
inline bool TrajectoryState::trajectory_started() const {
  // @@protoc_insertion_point(field_get:lm.io.TrajectoryState.trajectory_started)
  return _internal_trajectory_started();
}
inline void TrajectoryState::_internal_set_trajectory_started(bool value) {
  _has_bits_[0] |= 0x00000020u;
  trajectory_started_ = value;
}
inline void TrajectoryState::set_trajectory_started(bool value) {
  _internal_set_trajectory_started(value);
  // @@protoc_insertion_point(field_set:lm.io.TrajectoryState.trajectory_started)
}

// optional .lm.io.CMEState cme_state = 3;
inline bool TrajectoryState::_internal_has_cme_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cme_state_ != nullptr);
  return value;
}
inline bool TrajectoryState::has_cme_state() const {
  return _internal_has_cme_state();
}
inline const ::lm::io::CMEState& TrajectoryState::_internal_cme_state() const {
  const ::lm::io::CMEState* p = cme_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::io::CMEState*>(
      &::lm::io::_CMEState_default_instance_);
}
inline const ::lm::io::CMEState& TrajectoryState::cme_state() const {
  // @@protoc_insertion_point(field_get:lm.io.TrajectoryState.cme_state)
  return _internal_cme_state();
}
inline void TrajectoryState::unsafe_arena_set_allocated_cme_state(
    ::lm::io::CMEState* cme_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cme_state_);
  }
  cme_state_ = cme_state;
  if (cme_state) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.TrajectoryState.cme_state)
}
inline ::lm::io::CMEState* TrajectoryState::release_cme_state() {
  _has_bits_[0] &= ~0x00000002u;
  ::lm::io::CMEState* temp = cme_state_;
  cme_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::io::CMEState* TrajectoryState::unsafe_arena_release_cme_state() {
  // @@protoc_insertion_point(field_release:lm.io.TrajectoryState.cme_state)
  _has_bits_[0] &= ~0x00000002u;
  ::lm::io::CMEState* temp = cme_state_;
  cme_state_ = nullptr;
  return temp;
}
inline ::lm::io::CMEState* TrajectoryState::_internal_mutable_cme_state() {
  _has_bits_[0] |= 0x00000002u;
  if (cme_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::io::CMEState>(GetArena());
    cme_state_ = p;
  }
  return cme_state_;
}
inline ::lm::io::CMEState* TrajectoryState::mutable_cme_state() {
  // @@protoc_insertion_point(field_mutable:lm.io.TrajectoryState.cme_state)
  return _internal_mutable_cme_state();
}
inline void TrajectoryState::set_allocated_cme_state(::lm::io::CMEState* cme_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cme_state_);
  }
  if (cme_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cme_state)->GetArena();
    if (message_arena != submessage_arena) {
      cme_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cme_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cme_state_ = cme_state;
  // @@protoc_insertion_point(field_set_allocated:lm.io.TrajectoryState.cme_state)
}

// optional .lm.io.RDMEState rdme_state = 4;
inline bool TrajectoryState::_internal_has_rdme_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rdme_state_ != nullptr);
  return value;
}
inline bool TrajectoryState::has_rdme_state() const {
  return _internal_has_rdme_state();
}
inline const ::lm::io::RDMEState& TrajectoryState::_internal_rdme_state() const {
  const ::lm::io::RDMEState* p = rdme_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::io::RDMEState*>(
      &::lm::io::_RDMEState_default_instance_);
}
inline const ::lm::io::RDMEState& TrajectoryState::rdme_state() const {
  // @@protoc_insertion_point(field_get:lm.io.TrajectoryState.rdme_state)
  return _internal_rdme_state();
}
inline void TrajectoryState::unsafe_arena_set_allocated_rdme_state(
    ::lm::io::RDMEState* rdme_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdme_state_);
  }
  rdme_state_ = rdme_state;
  if (rdme_state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.TrajectoryState.rdme_state)
}
inline ::lm::io::RDMEState* TrajectoryState::release_rdme_state() {
  _has_bits_[0] &= ~0x00000004u;
  ::lm::io::RDMEState* temp = rdme_state_;
  rdme_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::io::RDMEState* TrajectoryState::unsafe_arena_release_rdme_state() {
  // @@protoc_insertion_point(field_release:lm.io.TrajectoryState.rdme_state)
  _has_bits_[0] &= ~0x00000004u;
  ::lm::io::RDMEState* temp = rdme_state_;
  rdme_state_ = nullptr;
  return temp;
}
inline ::lm::io::RDMEState* TrajectoryState::_internal_mutable_rdme_state() {
  _has_bits_[0] |= 0x00000004u;
  if (rdme_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::io::RDMEState>(GetArena());
    rdme_state_ = p;
  }
  return rdme_state_;
}
inline ::lm::io::RDMEState* TrajectoryState::mutable_rdme_state() {
  // @@protoc_insertion_point(field_mutable:lm.io.TrajectoryState.rdme_state)
  return _internal_mutable_rdme_state();
}
inline void TrajectoryState::set_allocated_rdme_state(::lm::io::RDMEState* rdme_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdme_state_);
  }
  if (rdme_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdme_state)->GetArena();
    if (message_arena != submessage_arena) {
      rdme_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rdme_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rdme_state_ = rdme_state;
  // @@protoc_insertion_point(field_set_allocated:lm.io.TrajectoryState.rdme_state)
}

// optional .lm.io.DiffusionPDEState diffusion_pde_state = 7;
inline bool TrajectoryState::_internal_has_diffusion_pde_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || diffusion_pde_state_ != nullptr);
  return value;
}
inline bool TrajectoryState::has_diffusion_pde_state() const {
  return _internal_has_diffusion_pde_state();
}
inline const ::lm::io::DiffusionPDEState& TrajectoryState::_internal_diffusion_pde_state() const {
  const ::lm::io::DiffusionPDEState* p = diffusion_pde_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::io::DiffusionPDEState*>(
      &::lm::io::_DiffusionPDEState_default_instance_);
}
inline const ::lm::io::DiffusionPDEState& TrajectoryState::diffusion_pde_state() const {
  // @@protoc_insertion_point(field_get:lm.io.TrajectoryState.diffusion_pde_state)
  return _internal_diffusion_pde_state();
}
inline void TrajectoryState::unsafe_arena_set_allocated_diffusion_pde_state(
    ::lm::io::DiffusionPDEState* diffusion_pde_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_pde_state_);
  }
  diffusion_pde_state_ = diffusion_pde_state;
  if (diffusion_pde_state) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.TrajectoryState.diffusion_pde_state)
}
inline ::lm::io::DiffusionPDEState* TrajectoryState::release_diffusion_pde_state() {
  _has_bits_[0] &= ~0x00000008u;
  ::lm::io::DiffusionPDEState* temp = diffusion_pde_state_;
  diffusion_pde_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::io::DiffusionPDEState* TrajectoryState::unsafe_arena_release_diffusion_pde_state() {
  // @@protoc_insertion_point(field_release:lm.io.TrajectoryState.diffusion_pde_state)
  _has_bits_[0] &= ~0x00000008u;
  ::lm::io::DiffusionPDEState* temp = diffusion_pde_state_;
  diffusion_pde_state_ = nullptr;
  return temp;
}
inline ::lm::io::DiffusionPDEState* TrajectoryState::_internal_mutable_diffusion_pde_state() {
  _has_bits_[0] |= 0x00000008u;
  if (diffusion_pde_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::io::DiffusionPDEState>(GetArena());
    diffusion_pde_state_ = p;
  }
  return diffusion_pde_state_;
}
inline ::lm::io::DiffusionPDEState* TrajectoryState::mutable_diffusion_pde_state() {
  // @@protoc_insertion_point(field_mutable:lm.io.TrajectoryState.diffusion_pde_state)
  return _internal_mutable_diffusion_pde_state();
}
inline void TrajectoryState::set_allocated_diffusion_pde_state(::lm::io::DiffusionPDEState* diffusion_pde_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_pde_state_);
  }
  if (diffusion_pde_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusion_pde_state)->GetArena();
    if (message_arena != submessage_arena) {
      diffusion_pde_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffusion_pde_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  diffusion_pde_state_ = diffusion_pde_state;
  // @@protoc_insertion_point(field_set_allocated:lm.io.TrajectoryState.diffusion_pde_state)
}

// optional bytes solver_state = 100;
inline bool TrajectoryState::_internal_has_solver_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrajectoryState::has_solver_state() const {
  return _internal_has_solver_state();
}
inline void TrajectoryState::clear_solver_state() {
  solver_state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrajectoryState::solver_state() const {
  // @@protoc_insertion_point(field_get:lm.io.TrajectoryState.solver_state)
  return _internal_solver_state();
}
inline void TrajectoryState::set_solver_state(const std::string& value) {
  _internal_set_solver_state(value);
  // @@protoc_insertion_point(field_set:lm.io.TrajectoryState.solver_state)
}
inline std::string* TrajectoryState::mutable_solver_state() {
  // @@protoc_insertion_point(field_mutable:lm.io.TrajectoryState.solver_state)
  return _internal_mutable_solver_state();
}
inline const std::string& TrajectoryState::_internal_solver_state() const {
  return solver_state_.Get();
}
inline void TrajectoryState::_internal_set_solver_state(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  solver_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrajectoryState::set_solver_state(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  solver_state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lm.io.TrajectoryState.solver_state)
}
inline void TrajectoryState::set_solver_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  solver_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lm.io.TrajectoryState.solver_state)
}
inline void TrajectoryState::set_solver_state(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  solver_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lm.io.TrajectoryState.solver_state)
}
inline std::string* TrajectoryState::_internal_mutable_solver_state() {
  _has_bits_[0] |= 0x00000001u;
  return solver_state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrajectoryState::release_solver_state() {
  // @@protoc_insertion_point(field_release:lm.io.TrajectoryState.solver_state)
  if (!_internal_has_solver_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return solver_state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrajectoryState::set_allocated_solver_state(std::string* solver_state) {
  if (solver_state != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  solver_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solver_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lm.io.TrajectoryState.solver_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fTrajectoryState_2eproto
