// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/CMEState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fCMEState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fCMEState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lm/io/FirstPassageTimes.pb.h"
#include "lm/io/OrderParameterFirstPassageTimes.pb.h"
#include "lm/io/OrderParametersValues.pb.h"
#include "lm/io/SpeciesCounts.pb.h"
#include "robertslab/pbuf/NDArray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fCMEState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fCMEState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fCMEState_2eproto;
namespace lm {
namespace io {
class CMEState;
class CMEStateDefaultTypeInternal;
extern CMEStateDefaultTypeInternal _CMEState_default_instance_;
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::CMEState* Arena::CreateMaybeMessage<::lm::io::CMEState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {

// ===================================================================

class CMEState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.CMEState) */ {
 public:
  inline CMEState() : CMEState(nullptr) {}
  virtual ~CMEState();

  CMEState(const CMEState& from);
  CMEState(CMEState&& from) noexcept
    : CMEState() {
    *this = ::std::move(from);
  }

  inline CMEState& operator=(const CMEState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMEState& operator=(CMEState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMEState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMEState* internal_default_instance() {
    return reinterpret_cast<const CMEState*>(
               &_CMEState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMEState& a, CMEState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMEState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMEState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMEState* New() const final {
    return CreateMaybeMessage<CMEState>(nullptr);
  }

  CMEState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMEState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMEState& from);
  void MergeFrom(const CMEState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMEState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.CMEState";
  }
  protected:
  explicit CMEState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fCMEState_2eproto);
    return ::descriptor_table_lm_2fio_2fCMEState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstPassageTimesFieldNumber = 11,
    kOrderParameterFirstPassageTimesFieldNumber = 21,
    kTilingHistogramFieldNumber = 40,
    kBarrierCrossingsFieldNumber = 50,
    kSpeciesCountsFieldNumber = 1,
    kDegreeAdvancementsFieldNumber = 2,
    kOrderParameterValuesFieldNumber = 31,
    kTotalStepsFieldNumber = 3,
  };
  // repeated .lm.io.FirstPassageTimes first_passage_times = 11;
  int first_passage_times_size() const;
  private:
  int _internal_first_passage_times_size() const;
  public:
  void clear_first_passage_times();
  ::lm::io::FirstPassageTimes* mutable_first_passage_times(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::FirstPassageTimes >*
      mutable_first_passage_times();
  private:
  const ::lm::io::FirstPassageTimes& _internal_first_passage_times(int index) const;
  ::lm::io::FirstPassageTimes* _internal_add_first_passage_times();
  public:
  const ::lm::io::FirstPassageTimes& first_passage_times(int index) const;
  ::lm::io::FirstPassageTimes* add_first_passage_times();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::FirstPassageTimes >&
      first_passage_times() const;

  // repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 21;
  int order_parameter_first_passage_times_size() const;
  private:
  int _internal_order_parameter_first_passage_times_size() const;
  public:
  void clear_order_parameter_first_passage_times();
  ::lm::io::OrderParameterFirstPassageTimes* mutable_order_parameter_first_passage_times(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::OrderParameterFirstPassageTimes >*
      mutable_order_parameter_first_passage_times();
  private:
  const ::lm::io::OrderParameterFirstPassageTimes& _internal_order_parameter_first_passage_times(int index) const;
  ::lm::io::OrderParameterFirstPassageTimes* _internal_add_order_parameter_first_passage_times();
  public:
  const ::lm::io::OrderParameterFirstPassageTimes& order_parameter_first_passage_times(int index) const;
  ::lm::io::OrderParameterFirstPassageTimes* add_order_parameter_first_passage_times();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::OrderParameterFirstPassageTimes >&
      order_parameter_first_passage_times() const;

  // repeated .robertslab.pbuf.NDArray tiling_histogram = 40;
  int tiling_histogram_size() const;
  private:
  int _internal_tiling_histogram_size() const;
  public:
  void clear_tiling_histogram();
  ::robertslab::pbuf::NDArray* mutable_tiling_histogram(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >*
      mutable_tiling_histogram();
  private:
  const ::robertslab::pbuf::NDArray& _internal_tiling_histogram(int index) const;
  ::robertslab::pbuf::NDArray* _internal_add_tiling_histogram();
  public:
  const ::robertslab::pbuf::NDArray& tiling_histogram(int index) const;
  ::robertslab::pbuf::NDArray* add_tiling_histogram();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >&
      tiling_histogram() const;

  // repeated uint64 barrier_crossings = 50;
  int barrier_crossings_size() const;
  private:
  int _internal_barrier_crossings_size() const;
  public:
  void clear_barrier_crossings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_barrier_crossings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_barrier_crossings() const;
  void _internal_add_barrier_crossings(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_barrier_crossings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 barrier_crossings(int index) const;
  void set_barrier_crossings(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_barrier_crossings(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      barrier_crossings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_barrier_crossings();

  // required .lm.io.SpeciesCounts species_counts = 1;
  bool has_species_counts() const;
  private:
  bool _internal_has_species_counts() const;
  public:
  void clear_species_counts();
  const ::lm::io::SpeciesCounts& species_counts() const;
  ::lm::io::SpeciesCounts* release_species_counts();
  ::lm::io::SpeciesCounts* mutable_species_counts();
  void set_allocated_species_counts(::lm::io::SpeciesCounts* species_counts);
  private:
  const ::lm::io::SpeciesCounts& _internal_species_counts() const;
  ::lm::io::SpeciesCounts* _internal_mutable_species_counts();
  public:
  void unsafe_arena_set_allocated_species_counts(
      ::lm::io::SpeciesCounts* species_counts);
  ::lm::io::SpeciesCounts* unsafe_arena_release_species_counts();

  // optional .robertslab.pbuf.NDArray degree_advancements = 2;
  bool has_degree_advancements() const;
  private:
  bool _internal_has_degree_advancements() const;
  public:
  void clear_degree_advancements();
  const ::robertslab::pbuf::NDArray& degree_advancements() const;
  ::robertslab::pbuf::NDArray* release_degree_advancements();
  ::robertslab::pbuf::NDArray* mutable_degree_advancements();
  void set_allocated_degree_advancements(::robertslab::pbuf::NDArray* degree_advancements);
  private:
  const ::robertslab::pbuf::NDArray& _internal_degree_advancements() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_degree_advancements();
  public:
  void unsafe_arena_set_allocated_degree_advancements(
      ::robertslab::pbuf::NDArray* degree_advancements);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_degree_advancements();

  // optional .lm.io.OrderParametersValues order_parameter_values = 31;
  bool has_order_parameter_values() const;
  private:
  bool _internal_has_order_parameter_values() const;
  public:
  void clear_order_parameter_values();
  const ::lm::io::OrderParametersValues& order_parameter_values() const;
  ::lm::io::OrderParametersValues* release_order_parameter_values();
  ::lm::io::OrderParametersValues* mutable_order_parameter_values();
  void set_allocated_order_parameter_values(::lm::io::OrderParametersValues* order_parameter_values);
  private:
  const ::lm::io::OrderParametersValues& _internal_order_parameter_values() const;
  ::lm::io::OrderParametersValues* _internal_mutable_order_parameter_values();
  public:
  void unsafe_arena_set_allocated_order_parameter_values(
      ::lm::io::OrderParametersValues* order_parameter_values);
  ::lm::io::OrderParametersValues* unsafe_arena_release_order_parameter_values();

  // required uint64 total_steps = 3;
  bool has_total_steps() const;
  private:
  bool _internal_has_total_steps() const;
  public:
  void clear_total_steps();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_steps() const;
  void set_total_steps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_steps() const;
  void _internal_set_total_steps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.CMEState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::FirstPassageTimes > first_passage_times_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::OrderParameterFirstPassageTimes > order_parameter_first_passage_times_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray > tiling_histogram_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > barrier_crossings_;
  ::lm::io::SpeciesCounts* species_counts_;
  ::robertslab::pbuf::NDArray* degree_advancements_;
  ::lm::io::OrderParametersValues* order_parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_steps_;
  friend struct ::TableStruct_lm_2fio_2fCMEState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMEState

// required uint64 total_steps = 3;
inline bool CMEState::_internal_has_total_steps() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMEState::has_total_steps() const {
  return _internal_has_total_steps();
}
inline void CMEState::clear_total_steps() {
  total_steps_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMEState::_internal_total_steps() const {
  return total_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMEState::total_steps() const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.total_steps)
  return _internal_total_steps();
}
inline void CMEState::_internal_set_total_steps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  total_steps_ = value;
}
inline void CMEState::set_total_steps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_steps(value);
  // @@protoc_insertion_point(field_set:lm.io.CMEState.total_steps)
}

// required .lm.io.SpeciesCounts species_counts = 1;
inline bool CMEState::_internal_has_species_counts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || species_counts_ != nullptr);
  return value;
}
inline bool CMEState::has_species_counts() const {
  return _internal_has_species_counts();
}
inline const ::lm::io::SpeciesCounts& CMEState::_internal_species_counts() const {
  const ::lm::io::SpeciesCounts* p = species_counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::io::SpeciesCounts*>(
      &::lm::io::_SpeciesCounts_default_instance_);
}
inline const ::lm::io::SpeciesCounts& CMEState::species_counts() const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.species_counts)
  return _internal_species_counts();
}
inline void CMEState::unsafe_arena_set_allocated_species_counts(
    ::lm::io::SpeciesCounts* species_counts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(species_counts_);
  }
  species_counts_ = species_counts;
  if (species_counts) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.CMEState.species_counts)
}
inline ::lm::io::SpeciesCounts* CMEState::release_species_counts() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::io::SpeciesCounts* temp = species_counts_;
  species_counts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::io::SpeciesCounts* CMEState::unsafe_arena_release_species_counts() {
  // @@protoc_insertion_point(field_release:lm.io.CMEState.species_counts)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::io::SpeciesCounts* temp = species_counts_;
  species_counts_ = nullptr;
  return temp;
}
inline ::lm::io::SpeciesCounts* CMEState::_internal_mutable_species_counts() {
  _has_bits_[0] |= 0x00000001u;
  if (species_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::io::SpeciesCounts>(GetArena());
    species_counts_ = p;
  }
  return species_counts_;
}
inline ::lm::io::SpeciesCounts* CMEState::mutable_species_counts() {
  // @@protoc_insertion_point(field_mutable:lm.io.CMEState.species_counts)
  return _internal_mutable_species_counts();
}
inline void CMEState::set_allocated_species_counts(::lm::io::SpeciesCounts* species_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(species_counts_);
  }
  if (species_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(species_counts)->GetArena();
    if (message_arena != submessage_arena) {
      species_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, species_counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  species_counts_ = species_counts;
  // @@protoc_insertion_point(field_set_allocated:lm.io.CMEState.species_counts)
}

// optional .robertslab.pbuf.NDArray degree_advancements = 2;
inline bool CMEState::_internal_has_degree_advancements() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || degree_advancements_ != nullptr);
  return value;
}
inline bool CMEState::has_degree_advancements() const {
  return _internal_has_degree_advancements();
}
inline const ::robertslab::pbuf::NDArray& CMEState::_internal_degree_advancements() const {
  const ::robertslab::pbuf::NDArray* p = degree_advancements_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& CMEState::degree_advancements() const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.degree_advancements)
  return _internal_degree_advancements();
}
inline void CMEState::unsafe_arena_set_allocated_degree_advancements(
    ::robertslab::pbuf::NDArray* degree_advancements) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(degree_advancements_);
  }
  degree_advancements_ = degree_advancements;
  if (degree_advancements) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.CMEState.degree_advancements)
}
inline ::robertslab::pbuf::NDArray* CMEState::release_degree_advancements() {
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = degree_advancements_;
  degree_advancements_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* CMEState::unsafe_arena_release_degree_advancements() {
  // @@protoc_insertion_point(field_release:lm.io.CMEState.degree_advancements)
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = degree_advancements_;
  degree_advancements_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* CMEState::_internal_mutable_degree_advancements() {
  _has_bits_[0] |= 0x00000002u;
  if (degree_advancements_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    degree_advancements_ = p;
  }
  return degree_advancements_;
}
inline ::robertslab::pbuf::NDArray* CMEState::mutable_degree_advancements() {
  // @@protoc_insertion_point(field_mutable:lm.io.CMEState.degree_advancements)
  return _internal_mutable_degree_advancements();
}
inline void CMEState::set_allocated_degree_advancements(::robertslab::pbuf::NDArray* degree_advancements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(degree_advancements_);
  }
  if (degree_advancements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(degree_advancements)->GetArena();
    if (message_arena != submessage_arena) {
      degree_advancements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, degree_advancements, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  degree_advancements_ = degree_advancements;
  // @@protoc_insertion_point(field_set_allocated:lm.io.CMEState.degree_advancements)
}

// optional .lm.io.OrderParametersValues order_parameter_values = 31;
inline bool CMEState::_internal_has_order_parameter_values() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || order_parameter_values_ != nullptr);
  return value;
}
inline bool CMEState::has_order_parameter_values() const {
  return _internal_has_order_parameter_values();
}
inline const ::lm::io::OrderParametersValues& CMEState::_internal_order_parameter_values() const {
  const ::lm::io::OrderParametersValues* p = order_parameter_values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::io::OrderParametersValues*>(
      &::lm::io::_OrderParametersValues_default_instance_);
}
inline const ::lm::io::OrderParametersValues& CMEState::order_parameter_values() const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.order_parameter_values)
  return _internal_order_parameter_values();
}
inline void CMEState::unsafe_arena_set_allocated_order_parameter_values(
    ::lm::io::OrderParametersValues* order_parameter_values) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameter_values_);
  }
  order_parameter_values_ = order_parameter_values;
  if (order_parameter_values) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.CMEState.order_parameter_values)
}
inline ::lm::io::OrderParametersValues* CMEState::release_order_parameter_values() {
  _has_bits_[0] &= ~0x00000004u;
  ::lm::io::OrderParametersValues* temp = order_parameter_values_;
  order_parameter_values_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::io::OrderParametersValues* CMEState::unsafe_arena_release_order_parameter_values() {
  // @@protoc_insertion_point(field_release:lm.io.CMEState.order_parameter_values)
  _has_bits_[0] &= ~0x00000004u;
  ::lm::io::OrderParametersValues* temp = order_parameter_values_;
  order_parameter_values_ = nullptr;
  return temp;
}
inline ::lm::io::OrderParametersValues* CMEState::_internal_mutable_order_parameter_values() {
  _has_bits_[0] |= 0x00000004u;
  if (order_parameter_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::io::OrderParametersValues>(GetArena());
    order_parameter_values_ = p;
  }
  return order_parameter_values_;
}
inline ::lm::io::OrderParametersValues* CMEState::mutable_order_parameter_values() {
  // @@protoc_insertion_point(field_mutable:lm.io.CMEState.order_parameter_values)
  return _internal_mutable_order_parameter_values();
}
inline void CMEState::set_allocated_order_parameter_values(::lm::io::OrderParametersValues* order_parameter_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameter_values_);
  }
  if (order_parameter_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_parameter_values)->GetArena();
    if (message_arena != submessage_arena) {
      order_parameter_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_parameter_values, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  order_parameter_values_ = order_parameter_values;
  // @@protoc_insertion_point(field_set_allocated:lm.io.CMEState.order_parameter_values)
}

// repeated .lm.io.FirstPassageTimes first_passage_times = 11;
inline int CMEState::_internal_first_passage_times_size() const {
  return first_passage_times_.size();
}
inline int CMEState::first_passage_times_size() const {
  return _internal_first_passage_times_size();
}
inline ::lm::io::FirstPassageTimes* CMEState::mutable_first_passage_times(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.CMEState.first_passage_times)
  return first_passage_times_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::FirstPassageTimes >*
CMEState::mutable_first_passage_times() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.CMEState.first_passage_times)
  return &first_passage_times_;
}
inline const ::lm::io::FirstPassageTimes& CMEState::_internal_first_passage_times(int index) const {
  return first_passage_times_.Get(index);
}
inline const ::lm::io::FirstPassageTimes& CMEState::first_passage_times(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.first_passage_times)
  return _internal_first_passage_times(index);
}
inline ::lm::io::FirstPassageTimes* CMEState::_internal_add_first_passage_times() {
  return first_passage_times_.Add();
}
inline ::lm::io::FirstPassageTimes* CMEState::add_first_passage_times() {
  // @@protoc_insertion_point(field_add:lm.io.CMEState.first_passage_times)
  return _internal_add_first_passage_times();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::FirstPassageTimes >&
CMEState::first_passage_times() const {
  // @@protoc_insertion_point(field_list:lm.io.CMEState.first_passage_times)
  return first_passage_times_;
}

// repeated .lm.io.OrderParameterFirstPassageTimes order_parameter_first_passage_times = 21;
inline int CMEState::_internal_order_parameter_first_passage_times_size() const {
  return order_parameter_first_passage_times_.size();
}
inline int CMEState::order_parameter_first_passage_times_size() const {
  return _internal_order_parameter_first_passage_times_size();
}
inline ::lm::io::OrderParameterFirstPassageTimes* CMEState::mutable_order_parameter_first_passage_times(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.CMEState.order_parameter_first_passage_times)
  return order_parameter_first_passage_times_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::OrderParameterFirstPassageTimes >*
CMEState::mutable_order_parameter_first_passage_times() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.CMEState.order_parameter_first_passage_times)
  return &order_parameter_first_passage_times_;
}
inline const ::lm::io::OrderParameterFirstPassageTimes& CMEState::_internal_order_parameter_first_passage_times(int index) const {
  return order_parameter_first_passage_times_.Get(index);
}
inline const ::lm::io::OrderParameterFirstPassageTimes& CMEState::order_parameter_first_passage_times(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.order_parameter_first_passage_times)
  return _internal_order_parameter_first_passage_times(index);
}
inline ::lm::io::OrderParameterFirstPassageTimes* CMEState::_internal_add_order_parameter_first_passage_times() {
  return order_parameter_first_passage_times_.Add();
}
inline ::lm::io::OrderParameterFirstPassageTimes* CMEState::add_order_parameter_first_passage_times() {
  // @@protoc_insertion_point(field_add:lm.io.CMEState.order_parameter_first_passage_times)
  return _internal_add_order_parameter_first_passage_times();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::OrderParameterFirstPassageTimes >&
CMEState::order_parameter_first_passage_times() const {
  // @@protoc_insertion_point(field_list:lm.io.CMEState.order_parameter_first_passage_times)
  return order_parameter_first_passage_times_;
}

// repeated .robertslab.pbuf.NDArray tiling_histogram = 40;
inline int CMEState::_internal_tiling_histogram_size() const {
  return tiling_histogram_.size();
}
inline int CMEState::tiling_histogram_size() const {
  return _internal_tiling_histogram_size();
}
inline ::robertslab::pbuf::NDArray* CMEState::mutable_tiling_histogram(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.CMEState.tiling_histogram)
  return tiling_histogram_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >*
CMEState::mutable_tiling_histogram() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.CMEState.tiling_histogram)
  return &tiling_histogram_;
}
inline const ::robertslab::pbuf::NDArray& CMEState::_internal_tiling_histogram(int index) const {
  return tiling_histogram_.Get(index);
}
inline const ::robertslab::pbuf::NDArray& CMEState::tiling_histogram(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.tiling_histogram)
  return _internal_tiling_histogram(index);
}
inline ::robertslab::pbuf::NDArray* CMEState::_internal_add_tiling_histogram() {
  return tiling_histogram_.Add();
}
inline ::robertslab::pbuf::NDArray* CMEState::add_tiling_histogram() {
  // @@protoc_insertion_point(field_add:lm.io.CMEState.tiling_histogram)
  return _internal_add_tiling_histogram();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robertslab::pbuf::NDArray >&
CMEState::tiling_histogram() const {
  // @@protoc_insertion_point(field_list:lm.io.CMEState.tiling_histogram)
  return tiling_histogram_;
}

// repeated uint64 barrier_crossings = 50;
inline int CMEState::_internal_barrier_crossings_size() const {
  return barrier_crossings_.size();
}
inline int CMEState::barrier_crossings_size() const {
  return _internal_barrier_crossings_size();
}
inline void CMEState::clear_barrier_crossings() {
  barrier_crossings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMEState::_internal_barrier_crossings(int index) const {
  return barrier_crossings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMEState::barrier_crossings(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.CMEState.barrier_crossings)
  return _internal_barrier_crossings(index);
}
inline void CMEState::set_barrier_crossings(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  barrier_crossings_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.CMEState.barrier_crossings)
}
inline void CMEState::_internal_add_barrier_crossings(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  barrier_crossings_.Add(value);
}
inline void CMEState::add_barrier_crossings(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_barrier_crossings(value);
  // @@protoc_insertion_point(field_add:lm.io.CMEState.barrier_crossings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMEState::_internal_barrier_crossings() const {
  return barrier_crossings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMEState::barrier_crossings() const {
  // @@protoc_insertion_point(field_list:lm.io.CMEState.barrier_crossings)
  return _internal_barrier_crossings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMEState::_internal_mutable_barrier_crossings() {
  return &barrier_crossings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMEState::mutable_barrier_crossings() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.CMEState.barrier_crossings)
  return _internal_mutable_barrier_crossings();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fCMEState_2eproto
