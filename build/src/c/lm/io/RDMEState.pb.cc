// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/RDMEState.proto

#include "lm/io/RDMEState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fLattice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lattice_lm_2ftypes_2fLattice_2eproto;
namespace lm {
namespace io {
class RDMEStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDMEState> _instance;
} _RDMEState_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_RDMEState_lm_2fio_2fRDMEState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_RDMEState_default_instance_;
    new (ptr) ::lm::io::RDMEState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::RDMEState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RDMEState_lm_2fio_2fRDMEState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RDMEState_lm_2fio_2fRDMEState_2eproto}, {
      &scc_info_Lattice_lm_2ftypes_2fLattice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fRDMEState_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fRDMEState_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fRDMEState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fRDMEState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::RDMEState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::RDMEState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::RDMEState, lattice_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::lm::io::RDMEState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_RDMEState_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fRDMEState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025lm/io/RDMEState.proto\022\005lm.io\032\026lm/types"
  "/Lattice.proto\"/\n\tRDMEState\022\"\n\007lattice\030\001"
  " \002(\0132\021.lm.types.Lattice"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fRDMEState_2eproto_deps[1] = {
  &::descriptor_table_lm_2ftypes_2fLattice_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fRDMEState_2eproto_sccs[1] = {
  &scc_info_RDMEState_lm_2fio_2fRDMEState_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fRDMEState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fRDMEState_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fRDMEState_2eproto, "lm/io/RDMEState.proto", 103,
  &descriptor_table_lm_2fio_2fRDMEState_2eproto_once, descriptor_table_lm_2fio_2fRDMEState_2eproto_sccs, descriptor_table_lm_2fio_2fRDMEState_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_lm_2fio_2fRDMEState_2eproto::offsets,
  file_level_metadata_lm_2fio_2fRDMEState_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fRDMEState_2eproto, file_level_service_descriptors_lm_2fio_2fRDMEState_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fRDMEState_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fRDMEState_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void RDMEState::InitAsDefaultInstance() {
  ::lm::io::_RDMEState_default_instance_._instance.get_mutable()->lattice_ = const_cast< ::lm::types::Lattice*>(
      ::lm::types::Lattice::internal_default_instance());
}
class RDMEState::_Internal {
 public:
  using HasBits = decltype(std::declval<RDMEState>()._has_bits_);
  static const ::lm::types::Lattice& lattice(const RDMEState* msg);
  static void set_has_lattice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::lm::types::Lattice&
RDMEState::_Internal::lattice(const RDMEState* msg) {
  return *msg->lattice_;
}
void RDMEState::clear_lattice() {
  if (lattice_ != nullptr) lattice_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RDMEState::RDMEState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.RDMEState)
}
RDMEState::RDMEState(const RDMEState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lattice()) {
    lattice_ = new ::lm::types::Lattice(*from.lattice_);
  } else {
    lattice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lm.io.RDMEState)
}

void RDMEState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RDMEState_lm_2fio_2fRDMEState_2eproto.base);
  lattice_ = nullptr;
}

RDMEState::~RDMEState() {
  // @@protoc_insertion_point(destructor:lm.io.RDMEState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDMEState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lattice_;
}

void RDMEState::ArenaDtor(void* object) {
  RDMEState* _this = reinterpret_cast< RDMEState* >(object);
  (void)_this;
}
void RDMEState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDMEState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDMEState& RDMEState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDMEState_lm_2fio_2fRDMEState_2eproto.base);
  return *internal_default_instance();
}


void RDMEState::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.RDMEState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lattice_ != nullptr);
    lattice_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDMEState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .lm.types.Lattice lattice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lattice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDMEState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.RDMEState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lm.types.Lattice lattice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lattice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.RDMEState)
  return target;
}

size_t RDMEState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.RDMEState)
  size_t total_size = 0;

  // required .lm.types.Lattice lattice = 1;
  if (_internal_has_lattice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lattice_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDMEState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.RDMEState)
  GOOGLE_DCHECK_NE(&from, this);
  const RDMEState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDMEState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.RDMEState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.RDMEState)
    MergeFrom(*source);
  }
}

void RDMEState::MergeFrom(const RDMEState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.RDMEState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lattice()) {
    _internal_mutable_lattice()->::lm::types::Lattice::MergeFrom(from._internal_lattice());
  }
}

void RDMEState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.RDMEState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMEState::CopyFrom(const RDMEState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.RDMEState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMEState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_lattice()) {
    if (!lattice_->IsInitialized()) return false;
  }
  return true;
}

void RDMEState::InternalSwap(RDMEState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lattice_, other->lattice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RDMEState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::RDMEState* Arena::CreateMaybeMessage< ::lm::io::RDMEState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::RDMEState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
