// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/StochasticProcessTimeSeries.proto

#include "lm/io/StochasticProcessTimeSeries.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_robertslab_2fpbuf_2fNDArray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto;
namespace lm {
namespace io {
class StochasticProcessTimeSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StochasticProcessTimeSeries> _instance;
} _StochasticProcessTimeSeries_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_StochasticProcessTimeSeries_default_instance_;
    new (ptr) ::lm::io::StochasticProcessTimeSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::StochasticProcessTimeSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto}, {
      &scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fStochasticProcessTimeSeries_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fStochasticProcessTimeSeries_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fStochasticProcessTimeSeries_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fStochasticProcessTimeSeries_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::StochasticProcessTimeSeries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::StochasticProcessTimeSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::StochasticProcessTimeSeries, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::StochasticProcessTimeSeries, values_),
  PROTOBUF_FIELD_OFFSET(::lm::io::StochasticProcessTimeSeries, times_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::lm::io::StochasticProcessTimeSeries)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_StochasticProcessTimeSeries_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fStochasticProcessTimeSeries_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'lm/io/StochasticProcessTimeSeries.prot"
  "o\022\005lm.io\032\035robertslab/pbuf/NDArray.proto\""
  "\207\001\n\033StochasticProcessTimeSeries\022\025\n\rtraje"
  "ctory_id\030\001 \002(\004\022(\n\006values\030\002 \002(\0132\030.roberts"
  "lab.pbuf.NDArray\022\'\n\005times\030\003 \002(\0132\030.robert"
  "slab.pbuf.NDArray"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto_deps[1] = {
  &::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto_sccs[1] = {
  &scc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fStochasticProcessTimeSeries_2eproto, "lm/io/StochasticProcessTimeSeries.proto", 217,
  &descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto_once, descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto_sccs, descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_lm_2fio_2fStochasticProcessTimeSeries_2eproto::offsets,
  file_level_metadata_lm_2fio_2fStochasticProcessTimeSeries_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fStochasticProcessTimeSeries_2eproto, file_level_service_descriptors_lm_2fio_2fStochasticProcessTimeSeries_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fStochasticProcessTimeSeries_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fStochasticProcessTimeSeries_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void StochasticProcessTimeSeries::InitAsDefaultInstance() {
  ::lm::io::_StochasticProcessTimeSeries_default_instance_._instance.get_mutable()->values_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::_StochasticProcessTimeSeries_default_instance_._instance.get_mutable()->times_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
}
class StochasticProcessTimeSeries::_Internal {
 public:
  using HasBits = decltype(std::declval<StochasticProcessTimeSeries>()._has_bits_);
  static void set_has_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::robertslab::pbuf::NDArray& values(const StochasticProcessTimeSeries* msg);
  static void set_has_values(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robertslab::pbuf::NDArray& times(const StochasticProcessTimeSeries* msg);
  static void set_has_times(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::robertslab::pbuf::NDArray&
StochasticProcessTimeSeries::_Internal::values(const StochasticProcessTimeSeries* msg) {
  return *msg->values_;
}
const ::robertslab::pbuf::NDArray&
StochasticProcessTimeSeries::_Internal::times(const StochasticProcessTimeSeries* msg) {
  return *msg->times_;
}
void StochasticProcessTimeSeries::clear_values() {
  if (values_ != nullptr) values_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StochasticProcessTimeSeries::clear_times() {
  if (times_ != nullptr) times_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StochasticProcessTimeSeries::StochasticProcessTimeSeries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.StochasticProcessTimeSeries)
}
StochasticProcessTimeSeries::StochasticProcessTimeSeries(const StochasticProcessTimeSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_values()) {
    values_ = new ::robertslab::pbuf::NDArray(*from.values_);
  } else {
    values_ = nullptr;
  }
  if (from._internal_has_times()) {
    times_ = new ::robertslab::pbuf::NDArray(*from.times_);
  } else {
    times_ = nullptr;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:lm.io.StochasticProcessTimeSeries)
}

void StochasticProcessTimeSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto.base);
  ::memset(&values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&values_)) + sizeof(trajectory_id_));
}

StochasticProcessTimeSeries::~StochasticProcessTimeSeries() {
  // @@protoc_insertion_point(destructor:lm.io.StochasticProcessTimeSeries)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StochasticProcessTimeSeries::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete values_;
  if (this != internal_default_instance()) delete times_;
}

void StochasticProcessTimeSeries::ArenaDtor(void* object) {
  StochasticProcessTimeSeries* _this = reinterpret_cast< StochasticProcessTimeSeries* >(object);
  (void)_this;
}
void StochasticProcessTimeSeries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StochasticProcessTimeSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StochasticProcessTimeSeries& StochasticProcessTimeSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StochasticProcessTimeSeries_lm_2fio_2fStochasticProcessTimeSeries_2eproto.base);
  return *internal_default_instance();
}


void StochasticProcessTimeSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.StochasticProcessTimeSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(values_ != nullptr);
      values_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(times_ != nullptr);
      times_->Clear();
    }
  }
  trajectory_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StochasticProcessTimeSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trajectory_id(&has_bits);
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray times = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_times(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StochasticProcessTimeSeries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.StochasticProcessTimeSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trajectory_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trajectory_id(), target);
  }

  // required .robertslab.pbuf.NDArray values = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray times = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::times(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.StochasticProcessTimeSeries)
  return target;
}

size_t StochasticProcessTimeSeries::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.io.StochasticProcessTimeSeries)
  size_t total_size = 0;

  if (_internal_has_values()) {
    // required .robertslab.pbuf.NDArray values = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  if (_internal_has_times()) {
    // required .robertslab.pbuf.NDArray times = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *times_);
  }

  if (_internal_has_trajectory_id()) {
    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());
  }

  return total_size;
}
size_t StochasticProcessTimeSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.StochasticProcessTimeSeries)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .robertslab.pbuf.NDArray values = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);

    // required .robertslab.pbuf.NDArray times = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *times_);

    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StochasticProcessTimeSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.StochasticProcessTimeSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const StochasticProcessTimeSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StochasticProcessTimeSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.StochasticProcessTimeSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.StochasticProcessTimeSeries)
    MergeFrom(*source);
  }
}

void StochasticProcessTimeSeries::MergeFrom(const StochasticProcessTimeSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.StochasticProcessTimeSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_values()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_values());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_times()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_times());
    }
    if (cached_has_bits & 0x00000004u) {
      trajectory_id_ = from.trajectory_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StochasticProcessTimeSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.StochasticProcessTimeSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StochasticProcessTimeSeries::CopyFrom(const StochasticProcessTimeSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.StochasticProcessTimeSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StochasticProcessTimeSeries::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_values()) {
    if (!values_->IsInitialized()) return false;
  }
  if (_internal_has_times()) {
    if (!times_->IsInitialized()) return false;
  }
  return true;
}

void StochasticProcessTimeSeries::InternalSwap(StochasticProcessTimeSeries* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StochasticProcessTimeSeries, trajectory_id_)
      + sizeof(StochasticProcessTimeSeries::trajectory_id_)
      - PROTOBUF_FIELD_OFFSET(StochasticProcessTimeSeries, values_)>(
          reinterpret_cast<char*>(&values_),
          reinterpret_cast<char*>(&other->values_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StochasticProcessTimeSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::StochasticProcessTimeSeries* Arena::CreateMaybeMessage< ::lm::io::StochasticProcessTimeSeries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::StochasticProcessTimeSeries >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
