// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/LimitFlux.proto

#include "lm/io/LimitFlux.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fLimitFlux_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2ftypes_2fTrajectoryLimits_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto;
namespace lm {
namespace io {
class LimitFluxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LimitFlux> _instance;
} _LimitFlux_default_instance_;
class FluxesFromStartingLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FluxesFromStartingLimit> _instance;
} _FluxesFromStartingLimit_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_FluxesFromStartingLimit_lm_2fio_2fLimitFlux_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_FluxesFromStartingLimit_default_instance_;
    new (ptr) ::lm::io::FluxesFromStartingLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::FluxesFromStartingLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FluxesFromStartingLimit_lm_2fio_2fLimitFlux_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FluxesFromStartingLimit_lm_2fio_2fLimitFlux_2eproto}, {
      &scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto.base,
      &scc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto.base,}};

static void InitDefaultsscc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_LimitFlux_default_instance_;
    new (ptr) ::lm::io::LimitFlux();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::LimitFlux::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto}, {
      &scc_info_TrajectoryLimit_lm_2ftypes_2fTrajectoryLimits_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fLimitFlux_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fLimitFlux_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fLimitFlux_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fLimitFlux_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::LimitFlux, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::LimitFlux, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::LimitFlux, limit_),
  PROTOBUF_FIELD_OFFSET(::lm::io::LimitFlux, count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::LimitFlux, time_),
  PROTOBUF_FIELD_OFFSET(::lm::io::LimitFlux, flux_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::lm::io::FluxesFromStartingLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::FluxesFromStartingLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::FluxesFromStartingLimit, starting_limit_),
  PROTOBUF_FIELD_OFFSET(::lm::io::FluxesFromStartingLimit, limit_fluxes_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::lm::io::LimitFlux)},
  { 13, 20, sizeof(::lm::io::FluxesFromStartingLimit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_LimitFlux_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_FluxesFromStartingLimit_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fLimitFlux_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025lm/io/LimitFlux.proto\022\005lm.io\032\037lm/types"
  "/TrajectoryLimits.proto\"`\n\tLimitFlux\022(\n\005"
  "limit\030\001 \001(\0132\031.lm.types.TrajectoryLimit\022\r"
  "\n\005count\030\002 \001(\004\022\014\n\004time\030\003 \001(\001\022\014\n\004flux\030\004 \001("
  "\001\"t\n\027FluxesFromStartingLimit\0221\n\016starting"
  "_limit\030\001 \001(\0132\031.lm.types.TrajectoryLimit\022"
  "&\n\014limit_fluxes\030\002 \003(\0132\020.lm.io.LimitFlux"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fLimitFlux_2eproto_deps[1] = {
  &::descriptor_table_lm_2ftypes_2fTrajectoryLimits_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fLimitFlux_2eproto_sccs[2] = {
  &scc_info_FluxesFromStartingLimit_lm_2fio_2fLimitFlux_2eproto.base,
  &scc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fLimitFlux_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fLimitFlux_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fLimitFlux_2eproto, "lm/io/LimitFlux.proto", 279,
  &descriptor_table_lm_2fio_2fLimitFlux_2eproto_once, descriptor_table_lm_2fio_2fLimitFlux_2eproto_sccs, descriptor_table_lm_2fio_2fLimitFlux_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_lm_2fio_2fLimitFlux_2eproto::offsets,
  file_level_metadata_lm_2fio_2fLimitFlux_2eproto, 2, file_level_enum_descriptors_lm_2fio_2fLimitFlux_2eproto, file_level_service_descriptors_lm_2fio_2fLimitFlux_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fLimitFlux_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fLimitFlux_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void LimitFlux::InitAsDefaultInstance() {
  ::lm::io::_LimitFlux_default_instance_._instance.get_mutable()->limit_ = const_cast< ::lm::types::TrajectoryLimit*>(
      ::lm::types::TrajectoryLimit::internal_default_instance());
}
class LimitFlux::_Internal {
 public:
  using HasBits = decltype(std::declval<LimitFlux>()._has_bits_);
  static const ::lm::types::TrajectoryLimit& limit(const LimitFlux* msg);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flux(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::lm::types::TrajectoryLimit&
LimitFlux::_Internal::limit(const LimitFlux* msg) {
  return *msg->limit_;
}
void LimitFlux::clear_limit() {
  if (limit_ != nullptr) limit_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LimitFlux::LimitFlux(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.LimitFlux)
}
LimitFlux::LimitFlux(const LimitFlux& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_limit()) {
    limit_ = new ::lm::types::TrajectoryLimit(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&flux_) -
    reinterpret_cast<char*>(&count_)) + sizeof(flux_));
  // @@protoc_insertion_point(copy_constructor:lm.io.LimitFlux)
}

void LimitFlux::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto.base);
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flux_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(flux_));
}

LimitFlux::~LimitFlux() {
  // @@protoc_insertion_point(destructor:lm.io.LimitFlux)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LimitFlux::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete limit_;
}

void LimitFlux::ArenaDtor(void* object) {
  LimitFlux* _this = reinterpret_cast< LimitFlux* >(object);
  (void)_this;
}
void LimitFlux::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitFlux::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LimitFlux& LimitFlux::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LimitFlux_lm_2fio_2fLimitFlux_2eproto.base);
  return *internal_default_instance();
}


void LimitFlux::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.LimitFlux)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(limit_ != nullptr);
    limit_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flux_) -
        reinterpret_cast<char*>(&count_)) + sizeof(flux_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitFlux::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .lm.types.TrajectoryLimit limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double flux = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_flux(&has_bits);
          flux_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitFlux::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.LimitFlux)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lm.types.TrajectoryLimit limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::limit(this), target, stream);
  }

  // optional uint64 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  // optional double time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_time(), target);
  }

  // optional double flux = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_flux(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.LimitFlux)
  return target;
}

size_t LimitFlux::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.LimitFlux)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .lm.types.TrajectoryLimit limit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *limit_);
    }

    // optional uint64 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count());
    }

    // optional double time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double flux = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LimitFlux::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.LimitFlux)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitFlux* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LimitFlux>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.LimitFlux)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.LimitFlux)
    MergeFrom(*source);
  }
}

void LimitFlux::MergeFrom(const LimitFlux& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.LimitFlux)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_limit()->::lm::types::TrajectoryLimit::MergeFrom(from._internal_limit());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      flux_ = from.flux_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LimitFlux::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.LimitFlux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitFlux::CopyFrom(const LimitFlux& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.LimitFlux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitFlux::IsInitialized() const {
  if (_internal_has_limit()) {
    if (!limit_->IsInitialized()) return false;
  }
  return true;
}

void LimitFlux::InternalSwap(LimitFlux* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LimitFlux, flux_)
      + sizeof(LimitFlux::flux_)
      - PROTOBUF_FIELD_OFFSET(LimitFlux, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitFlux::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FluxesFromStartingLimit::InitAsDefaultInstance() {
  ::lm::io::_FluxesFromStartingLimit_default_instance_._instance.get_mutable()->starting_limit_ = const_cast< ::lm::types::TrajectoryLimit*>(
      ::lm::types::TrajectoryLimit::internal_default_instance());
}
class FluxesFromStartingLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<FluxesFromStartingLimit>()._has_bits_);
  static const ::lm::types::TrajectoryLimit& starting_limit(const FluxesFromStartingLimit* msg);
  static void set_has_starting_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::lm::types::TrajectoryLimit&
FluxesFromStartingLimit::_Internal::starting_limit(const FluxesFromStartingLimit* msg) {
  return *msg->starting_limit_;
}
void FluxesFromStartingLimit::clear_starting_limit() {
  if (starting_limit_ != nullptr) starting_limit_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FluxesFromStartingLimit::FluxesFromStartingLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  limit_fluxes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.FluxesFromStartingLimit)
}
FluxesFromStartingLimit::FluxesFromStartingLimit(const FluxesFromStartingLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      limit_fluxes_(from.limit_fluxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starting_limit()) {
    starting_limit_ = new ::lm::types::TrajectoryLimit(*from.starting_limit_);
  } else {
    starting_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lm.io.FluxesFromStartingLimit)
}

void FluxesFromStartingLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FluxesFromStartingLimit_lm_2fio_2fLimitFlux_2eproto.base);
  starting_limit_ = nullptr;
}

FluxesFromStartingLimit::~FluxesFromStartingLimit() {
  // @@protoc_insertion_point(destructor:lm.io.FluxesFromStartingLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FluxesFromStartingLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete starting_limit_;
}

void FluxesFromStartingLimit::ArenaDtor(void* object) {
  FluxesFromStartingLimit* _this = reinterpret_cast< FluxesFromStartingLimit* >(object);
  (void)_this;
}
void FluxesFromStartingLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FluxesFromStartingLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FluxesFromStartingLimit& FluxesFromStartingLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FluxesFromStartingLimit_lm_2fio_2fLimitFlux_2eproto.base);
  return *internal_default_instance();
}


void FluxesFromStartingLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.FluxesFromStartingLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_fluxes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(starting_limit_ != nullptr);
    starting_limit_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FluxesFromStartingLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .lm.types.TrajectoryLimit starting_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_starting_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.LimitFlux limit_fluxes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limit_fluxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FluxesFromStartingLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.FluxesFromStartingLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lm.types.TrajectoryLimit starting_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::starting_limit(this), target, stream);
  }

  // repeated .lm.io.LimitFlux limit_fluxes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limit_fluxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_limit_fluxes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.FluxesFromStartingLimit)
  return target;
}

size_t FluxesFromStartingLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.FluxesFromStartingLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.io.LimitFlux limit_fluxes = 2;
  total_size += 1UL * this->_internal_limit_fluxes_size();
  for (const auto& msg : this->limit_fluxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .lm.types.TrajectoryLimit starting_limit = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starting_limit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FluxesFromStartingLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.FluxesFromStartingLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const FluxesFromStartingLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FluxesFromStartingLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.FluxesFromStartingLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.FluxesFromStartingLimit)
    MergeFrom(*source);
  }
}

void FluxesFromStartingLimit::MergeFrom(const FluxesFromStartingLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.FluxesFromStartingLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limit_fluxes_.MergeFrom(from.limit_fluxes_);
  if (from._internal_has_starting_limit()) {
    _internal_mutable_starting_limit()->::lm::types::TrajectoryLimit::MergeFrom(from._internal_starting_limit());
  }
}

void FluxesFromStartingLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.FluxesFromStartingLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluxesFromStartingLimit::CopyFrom(const FluxesFromStartingLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.FluxesFromStartingLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluxesFromStartingLimit::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(limit_fluxes_)) return false;
  if (_internal_has_starting_limit()) {
    if (!starting_limit_->IsInitialized()) return false;
  }
  return true;
}

void FluxesFromStartingLimit::InternalSwap(FluxesFromStartingLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  limit_fluxes_.InternalSwap(&other->limit_fluxes_);
  swap(starting_limit_, other->starting_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FluxesFromStartingLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::LimitFlux* Arena::CreateMaybeMessage< ::lm::io::LimitFlux >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::LimitFlux >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::io::FluxesFromStartingLimit* Arena::CreateMaybeMessage< ::lm::io::FluxesFromStartingLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::FluxesFromStartingLimit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
