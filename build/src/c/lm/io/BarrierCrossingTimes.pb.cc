// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/BarrierCrossingTimes.proto

#include "lm/io/BarrierCrossingTimes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_robertslab_2fpbuf_2fNDArray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto;
namespace lm {
namespace io {
class BarrierCrossingTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarrierCrossingTimes> _instance;
} _BarrierCrossingTimes_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_BarrierCrossingTimes_default_instance_;
    new (ptr) ::lm::io::BarrierCrossingTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::BarrierCrossingTimes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto}, {
      &scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fBarrierCrossingTimes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fBarrierCrossingTimes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fBarrierCrossingTimes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fBarrierCrossingTimes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::BarrierCrossingTimes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::BarrierCrossingTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::BarrierCrossingTimes, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::BarrierCrossingTimes, barrier_index_),
  PROTOBUF_FIELD_OFFSET(::lm::io::BarrierCrossingTimes, counts_),
  PROTOBUF_FIELD_OFFSET(::lm::io::BarrierCrossingTimes, times_),
  PROTOBUF_FIELD_OFFSET(::lm::io::BarrierCrossingTimes, total_steps_),
  3,
  4,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::lm::io::BarrierCrossingTimes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_BarrierCrossingTimes_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fBarrierCrossingTimes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n lm/io/BarrierCrossingTimes.proto\022\005lm.i"
  "o\032\035robertslab/pbuf/NDArray.proto\"\306\001\n\024Bar"
  "rierCrossingTimes\022\025\n\rtrajectory_id\030\001 \002(\004"
  "\022\025\n\rbarrier_index\030\002 \002(\r\022(\n\006counts\030\003 \002(\0132"
  "\030.robertslab.pbuf.NDArray\022\'\n\005times\030\004 \002(\013"
  "2\030.robertslab.pbuf.NDArray\022-\n\013total_step"
  "s\030\005 \002(\0132\030.robertslab.pbuf.NDArray"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto_deps[1] = {
  &::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto_sccs[1] = {
  &scc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fBarrierCrossingTimes_2eproto, "lm/io/BarrierCrossingTimes.proto", 273,
  &descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto_once, descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto_sccs, descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_lm_2fio_2fBarrierCrossingTimes_2eproto::offsets,
  file_level_metadata_lm_2fio_2fBarrierCrossingTimes_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fBarrierCrossingTimes_2eproto, file_level_service_descriptors_lm_2fio_2fBarrierCrossingTimes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fBarrierCrossingTimes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fBarrierCrossingTimes_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void BarrierCrossingTimes::InitAsDefaultInstance() {
  ::lm::io::_BarrierCrossingTimes_default_instance_._instance.get_mutable()->counts_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::_BarrierCrossingTimes_default_instance_._instance.get_mutable()->times_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::_BarrierCrossingTimes_default_instance_._instance.get_mutable()->total_steps_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
}
class BarrierCrossingTimes::_Internal {
 public:
  using HasBits = decltype(std::declval<BarrierCrossingTimes>()._has_bits_);
  static void set_has_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_barrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::robertslab::pbuf::NDArray& counts(const BarrierCrossingTimes* msg);
  static void set_has_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robertslab::pbuf::NDArray& times(const BarrierCrossingTimes* msg);
  static void set_has_times(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::robertslab::pbuf::NDArray& total_steps(const BarrierCrossingTimes* msg);
  static void set_has_total_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::robertslab::pbuf::NDArray&
BarrierCrossingTimes::_Internal::counts(const BarrierCrossingTimes* msg) {
  return *msg->counts_;
}
const ::robertslab::pbuf::NDArray&
BarrierCrossingTimes::_Internal::times(const BarrierCrossingTimes* msg) {
  return *msg->times_;
}
const ::robertslab::pbuf::NDArray&
BarrierCrossingTimes::_Internal::total_steps(const BarrierCrossingTimes* msg) {
  return *msg->total_steps_;
}
void BarrierCrossingTimes::clear_counts() {
  if (counts_ != nullptr) counts_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BarrierCrossingTimes::clear_times() {
  if (times_ != nullptr) times_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void BarrierCrossingTimes::clear_total_steps() {
  if (total_steps_ != nullptr) total_steps_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BarrierCrossingTimes::BarrierCrossingTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.BarrierCrossingTimes)
}
BarrierCrossingTimes::BarrierCrossingTimes(const BarrierCrossingTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_counts()) {
    counts_ = new ::robertslab::pbuf::NDArray(*from.counts_);
  } else {
    counts_ = nullptr;
  }
  if (from._internal_has_times()) {
    times_ = new ::robertslab::pbuf::NDArray(*from.times_);
  } else {
    times_ = nullptr;
  }
  if (from._internal_has_total_steps()) {
    total_steps_ = new ::robertslab::pbuf::NDArray(*from.total_steps_);
  } else {
    total_steps_ = nullptr;
  }
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&barrier_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(barrier_index_));
  // @@protoc_insertion_point(copy_constructor:lm.io.BarrierCrossingTimes)
}

void BarrierCrossingTimes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto.base);
  ::memset(&counts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barrier_index_) -
      reinterpret_cast<char*>(&counts_)) + sizeof(barrier_index_));
}

BarrierCrossingTimes::~BarrierCrossingTimes() {
  // @@protoc_insertion_point(destructor:lm.io.BarrierCrossingTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BarrierCrossingTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete counts_;
  if (this != internal_default_instance()) delete times_;
  if (this != internal_default_instance()) delete total_steps_;
}

void BarrierCrossingTimes::ArenaDtor(void* object) {
  BarrierCrossingTimes* _this = reinterpret_cast< BarrierCrossingTimes* >(object);
  (void)_this;
}
void BarrierCrossingTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarrierCrossingTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarrierCrossingTimes& BarrierCrossingTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarrierCrossingTimes_lm_2fio_2fBarrierCrossingTimes_2eproto.base);
  return *internal_default_instance();
}


void BarrierCrossingTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.BarrierCrossingTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(counts_ != nullptr);
      counts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(times_ != nullptr);
      times_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(total_steps_ != nullptr);
      total_steps_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&trajectory_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&barrier_index_) -
        reinterpret_cast<char*>(&trajectory_id_)) + sizeof(barrier_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BarrierCrossingTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trajectory_id(&has_bits);
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 barrier_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_barrier_index(&has_bits);
          barrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray times = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_times(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray total_steps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_steps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarrierCrossingTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.BarrierCrossingTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trajectory_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trajectory_id(), target);
  }

  // required uint32 barrier_index = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_barrier_index(), target);
  }

  // required .robertslab.pbuf.NDArray counts = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::counts(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray times = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::times(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray total_steps = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::total_steps(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.BarrierCrossingTimes)
  return target;
}

size_t BarrierCrossingTimes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.io.BarrierCrossingTimes)
  size_t total_size = 0;

  if (_internal_has_counts()) {
    // required .robertslab.pbuf.NDArray counts = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counts_);
  }

  if (_internal_has_times()) {
    // required .robertslab.pbuf.NDArray times = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *times_);
  }

  if (_internal_has_total_steps()) {
    // required .robertslab.pbuf.NDArray total_steps = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_steps_);
  }

  if (_internal_has_trajectory_id()) {
    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());
  }

  if (_internal_has_barrier_index()) {
    // required uint32 barrier_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_barrier_index());
  }

  return total_size;
}
size_t BarrierCrossingTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.BarrierCrossingTimes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .robertslab.pbuf.NDArray counts = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counts_);

    // required .robertslab.pbuf.NDArray times = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *times_);

    // required .robertslab.pbuf.NDArray total_steps = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_steps_);

    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());

    // required uint32 barrier_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_barrier_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrierCrossingTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.BarrierCrossingTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const BarrierCrossingTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarrierCrossingTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.BarrierCrossingTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.BarrierCrossingTimes)
    MergeFrom(*source);
  }
}

void BarrierCrossingTimes::MergeFrom(const BarrierCrossingTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.BarrierCrossingTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_counts()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_counts());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_times()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_times());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_total_steps()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_total_steps());
    }
    if (cached_has_bits & 0x00000008u) {
      trajectory_id_ = from.trajectory_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      barrier_index_ = from.barrier_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BarrierCrossingTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.BarrierCrossingTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrierCrossingTimes::CopyFrom(const BarrierCrossingTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.BarrierCrossingTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierCrossingTimes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_counts()) {
    if (!counts_->IsInitialized()) return false;
  }
  if (_internal_has_times()) {
    if (!times_->IsInitialized()) return false;
  }
  if (_internal_has_total_steps()) {
    if (!total_steps_->IsInitialized()) return false;
  }
  return true;
}

void BarrierCrossingTimes::InternalSwap(BarrierCrossingTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BarrierCrossingTimes, barrier_index_)
      + sizeof(BarrierCrossingTimes::barrier_index_)
      - PROTOBUF_FIELD_OFFSET(BarrierCrossingTimes, counts_)>(
          reinterpret_cast<char*>(&counts_),
          reinterpret_cast<char*>(&other->counts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BarrierCrossingTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::BarrierCrossingTimes* Arena::CreateMaybeMessage< ::lm::io::BarrierCrossingTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::BarrierCrossingTimes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
