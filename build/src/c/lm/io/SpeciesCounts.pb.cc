// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/SpeciesCounts.proto

#include "lm/io/SpeciesCounts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace lm {
namespace io {
class SpeciesCountsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeciesCounts> _instance;
} _SpeciesCounts_default_instance_;
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_SpeciesCounts_lm_2fio_2fSpeciesCounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::_SpeciesCounts_default_instance_;
    new (ptr) ::lm::io::SpeciesCounts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::SpeciesCounts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeciesCounts_lm_2fio_2fSpeciesCounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeciesCounts_lm_2fio_2fSpeciesCounts_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fSpeciesCounts_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fSpeciesCounts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fSpeciesCounts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fSpeciesCounts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, number_species_),
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, number_entries_),
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, species_count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, species_count_previous_),
  PROTOBUF_FIELD_OFFSET(::lm::io::SpeciesCounts, time_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::lm::io::SpeciesCounts)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::_SpeciesCounts_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fSpeciesCounts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031lm/io/SpeciesCounts.proto\022\005lm.io\"\247\001\n\rS"
  "peciesCounts\022\025\n\rtrajectory_id\030\001 \002(\004\022\026\n\016n"
  "umber_species\030\002 \002(\005\022\026\n\016number_entries\030\003 "
  "\002(\005\022\031\n\rspecies_count\030\004 \003(\005B\002\020\001\022\"\n\026specie"
  "s_count_previous\030\006 \003(\005B\002\020\001\022\020\n\004time\030\005 \003(\001"
  "B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fSpeciesCounts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fSpeciesCounts_2eproto_sccs[1] = {
  &scc_info_SpeciesCounts_lm_2fio_2fSpeciesCounts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fSpeciesCounts_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fSpeciesCounts_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fSpeciesCounts_2eproto, "lm/io/SpeciesCounts.proto", 204,
  &descriptor_table_lm_2fio_2fSpeciesCounts_2eproto_once, descriptor_table_lm_2fio_2fSpeciesCounts_2eproto_sccs, descriptor_table_lm_2fio_2fSpeciesCounts_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_lm_2fio_2fSpeciesCounts_2eproto::offsets,
  file_level_metadata_lm_2fio_2fSpeciesCounts_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fSpeciesCounts_2eproto, file_level_service_descriptors_lm_2fio_2fSpeciesCounts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fSpeciesCounts_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fSpeciesCounts_2eproto)), true);
namespace lm {
namespace io {

// ===================================================================

void SpeciesCounts::InitAsDefaultInstance() {
}
class SpeciesCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeciesCounts>()._has_bits_);
  static void set_has_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_species(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SpeciesCounts::SpeciesCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  species_count_(arena),
  time_(arena),
  species_count_previous_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.SpeciesCounts)
}
SpeciesCounts::SpeciesCounts(const SpeciesCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      species_count_(from.species_count_),
      time_(from.time_),
      species_count_previous_(from.species_count_previous_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_entries_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(number_entries_));
  // @@protoc_insertion_point(copy_constructor:lm.io.SpeciesCounts)
}

void SpeciesCounts::SharedCtor() {
  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_entries_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(number_entries_));
}

SpeciesCounts::~SpeciesCounts() {
  // @@protoc_insertion_point(destructor:lm.io.SpeciesCounts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeciesCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeciesCounts::ArenaDtor(void* object) {
  SpeciesCounts* _this = reinterpret_cast< SpeciesCounts* >(object);
  (void)_this;
}
void SpeciesCounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeciesCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeciesCounts& SpeciesCounts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeciesCounts_lm_2fio_2fSpeciesCounts_2eproto.base);
  return *internal_default_instance();
}


void SpeciesCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.SpeciesCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_count_.Clear();
  time_.Clear();
  species_count_previous_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&trajectory_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_entries_) -
        reinterpret_cast<char*>(&trajectory_id_)) + sizeof(number_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeciesCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trajectory_id(&has_bits);
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 number_species = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_species(&has_bits);
          number_species_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 number_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_entries(&has_bits);
          number_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 species_count = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_species_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_species_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double time = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 species_count_previous = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_species_count_previous(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_species_count_previous(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeciesCounts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.SpeciesCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trajectory_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trajectory_id(), target);
  }

  // required int32 number_species = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number_species(), target);
  }

  // required int32 number_entries = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_number_entries(), target);
  }

  // repeated int32 species_count = 4 [packed = true];
  {
    int byte_size = _species_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_species_count(), byte_size, target);
    }
  }

  // repeated double time = 5 [packed = true];
  if (this->_internal_time_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_time(), target);
  }

  // repeated int32 species_count_previous = 6 [packed = true];
  {
    int byte_size = _species_count_previous_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_species_count_previous(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.SpeciesCounts)
  return target;
}

size_t SpeciesCounts::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.io.SpeciesCounts)
  size_t total_size = 0;

  if (_internal_has_trajectory_id()) {
    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());
  }

  if (_internal_has_number_species()) {
    // required int32 number_species = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_species());
  }

  if (_internal_has_number_entries()) {
    // required int32 number_entries = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_entries());
  }

  return total_size;
}
size_t SpeciesCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.SpeciesCounts)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 trajectory_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trajectory_id());

    // required int32 number_species = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_species());

    // required int32 number_entries = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_entries());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 species_count = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->species_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _species_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double time = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_time_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 species_count_previous = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->species_count_previous_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _species_count_previous_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeciesCounts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.SpeciesCounts)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeciesCounts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeciesCounts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.SpeciesCounts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.SpeciesCounts)
    MergeFrom(*source);
  }
}

void SpeciesCounts::MergeFrom(const SpeciesCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.SpeciesCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  species_count_.MergeFrom(from.species_count_);
  time_.MergeFrom(from.time_);
  species_count_previous_.MergeFrom(from.species_count_previous_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      trajectory_id_ = from.trajectory_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      number_species_ = from.number_species_;
    }
    if (cached_has_bits & 0x00000004u) {
      number_entries_ = from.number_entries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeciesCounts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.SpeciesCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeciesCounts::CopyFrom(const SpeciesCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.SpeciesCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeciesCounts::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpeciesCounts::InternalSwap(SpeciesCounts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  species_count_.InternalSwap(&other->species_count_);
  time_.InternalSwap(&other->time_);
  species_count_previous_.InternalSwap(&other->species_count_previous_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeciesCounts, number_entries_)
      + sizeof(SpeciesCounts::number_entries_)
      - PROTOBUF_FIELD_OFFSET(SpeciesCounts, trajectory_id_)>(
          reinterpret_cast<char*>(&trajectory_id_),
          reinterpret_cast<char*>(&other->trajectory_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeciesCounts::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::SpeciesCounts* Arena::CreateMaybeMessage< ::lm::io::SpeciesCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::SpeciesCounts >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
