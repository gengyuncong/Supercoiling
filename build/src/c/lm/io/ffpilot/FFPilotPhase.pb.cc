// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/ffpilot/FFPilotPhase.proto

#include "lm/io/ffpilot/FFPilotPhase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FFPilotPhaseLimit_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
namespace lm {
namespace io {
namespace ffpilot {
class FFPilotPhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FFPilotPhase> _instance;
} _FFPilotPhase_default_instance_;
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_FFPilotPhase_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::ffpilot::_FFPilotPhase_default_instance_;
    new (ptr) ::lm::io::ffpilot::FFPilotPhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::ffpilot::FFPilotPhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FFPilotPhase_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FFPilotPhase_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto}, {
      &scc_info_FFPilotPhaseLimit_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto.base,
      &scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, phase_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, tile_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, basin_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, tiling_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, replicate_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, first_trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, last_trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, trajectory_duplication_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, trajectory_generation_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, simultaneous_trajectories_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, ffpilot_phase_limit_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhase, start_points_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::lm::io::ffpilot::FFPilotPhase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::ffpilot::_FFPilotPhase_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n lm/io/ffpilot/FFPilotPhase.proto\022\rlm.i"
  "o.ffpilot\032(lm/input/ffpilot/FFPilotPhase"
  "Limit.proto\032&lm/io/ffpilot/FFPilotPhaseO"
  "utput.proto\"\334\004\n\014FFPilotPhase\022\020\n\010phase_id"
  "\030\001 \001(\003\022\017\n\007tile_id\030\002 \001(\003\022\020\n\010basin_id\030\003 \001("
  "\003\022\021\n\ttiling_id\030\004 \001(\004\022\027\n\014replicate_id\030\005 \001"
  "(\004:\0010\022\033\n\023first_trajectory_id\030\013 \001(\004\022\032\n\022la"
  "st_trajectory_id\030\014 \001(\004\022W\n\026trajectory_dup"
  "lication\030\r \001(\01621.lm.io.ffpilot.FFPilotPh"
  "ase.TrajectoryDuplication:\004NONE\022U\n\025traje"
  "ctory_generation\030\016 \001(\01620.lm.io.ffpilot.F"
  "FPilotPhase.TrajectoryGeneration:\004LAZY\022!"
  "\n\031simultaneous_trajectories\030\017 \001(\004\022@\n\023ffp"
  "ilot_phase_limit\030e \001(\0132#.lm.input.ffpilo"
  "t.FFPilotPhaseLimit\022-\n\014start_points\030g \003("
  "\0132\027.lm.io.ffpilot.EndPoint\"A\n\025Trajectory"
  "Duplication\022\010\n\004NONE\020\000\022\n\n\006CYCLIC\020\001\022\022\n\016UNI"
  "FORM_RANDOM\020\002\"+\n\024TrajectoryGeneration\022\t\n"
  "\005EAGER\020\000\022\010\n\004LAZY\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto_deps[2] = {
  &::descriptor_table_lm_2finput_2fffpilot_2fFFPilotPhaseLimit_2eproto,
  &::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto_sccs[1] = {
  &scc_info_FFPilotPhase_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto, "lm/io/ffpilot/FFPilotPhase.proto", 738,
  &descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto_once, descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto_sccs, descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto::offsets,
  file_level_metadata_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto, file_level_service_descriptors_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto)), true);
namespace lm {
namespace io {
namespace ffpilot {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotPhase_TrajectoryDuplication_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto);
  return file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto[0];
}
bool FFPilotPhase_TrajectoryDuplication_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FFPilotPhase_TrajectoryDuplication FFPilotPhase::NONE;
constexpr FFPilotPhase_TrajectoryDuplication FFPilotPhase::CYCLIC;
constexpr FFPilotPhase_TrajectoryDuplication FFPilotPhase::UNIFORM_RANDOM;
constexpr FFPilotPhase_TrajectoryDuplication FFPilotPhase::TrajectoryDuplication_MIN;
constexpr FFPilotPhase_TrajectoryDuplication FFPilotPhase::TrajectoryDuplication_MAX;
constexpr int FFPilotPhase::TrajectoryDuplication_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotPhase_TrajectoryGeneration_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto);
  return file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto[1];
}
bool FFPilotPhase_TrajectoryGeneration_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FFPilotPhase_TrajectoryGeneration FFPilotPhase::EAGER;
constexpr FFPilotPhase_TrajectoryGeneration FFPilotPhase::LAZY;
constexpr FFPilotPhase_TrajectoryGeneration FFPilotPhase::TrajectoryGeneration_MIN;
constexpr FFPilotPhase_TrajectoryGeneration FFPilotPhase::TrajectoryGeneration_MAX;
constexpr int FFPilotPhase::TrajectoryGeneration_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FFPilotPhase::InitAsDefaultInstance() {
  ::lm::io::ffpilot::_FFPilotPhase_default_instance_._instance.get_mutable()->ffpilot_phase_limit_ = const_cast< ::lm::input::ffpilot::FFPilotPhaseLimit*>(
      ::lm::input::ffpilot::FFPilotPhaseLimit::internal_default_instance());
}
class FFPilotPhase::_Internal {
 public:
  using HasBits = decltype(std::declval<FFPilotPhase>()._has_bits_);
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tile_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_basin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tiling_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_replicate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_first_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trajectory_duplication(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trajectory_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_simultaneous_trajectories(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::lm::input::ffpilot::FFPilotPhaseLimit& ffpilot_phase_limit(const FFPilotPhase* msg);
  static void set_has_ffpilot_phase_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::lm::input::ffpilot::FFPilotPhaseLimit&
FFPilotPhase::_Internal::ffpilot_phase_limit(const FFPilotPhase* msg) {
  return *msg->ffpilot_phase_limit_;
}
void FFPilotPhase::clear_ffpilot_phase_limit() {
  if (ffpilot_phase_limit_ != nullptr) ffpilot_phase_limit_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FFPilotPhase::clear_start_points() {
  start_points_.Clear();
}
FFPilotPhase::FFPilotPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  start_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.ffpilot.FFPilotPhase)
}
FFPilotPhase::FFPilotPhase(const FFPilotPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      start_points_(from.start_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ffpilot_phase_limit()) {
    ffpilot_phase_limit_ = new ::lm::input::ffpilot::FFPilotPhaseLimit(*from.ffpilot_phase_limit_);
  } else {
    ffpilot_phase_limit_ = nullptr;
  }
  ::memcpy(&phase_id_, &from.phase_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_generation_) -
    reinterpret_cast<char*>(&phase_id_)) + sizeof(trajectory_generation_));
  // @@protoc_insertion_point(copy_constructor:lm.io.ffpilot.FFPilotPhase)
}

void FFPilotPhase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FFPilotPhase_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto.base);
  ::memset(&ffpilot_phase_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simultaneous_trajectories_) -
      reinterpret_cast<char*>(&ffpilot_phase_limit_)) + sizeof(simultaneous_trajectories_));
  trajectory_generation_ = 1;
}

FFPilotPhase::~FFPilotPhase() {
  // @@protoc_insertion_point(destructor:lm.io.ffpilot.FFPilotPhase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FFPilotPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ffpilot_phase_limit_;
}

void FFPilotPhase::ArenaDtor(void* object) {
  FFPilotPhase* _this = reinterpret_cast< FFPilotPhase* >(object);
  (void)_this;
}
void FFPilotPhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FFPilotPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FFPilotPhase& FFPilotPhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FFPilotPhase_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto.base);
  return *internal_default_instance();
}


void FFPilotPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.ffpilot.FFPilotPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ffpilot_phase_limit_ != nullptr);
    ffpilot_phase_limit_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&phase_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_trajectory_id_) -
        reinterpret_cast<char*>(&phase_id_)) + sizeof(last_trajectory_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&trajectory_duplication_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&simultaneous_trajectories_) -
        reinterpret_cast<char*>(&trajectory_duplication_)) + sizeof(simultaneous_trajectories_));
    trajectory_generation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FFPilotPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 phase_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_phase_id(&has_bits);
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 tile_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tile_id(&has_bits);
          tile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 basin_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_basin_id(&has_bits);
          basin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tiling_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tiling_id(&has_bits);
          tiling_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 replicate_id = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_replicate_id(&has_bits);
          replicate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 first_trajectory_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_first_trajectory_id(&has_bits);
          first_trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_trajectory_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_last_trajectory_id(&has_bits);
          last_trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryDuplication trajectory_duplication = 13 [default = NONE];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication_IsValid(val))) {
            _internal_set_trajectory_duplication(static_cast<::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryGeneration trajectory_generation = 14 [default = LAZY];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration_IsValid(val))) {
            _internal_set_trajectory_generation(static_cast<::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 simultaneous_trajectories = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_simultaneous_trajectories(&has_bits);
          simultaneous_trajectories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lm.input.ffpilot.FFPilotPhaseLimit ffpilot_phase_limit = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ffpilot_phase_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.ffpilot.EndPoint start_points = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_start_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<826>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FFPilotPhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.ffpilot.FFPilotPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 phase_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phase_id(), target);
  }

  // optional int64 tile_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tile_id(), target);
  }

  // optional int64 basin_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_basin_id(), target);
  }

  // optional uint64 tiling_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tiling_id(), target);
  }

  // optional uint64 replicate_id = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_replicate_id(), target);
  }

  // optional uint64 first_trajectory_id = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_first_trajectory_id(), target);
  }

  // optional uint64 last_trajectory_id = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_last_trajectory_id(), target);
  }

  // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryDuplication trajectory_duplication = 13 [default = NONE];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_trajectory_duplication(), target);
  }

  // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryGeneration trajectory_generation = 14 [default = LAZY];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_trajectory_generation(), target);
  }

  // optional uint64 simultaneous_trajectories = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_simultaneous_trajectories(), target);
  }

  // optional .lm.input.ffpilot.FFPilotPhaseLimit ffpilot_phase_limit = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::ffpilot_phase_limit(this), target, stream);
  }

  // repeated .lm.io.ffpilot.EndPoint start_points = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_start_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, this->_internal_start_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.ffpilot.FFPilotPhase)
  return target;
}

size_t FFPilotPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.ffpilot.FFPilotPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.io.ffpilot.EndPoint start_points = 103;
  total_size += 2UL * this->_internal_start_points_size();
  for (const auto& msg : this->start_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .lm.input.ffpilot.FFPilotPhaseLimit ffpilot_phase_limit = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ffpilot_phase_limit_);
    }

    // optional int64 phase_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_phase_id());
    }

    // optional int64 tile_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tile_id());
    }

    // optional int64 basin_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_basin_id());
    }

    // optional uint64 tiling_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tiling_id());
    }

    // optional uint64 replicate_id = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_replicate_id());
    }

    // optional uint64 first_trajectory_id = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_trajectory_id());
    }

    // optional uint64 last_trajectory_id = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_trajectory_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryDuplication trajectory_duplication = 13 [default = NONE];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trajectory_duplication());
    }

    // optional uint64 simultaneous_trajectories = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_simultaneous_trajectories());
    }

    // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryGeneration trajectory_generation = 14 [default = LAZY];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trajectory_generation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FFPilotPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.ffpilot.FFPilotPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const FFPilotPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FFPilotPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.ffpilot.FFPilotPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.ffpilot.FFPilotPhase)
    MergeFrom(*source);
  }
}

void FFPilotPhase::MergeFrom(const FFPilotPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.ffpilot.FFPilotPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_points_.MergeFrom(from.start_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ffpilot_phase_limit()->::lm::input::ffpilot::FFPilotPhaseLimit::MergeFrom(from._internal_ffpilot_phase_limit());
    }
    if (cached_has_bits & 0x00000002u) {
      phase_id_ = from.phase_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tile_id_ = from.tile_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      basin_id_ = from.basin_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      tiling_id_ = from.tiling_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      replicate_id_ = from.replicate_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      first_trajectory_id_ = from.first_trajectory_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_trajectory_id_ = from.last_trajectory_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      trajectory_duplication_ = from.trajectory_duplication_;
    }
    if (cached_has_bits & 0x00000200u) {
      simultaneous_trajectories_ = from.simultaneous_trajectories_;
    }
    if (cached_has_bits & 0x00000400u) {
      trajectory_generation_ = from.trajectory_generation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FFPilotPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.ffpilot.FFPilotPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FFPilotPhase::CopyFrom(const FFPilotPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.ffpilot.FFPilotPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FFPilotPhase::IsInitialized() const {
  return true;
}

void FFPilotPhase::InternalSwap(FFPilotPhase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_points_.InternalSwap(&other->start_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FFPilotPhase, simultaneous_trajectories_)
      + sizeof(FFPilotPhase::simultaneous_trajectories_)
      - PROTOBUF_FIELD_OFFSET(FFPilotPhase, ffpilot_phase_limit_)>(
          reinterpret_cast<char*>(&ffpilot_phase_limit_),
          reinterpret_cast<char*>(&other->ffpilot_phase_limit_));
  swap(trajectory_generation_, other->trajectory_generation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FFPilotPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::ffpilot::FFPilotPhase* Arena::CreateMaybeMessage< ::lm::io::ffpilot::FFPilotPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::ffpilot::FFPilotPhase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
