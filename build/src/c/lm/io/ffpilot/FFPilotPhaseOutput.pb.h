// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/ffpilot/FFPilotPhaseOutput.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
namespace lm {
namespace io {
namespace ffpilot {
class EndPoint;
class EndPointDefaultTypeInternal;
extern EndPointDefaultTypeInternal _EndPoint_default_instance_;
class FFPilotPhaseOutput;
class FFPilotPhaseOutputDefaultTypeInternal;
extern FFPilotPhaseOutputDefaultTypeInternal _FFPilotPhaseOutput_default_instance_;
class FFPilotPhaseOutputList;
class FFPilotPhaseOutputListDefaultTypeInternal;
extern FFPilotPhaseOutputListDefaultTypeInternal _FFPilotPhaseOutputList_default_instance_;
class StartPoint;
class StartPointDefaultTypeInternal;
extern StartPointDefaultTypeInternal _StartPoint_default_instance_;
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::ffpilot::EndPoint* Arena::CreateMaybeMessage<::lm::io::ffpilot::EndPoint>(Arena*);
template<> ::lm::io::ffpilot::FFPilotPhaseOutput* Arena::CreateMaybeMessage<::lm::io::ffpilot::FFPilotPhaseOutput>(Arena*);
template<> ::lm::io::ffpilot::FFPilotPhaseOutputList* Arena::CreateMaybeMessage<::lm::io::ffpilot::FFPilotPhaseOutputList>(Arena*);
template<> ::lm::io::ffpilot::StartPoint* Arena::CreateMaybeMessage<::lm::io::ffpilot::StartPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {
namespace ffpilot {

// ===================================================================

class FFPilotPhaseOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.ffpilot.FFPilotPhaseOutput) */ {
 public:
  inline FFPilotPhaseOutput() : FFPilotPhaseOutput(nullptr) {}
  virtual ~FFPilotPhaseOutput();

  FFPilotPhaseOutput(const FFPilotPhaseOutput& from);
  FFPilotPhaseOutput(FFPilotPhaseOutput&& from) noexcept
    : FFPilotPhaseOutput() {
    *this = ::std::move(from);
  }

  inline FFPilotPhaseOutput& operator=(const FFPilotPhaseOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline FFPilotPhaseOutput& operator=(FFPilotPhaseOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FFPilotPhaseOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FFPilotPhaseOutput* internal_default_instance() {
    return reinterpret_cast<const FFPilotPhaseOutput*>(
               &_FFPilotPhaseOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FFPilotPhaseOutput& a, FFPilotPhaseOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(FFPilotPhaseOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FFPilotPhaseOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FFPilotPhaseOutput* New() const final {
    return CreateMaybeMessage<FFPilotPhaseOutput>(nullptr);
  }

  FFPilotPhaseOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FFPilotPhaseOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FFPilotPhaseOutput& from);
  void MergeFrom(const FFPilotPhaseOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FFPilotPhaseOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.ffpilot.FFPilotPhaseOutput";
  }
  protected:
  explicit FFPilotPhaseOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto);
    return ::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPointsFieldNumber = 11,
    kSuccessfulTrajectoryEndPointsFieldNumber = 101,
    kPhaseIdFieldNumber = 1,
    kBasinIdFieldNumber = 2,
    kTilingIdFieldNumber = 3,
    kFirstTrajectoryIdFieldNumber = 4,
    kFinalTrajectoryIdFieldNumber = 5,
    kSuccessfulTrajectoriesLaunchedCountFieldNumber = 21,
    kSuccessfulTrajectoriesLaunchedTotalTimeFieldNumber = 22,
    kFailedTrajectoriesLaunchedCountFieldNumber = 23,
    kFailedTrajectoriesLaunchedTotalTimeFieldNumber = 24,
    kVarianceFieldNumber = 201,
  };
  // repeated .lm.io.ffpilot.StartPoint start_points = 11;
  int start_points_size() const;
  private:
  int _internal_start_points_size() const;
  public:
  void clear_start_points();
  ::lm::io::ffpilot::StartPoint* mutable_start_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::StartPoint >*
      mutable_start_points();
  private:
  const ::lm::io::ffpilot::StartPoint& _internal_start_points(int index) const;
  ::lm::io::ffpilot::StartPoint* _internal_add_start_points();
  public:
  const ::lm::io::ffpilot::StartPoint& start_points(int index) const;
  ::lm::io::ffpilot::StartPoint* add_start_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::StartPoint >&
      start_points() const;

  // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 101;
  int successful_trajectory_end_points_size() const;
  private:
  int _internal_successful_trajectory_end_points_size() const;
  public:
  void clear_successful_trajectory_end_points();
  ::lm::io::ffpilot::EndPoint* mutable_successful_trajectory_end_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
      mutable_successful_trajectory_end_points();
  private:
  const ::lm::io::ffpilot::EndPoint& _internal_successful_trajectory_end_points(int index) const;
  ::lm::io::ffpilot::EndPoint* _internal_add_successful_trajectory_end_points();
  public:
  const ::lm::io::ffpilot::EndPoint& successful_trajectory_end_points(int index) const;
  ::lm::io::ffpilot::EndPoint* add_successful_trajectory_end_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
      successful_trajectory_end_points() const;

  // optional int64 phase_id = 1;
  bool has_phase_id() const;
  private:
  bool _internal_has_phase_id() const;
  public:
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int64 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 basin_id = 2;
  bool has_basin_id() const;
  private:
  bool _internal_has_basin_id() const;
  public:
  void clear_basin_id();
  ::PROTOBUF_NAMESPACE_ID::int64 basin_id() const;
  void set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basin_id() const;
  void _internal_set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 tiling_id = 3;
  bool has_tiling_id() const;
  private:
  bool _internal_has_tiling_id() const;
  public:
  void clear_tiling_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tiling_id() const;
  void set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tiling_id() const;
  void _internal_set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 first_trajectory_id = 4;
  bool has_first_trajectory_id() const;
  private:
  bool _internal_has_first_trajectory_id() const;
  public:
  void clear_first_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_trajectory_id() const;
  void set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_trajectory_id() const;
  void _internal_set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 final_trajectory_id = 5;
  bool has_final_trajectory_id() const;
  private:
  bool _internal_has_final_trajectory_id() const;
  public:
  void clear_final_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 final_trajectory_id() const;
  void set_final_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_final_trajectory_id() const;
  void _internal_set_final_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 successful_trajectories_launched_count = 21 [default = 0];
  bool has_successful_trajectories_launched_count() const;
  private:
  bool _internal_has_successful_trajectories_launched_count() const;
  public:
  void clear_successful_trajectories_launched_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 successful_trajectories_launched_count() const;
  void set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_successful_trajectories_launched_count() const;
  void _internal_set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double successful_trajectories_launched_total_time = 22 [default = 0];
  bool has_successful_trajectories_launched_total_time() const;
  private:
  bool _internal_has_successful_trajectories_launched_total_time() const;
  public:
  void clear_successful_trajectories_launched_total_time();
  double successful_trajectories_launched_total_time() const;
  void set_successful_trajectories_launched_total_time(double value);
  private:
  double _internal_successful_trajectories_launched_total_time() const;
  void _internal_set_successful_trajectories_launched_total_time(double value);
  public:

  // optional uint64 failed_trajectories_launched_count = 23 [default = 0];
  bool has_failed_trajectories_launched_count() const;
  private:
  bool _internal_has_failed_trajectories_launched_count() const;
  public:
  void clear_failed_trajectories_launched_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 failed_trajectories_launched_count() const;
  void set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_failed_trajectories_launched_count() const;
  void _internal_set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double failed_trajectories_launched_total_time = 24 [default = 0];
  bool has_failed_trajectories_launched_total_time() const;
  private:
  bool _internal_has_failed_trajectories_launched_total_time() const;
  public:
  void clear_failed_trajectories_launched_total_time();
  double failed_trajectories_launched_total_time() const;
  void set_failed_trajectories_launched_total_time(double value);
  private:
  double _internal_failed_trajectories_launched_total_time() const;
  void _internal_set_failed_trajectories_launched_total_time(double value);
  public:

  // optional double variance = 201;
  bool has_variance() const;
  private:
  bool _internal_has_variance() const;
  public:
  void clear_variance();
  double variance() const;
  void set_variance(double value);
  private:
  double _internal_variance() const;
  void _internal_set_variance(double value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.ffpilot.FFPilotPhaseOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::StartPoint > start_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint > successful_trajectory_end_points_;
  ::PROTOBUF_NAMESPACE_ID::int64 phase_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 basin_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tiling_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_trajectory_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 final_trajectory_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 successful_trajectories_launched_count_;
  double successful_trajectories_launched_total_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 failed_trajectories_launched_count_;
  double failed_trajectories_launched_total_time_;
  double variance_;
  friend struct ::TableStruct_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
};
// -------------------------------------------------------------------

class FFPilotPhaseOutputList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.ffpilot.FFPilotPhaseOutputList) */ {
 public:
  inline FFPilotPhaseOutputList() : FFPilotPhaseOutputList(nullptr) {}
  virtual ~FFPilotPhaseOutputList();

  FFPilotPhaseOutputList(const FFPilotPhaseOutputList& from);
  FFPilotPhaseOutputList(FFPilotPhaseOutputList&& from) noexcept
    : FFPilotPhaseOutputList() {
    *this = ::std::move(from);
  }

  inline FFPilotPhaseOutputList& operator=(const FFPilotPhaseOutputList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FFPilotPhaseOutputList& operator=(FFPilotPhaseOutputList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FFPilotPhaseOutputList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FFPilotPhaseOutputList* internal_default_instance() {
    return reinterpret_cast<const FFPilotPhaseOutputList*>(
               &_FFPilotPhaseOutputList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FFPilotPhaseOutputList& a, FFPilotPhaseOutputList& b) {
    a.Swap(&b);
  }
  inline void Swap(FFPilotPhaseOutputList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FFPilotPhaseOutputList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FFPilotPhaseOutputList* New() const final {
    return CreateMaybeMessage<FFPilotPhaseOutputList>(nullptr);
  }

  FFPilotPhaseOutputList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FFPilotPhaseOutputList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FFPilotPhaseOutputList& from);
  void MergeFrom(const FFPilotPhaseOutputList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FFPilotPhaseOutputList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.ffpilot.FFPilotPhaseOutputList";
  }
  protected:
  explicit FFPilotPhaseOutputList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto);
    return ::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFfpilotPhaseOutputsFieldNumber = 1,
  };
  // repeated .lm.io.ffpilot.FFPilotPhaseOutput ffpilot_phase_outputs = 1;
  int ffpilot_phase_outputs_size() const;
  private:
  int _internal_ffpilot_phase_outputs_size() const;
  public:
  void clear_ffpilot_phase_outputs();
  ::lm::io::ffpilot::FFPilotPhaseOutput* mutable_ffpilot_phase_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::FFPilotPhaseOutput >*
      mutable_ffpilot_phase_outputs();
  private:
  const ::lm::io::ffpilot::FFPilotPhaseOutput& _internal_ffpilot_phase_outputs(int index) const;
  ::lm::io::ffpilot::FFPilotPhaseOutput* _internal_add_ffpilot_phase_outputs();
  public:
  const ::lm::io::ffpilot::FFPilotPhaseOutput& ffpilot_phase_outputs(int index) const;
  ::lm::io::ffpilot::FFPilotPhaseOutput* add_ffpilot_phase_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::FFPilotPhaseOutput >&
      ffpilot_phase_outputs() const;

  // @@protoc_insertion_point(class_scope:lm.io.ffpilot.FFPilotPhaseOutputList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::FFPilotPhaseOutput > ffpilot_phase_outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
};
// -------------------------------------------------------------------

class StartPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.ffpilot.StartPoint) */ {
 public:
  inline StartPoint() : StartPoint(nullptr) {}
  virtual ~StartPoint();

  StartPoint(const StartPoint& from);
  StartPoint(StartPoint&& from) noexcept
    : StartPoint() {
    *this = ::std::move(from);
  }

  inline StartPoint& operator=(const StartPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPoint& operator=(StartPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartPoint* internal_default_instance() {
    return reinterpret_cast<const StartPoint*>(
               &_StartPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartPoint& a, StartPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartPoint* New() const final {
    return CreateMaybeMessage<StartPoint>(nullptr);
  }

  StartPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartPoint& from);
  void MergeFrom(const StartPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.ffpilot.StartPoint";
  }
  protected:
  explicit StartPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto);
    return ::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeciesCoordinatesFieldNumber = 1,
    kTimesFieldNumber = 3,
    kDegreeAdvancementsFieldNumber = 4,
    kSuccessfulTrajectoryEndPointsFieldNumber = 21,
    kFailedTrajectoryEndPointsFieldNumber = 22,
    kCountFieldNumber = 2,
    kSuccessfulTrajectoriesLaunchedCountFieldNumber = 11,
    kSuccessfulTrajectoriesLaunchedTotalTimeFieldNumber = 12,
    kFailedTrajectoriesLaunchedCountFieldNumber = 13,
    kFailedTrajectoriesLaunchedTotalTimeFieldNumber = 14,
  };
  // repeated int32 species_coordinates = 1 [packed = true];
  int species_coordinates_size() const;
  private:
  int _internal_species_coordinates_size() const;
  public:
  void clear_species_coordinates();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_species_coordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_species_coordinates() const;
  void _internal_add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_species_coordinates();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 species_coordinates(int index) const;
  void set_species_coordinates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      species_coordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_species_coordinates();

  // repeated double times = 3 [packed = true];
  int times_size() const;
  private:
  int _internal_times_size() const;
  public:
  void clear_times();
  private:
  double _internal_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_times() const;
  void _internal_add_times(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_times();
  public:
  double times(int index) const;
  void set_times(int index, double value);
  void add_times(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_times();

  // repeated uint64 degree_advancements = 4 [packed = true];
  int degree_advancements_size() const;
  private:
  int _internal_degree_advancements_size() const;
  public:
  void clear_degree_advancements();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_degree_advancements(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_degree_advancements() const;
  void _internal_add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_degree_advancements();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 degree_advancements(int index) const;
  void set_degree_advancements(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      degree_advancements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_degree_advancements();

  // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 21;
  int successful_trajectory_end_points_size() const;
  private:
  int _internal_successful_trajectory_end_points_size() const;
  public:
  void clear_successful_trajectory_end_points();
  ::lm::io::ffpilot::EndPoint* mutable_successful_trajectory_end_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
      mutable_successful_trajectory_end_points();
  private:
  const ::lm::io::ffpilot::EndPoint& _internal_successful_trajectory_end_points(int index) const;
  ::lm::io::ffpilot::EndPoint* _internal_add_successful_trajectory_end_points();
  public:
  const ::lm::io::ffpilot::EndPoint& successful_trajectory_end_points(int index) const;
  ::lm::io::ffpilot::EndPoint* add_successful_trajectory_end_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
      successful_trajectory_end_points() const;

  // repeated .lm.io.ffpilot.EndPoint failed_trajectory_end_points = 22;
  int failed_trajectory_end_points_size() const;
  private:
  int _internal_failed_trajectory_end_points_size() const;
  public:
  void clear_failed_trajectory_end_points();
  ::lm::io::ffpilot::EndPoint* mutable_failed_trajectory_end_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
      mutable_failed_trajectory_end_points();
  private:
  const ::lm::io::ffpilot::EndPoint& _internal_failed_trajectory_end_points(int index) const;
  ::lm::io::ffpilot::EndPoint* _internal_add_failed_trajectory_end_points();
  public:
  const ::lm::io::ffpilot::EndPoint& failed_trajectory_end_points(int index) const;
  ::lm::io::ffpilot::EndPoint* add_failed_trajectory_end_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
      failed_trajectory_end_points() const;

  // optional uint64 count = 2 [default = 0];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 successful_trajectories_launched_count = 11 [default = 0];
  bool has_successful_trajectories_launched_count() const;
  private:
  bool _internal_has_successful_trajectories_launched_count() const;
  public:
  void clear_successful_trajectories_launched_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 successful_trajectories_launched_count() const;
  void set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_successful_trajectories_launched_count() const;
  void _internal_set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double successful_trajectories_launched_total_time = 12 [default = 0];
  bool has_successful_trajectories_launched_total_time() const;
  private:
  bool _internal_has_successful_trajectories_launched_total_time() const;
  public:
  void clear_successful_trajectories_launched_total_time();
  double successful_trajectories_launched_total_time() const;
  void set_successful_trajectories_launched_total_time(double value);
  private:
  double _internal_successful_trajectories_launched_total_time() const;
  void _internal_set_successful_trajectories_launched_total_time(double value);
  public:

  // optional uint64 failed_trajectories_launched_count = 13 [default = 0];
  bool has_failed_trajectories_launched_count() const;
  private:
  bool _internal_has_failed_trajectories_launched_count() const;
  public:
  void clear_failed_trajectories_launched_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 failed_trajectories_launched_count() const;
  void set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_failed_trajectories_launched_count() const;
  void _internal_set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double failed_trajectories_launched_total_time = 14 [default = 0];
  bool has_failed_trajectories_launched_total_time() const;
  private:
  bool _internal_has_failed_trajectories_launched_total_time() const;
  public:
  void clear_failed_trajectories_launched_total_time();
  double failed_trajectories_launched_total_time() const;
  void set_failed_trajectories_launched_total_time(double value);
  private:
  double _internal_failed_trajectories_launched_total_time() const;
  void _internal_set_failed_trajectories_launched_total_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.ffpilot.StartPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > species_coordinates_;
  mutable std::atomic<int> _species_coordinates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > times_;
  mutable std::atomic<int> _times_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > degree_advancements_;
  mutable std::atomic<int> _degree_advancements_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint > successful_trajectory_end_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint > failed_trajectory_end_points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 successful_trajectories_launched_count_;
  double successful_trajectories_launched_total_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 failed_trajectories_launched_count_;
  double failed_trajectories_launched_total_time_;
  friend struct ::TableStruct_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
};
// -------------------------------------------------------------------

class EndPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.ffpilot.EndPoint) */ {
 public:
  inline EndPoint() : EndPoint(nullptr) {}
  virtual ~EndPoint();

  EndPoint(const EndPoint& from);
  EndPoint(EndPoint&& from) noexcept
    : EndPoint() {
    *this = ::std::move(from);
  }

  inline EndPoint& operator=(const EndPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPoint& operator=(EndPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPoint* internal_default_instance() {
    return reinterpret_cast<const EndPoint*>(
               &_EndPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EndPoint& a, EndPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPoint* New() const final {
    return CreateMaybeMessage<EndPoint>(nullptr);
  }

  EndPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPoint& from);
  void MergeFrom(const EndPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.ffpilot.EndPoint";
  }
  protected:
  explicit EndPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto);
    return ::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeciesCoordinatesFieldNumber = 1,
    kTimesFieldNumber = 3,
    kDegreeAdvancementsFieldNumber = 4,
    kCountFieldNumber = 2,
  };
  // repeated int32 species_coordinates = 1 [packed = true];
  int species_coordinates_size() const;
  private:
  int _internal_species_coordinates_size() const;
  public:
  void clear_species_coordinates();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_species_coordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_species_coordinates() const;
  void _internal_add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_species_coordinates();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 species_coordinates(int index) const;
  void set_species_coordinates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      species_coordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_species_coordinates();

  // repeated double times = 3 [packed = true];
  int times_size() const;
  private:
  int _internal_times_size() const;
  public:
  void clear_times();
  private:
  double _internal_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_times() const;
  void _internal_add_times(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_times();
  public:
  double times(int index) const;
  void set_times(int index, double value);
  void add_times(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_times();

  // repeated uint64 degree_advancements = 4 [packed = true];
  int degree_advancements_size() const;
  private:
  int _internal_degree_advancements_size() const;
  public:
  void clear_degree_advancements();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_degree_advancements(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_degree_advancements() const;
  void _internal_add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_degree_advancements();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 degree_advancements(int index) const;
  void set_degree_advancements(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      degree_advancements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_degree_advancements();

  // optional uint64 count = 2 [default = 0];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.ffpilot.EndPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > species_coordinates_;
  mutable std::atomic<int> _species_coordinates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > times_;
  mutable std::atomic<int> _times_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > degree_advancements_;
  mutable std::atomic<int> _degree_advancements_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  friend struct ::TableStruct_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FFPilotPhaseOutput

// optional int64 phase_id = 1;
inline bool FFPilotPhaseOutput::_internal_has_phase_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_phase_id() const {
  return _internal_has_phase_id();
}
inline void FFPilotPhaseOutput::clear_phase_id() {
  phase_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhaseOutput::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhaseOutput::phase_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.phase_id)
  return _internal_phase_id();
}
inline void FFPilotPhaseOutput::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  phase_id_ = value;
}
inline void FFPilotPhaseOutput::set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.phase_id)
}

// optional int64 basin_id = 2;
inline bool FFPilotPhaseOutput::_internal_has_basin_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_basin_id() const {
  return _internal_has_basin_id();
}
inline void FFPilotPhaseOutput::clear_basin_id() {
  basin_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhaseOutput::_internal_basin_id() const {
  return basin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhaseOutput::basin_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.basin_id)
  return _internal_basin_id();
}
inline void FFPilotPhaseOutput::_internal_set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  basin_id_ = value;
}
inline void FFPilotPhaseOutput::set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basin_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.basin_id)
}

// optional uint64 tiling_id = 3;
inline bool FFPilotPhaseOutput::_internal_has_tiling_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_tiling_id() const {
  return _internal_has_tiling_id();
}
inline void FFPilotPhaseOutput::clear_tiling_id() {
  tiling_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::_internal_tiling_id() const {
  return tiling_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::tiling_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.tiling_id)
  return _internal_tiling_id();
}
inline void FFPilotPhaseOutput::_internal_set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  tiling_id_ = value;
}
inline void FFPilotPhaseOutput::set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tiling_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.tiling_id)
}

// optional uint64 first_trajectory_id = 4;
inline bool FFPilotPhaseOutput::_internal_has_first_trajectory_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_first_trajectory_id() const {
  return _internal_has_first_trajectory_id();
}
inline void FFPilotPhaseOutput::clear_first_trajectory_id() {
  first_trajectory_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::_internal_first_trajectory_id() const {
  return first_trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::first_trajectory_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.first_trajectory_id)
  return _internal_first_trajectory_id();
}
inline void FFPilotPhaseOutput::_internal_set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  first_trajectory_id_ = value;
}
inline void FFPilotPhaseOutput::set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_trajectory_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.first_trajectory_id)
}

// optional uint64 final_trajectory_id = 5;
inline bool FFPilotPhaseOutput::_internal_has_final_trajectory_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_final_trajectory_id() const {
  return _internal_has_final_trajectory_id();
}
inline void FFPilotPhaseOutput::clear_final_trajectory_id() {
  final_trajectory_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::_internal_final_trajectory_id() const {
  return final_trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::final_trajectory_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.final_trajectory_id)
  return _internal_final_trajectory_id();
}
inline void FFPilotPhaseOutput::_internal_set_final_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  final_trajectory_id_ = value;
}
inline void FFPilotPhaseOutput::set_final_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_final_trajectory_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.final_trajectory_id)
}

// repeated .lm.io.ffpilot.StartPoint start_points = 11;
inline int FFPilotPhaseOutput::_internal_start_points_size() const {
  return start_points_.size();
}
inline int FFPilotPhaseOutput::start_points_size() const {
  return _internal_start_points_size();
}
inline void FFPilotPhaseOutput::clear_start_points() {
  start_points_.Clear();
}
inline ::lm::io::ffpilot::StartPoint* FFPilotPhaseOutput::mutable_start_points(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotPhaseOutput.start_points)
  return start_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::StartPoint >*
FFPilotPhaseOutput::mutable_start_points() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.FFPilotPhaseOutput.start_points)
  return &start_points_;
}
inline const ::lm::io::ffpilot::StartPoint& FFPilotPhaseOutput::_internal_start_points(int index) const {
  return start_points_.Get(index);
}
inline const ::lm::io::ffpilot::StartPoint& FFPilotPhaseOutput::start_points(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.start_points)
  return _internal_start_points(index);
}
inline ::lm::io::ffpilot::StartPoint* FFPilotPhaseOutput::_internal_add_start_points() {
  return start_points_.Add();
}
inline ::lm::io::ffpilot::StartPoint* FFPilotPhaseOutput::add_start_points() {
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.FFPilotPhaseOutput.start_points)
  return _internal_add_start_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::StartPoint >&
FFPilotPhaseOutput::start_points() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.FFPilotPhaseOutput.start_points)
  return start_points_;
}

// optional uint64 successful_trajectories_launched_count = 21 [default = 0];
inline bool FFPilotPhaseOutput::_internal_has_successful_trajectories_launched_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_successful_trajectories_launched_count() const {
  return _internal_has_successful_trajectories_launched_count();
}
inline void FFPilotPhaseOutput::clear_successful_trajectories_launched_count() {
  successful_trajectories_launched_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::_internal_successful_trajectories_launched_count() const {
  return successful_trajectories_launched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::successful_trajectories_launched_count() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectories_launched_count)
  return _internal_successful_trajectories_launched_count();
}
inline void FFPilotPhaseOutput::_internal_set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  successful_trajectories_launched_count_ = value;
}
inline void FFPilotPhaseOutput::set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_successful_trajectories_launched_count(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectories_launched_count)
}

// optional double successful_trajectories_launched_total_time = 22 [default = 0];
inline bool FFPilotPhaseOutput::_internal_has_successful_trajectories_launched_total_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_successful_trajectories_launched_total_time() const {
  return _internal_has_successful_trajectories_launched_total_time();
}
inline void FFPilotPhaseOutput::clear_successful_trajectories_launched_total_time() {
  successful_trajectories_launched_total_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double FFPilotPhaseOutput::_internal_successful_trajectories_launched_total_time() const {
  return successful_trajectories_launched_total_time_;
}
inline double FFPilotPhaseOutput::successful_trajectories_launched_total_time() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectories_launched_total_time)
  return _internal_successful_trajectories_launched_total_time();
}
inline void FFPilotPhaseOutput::_internal_set_successful_trajectories_launched_total_time(double value) {
  _has_bits_[0] |= 0x00000040u;
  successful_trajectories_launched_total_time_ = value;
}
inline void FFPilotPhaseOutput::set_successful_trajectories_launched_total_time(double value) {
  _internal_set_successful_trajectories_launched_total_time(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectories_launched_total_time)
}

// optional uint64 failed_trajectories_launched_count = 23 [default = 0];
inline bool FFPilotPhaseOutput::_internal_has_failed_trajectories_launched_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_failed_trajectories_launched_count() const {
  return _internal_has_failed_trajectories_launched_count();
}
inline void FFPilotPhaseOutput::clear_failed_trajectories_launched_count() {
  failed_trajectories_launched_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::_internal_failed_trajectories_launched_count() const {
  return failed_trajectories_launched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhaseOutput::failed_trajectories_launched_count() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.failed_trajectories_launched_count)
  return _internal_failed_trajectories_launched_count();
}
inline void FFPilotPhaseOutput::_internal_set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  failed_trajectories_launched_count_ = value;
}
inline void FFPilotPhaseOutput::set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_failed_trajectories_launched_count(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.failed_trajectories_launched_count)
}

// optional double failed_trajectories_launched_total_time = 24 [default = 0];
inline bool FFPilotPhaseOutput::_internal_has_failed_trajectories_launched_total_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_failed_trajectories_launched_total_time() const {
  return _internal_has_failed_trajectories_launched_total_time();
}
inline void FFPilotPhaseOutput::clear_failed_trajectories_launched_total_time() {
  failed_trajectories_launched_total_time_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double FFPilotPhaseOutput::_internal_failed_trajectories_launched_total_time() const {
  return failed_trajectories_launched_total_time_;
}
inline double FFPilotPhaseOutput::failed_trajectories_launched_total_time() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.failed_trajectories_launched_total_time)
  return _internal_failed_trajectories_launched_total_time();
}
inline void FFPilotPhaseOutput::_internal_set_failed_trajectories_launched_total_time(double value) {
  _has_bits_[0] |= 0x00000100u;
  failed_trajectories_launched_total_time_ = value;
}
inline void FFPilotPhaseOutput::set_failed_trajectories_launched_total_time(double value) {
  _internal_set_failed_trajectories_launched_total_time(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.failed_trajectories_launched_total_time)
}

// repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 101;
inline int FFPilotPhaseOutput::_internal_successful_trajectory_end_points_size() const {
  return successful_trajectory_end_points_.size();
}
inline int FFPilotPhaseOutput::successful_trajectory_end_points_size() const {
  return _internal_successful_trajectory_end_points_size();
}
inline void FFPilotPhaseOutput::clear_successful_trajectory_end_points() {
  successful_trajectory_end_points_.Clear();
}
inline ::lm::io::ffpilot::EndPoint* FFPilotPhaseOutput::mutable_successful_trajectory_end_points(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectory_end_points)
  return successful_trajectory_end_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
FFPilotPhaseOutput::mutable_successful_trajectory_end_points() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectory_end_points)
  return &successful_trajectory_end_points_;
}
inline const ::lm::io::ffpilot::EndPoint& FFPilotPhaseOutput::_internal_successful_trajectory_end_points(int index) const {
  return successful_trajectory_end_points_.Get(index);
}
inline const ::lm::io::ffpilot::EndPoint& FFPilotPhaseOutput::successful_trajectory_end_points(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectory_end_points)
  return _internal_successful_trajectory_end_points(index);
}
inline ::lm::io::ffpilot::EndPoint* FFPilotPhaseOutput::_internal_add_successful_trajectory_end_points() {
  return successful_trajectory_end_points_.Add();
}
inline ::lm::io::ffpilot::EndPoint* FFPilotPhaseOutput::add_successful_trajectory_end_points() {
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectory_end_points)
  return _internal_add_successful_trajectory_end_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
FFPilotPhaseOutput::successful_trajectory_end_points() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.FFPilotPhaseOutput.successful_trajectory_end_points)
  return successful_trajectory_end_points_;
}

// optional double variance = 201;
inline bool FFPilotPhaseOutput::_internal_has_variance() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FFPilotPhaseOutput::has_variance() const {
  return _internal_has_variance();
}
inline void FFPilotPhaseOutput::clear_variance() {
  variance_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double FFPilotPhaseOutput::_internal_variance() const {
  return variance_;
}
inline double FFPilotPhaseOutput::variance() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutput.variance)
  return _internal_variance();
}
inline void FFPilotPhaseOutput::_internal_set_variance(double value) {
  _has_bits_[0] |= 0x00000200u;
  variance_ = value;
}
inline void FFPilotPhaseOutput::set_variance(double value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhaseOutput.variance)
}

// -------------------------------------------------------------------

// FFPilotPhaseOutputList

// repeated .lm.io.ffpilot.FFPilotPhaseOutput ffpilot_phase_outputs = 1;
inline int FFPilotPhaseOutputList::_internal_ffpilot_phase_outputs_size() const {
  return ffpilot_phase_outputs_.size();
}
inline int FFPilotPhaseOutputList::ffpilot_phase_outputs_size() const {
  return _internal_ffpilot_phase_outputs_size();
}
inline void FFPilotPhaseOutputList::clear_ffpilot_phase_outputs() {
  ffpilot_phase_outputs_.Clear();
}
inline ::lm::io::ffpilot::FFPilotPhaseOutput* FFPilotPhaseOutputList::mutable_ffpilot_phase_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotPhaseOutputList.ffpilot_phase_outputs)
  return ffpilot_phase_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::FFPilotPhaseOutput >*
FFPilotPhaseOutputList::mutable_ffpilot_phase_outputs() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.FFPilotPhaseOutputList.ffpilot_phase_outputs)
  return &ffpilot_phase_outputs_;
}
inline const ::lm::io::ffpilot::FFPilotPhaseOutput& FFPilotPhaseOutputList::_internal_ffpilot_phase_outputs(int index) const {
  return ffpilot_phase_outputs_.Get(index);
}
inline const ::lm::io::ffpilot::FFPilotPhaseOutput& FFPilotPhaseOutputList::ffpilot_phase_outputs(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhaseOutputList.ffpilot_phase_outputs)
  return _internal_ffpilot_phase_outputs(index);
}
inline ::lm::io::ffpilot::FFPilotPhaseOutput* FFPilotPhaseOutputList::_internal_add_ffpilot_phase_outputs() {
  return ffpilot_phase_outputs_.Add();
}
inline ::lm::io::ffpilot::FFPilotPhaseOutput* FFPilotPhaseOutputList::add_ffpilot_phase_outputs() {
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.FFPilotPhaseOutputList.ffpilot_phase_outputs)
  return _internal_add_ffpilot_phase_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::FFPilotPhaseOutput >&
FFPilotPhaseOutputList::ffpilot_phase_outputs() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.FFPilotPhaseOutputList.ffpilot_phase_outputs)
  return ffpilot_phase_outputs_;
}

// -------------------------------------------------------------------

// StartPoint

// repeated int32 species_coordinates = 1 [packed = true];
inline int StartPoint::_internal_species_coordinates_size() const {
  return species_coordinates_.size();
}
inline int StartPoint::species_coordinates_size() const {
  return _internal_species_coordinates_size();
}
inline void StartPoint::clear_species_coordinates() {
  species_coordinates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartPoint::_internal_species_coordinates(int index) const {
  return species_coordinates_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartPoint::species_coordinates(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.species_coordinates)
  return _internal_species_coordinates(index);
}
inline void StartPoint::set_species_coordinates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  species_coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.species_coordinates)
}
inline void StartPoint::_internal_add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  species_coordinates_.Add(value);
}
inline void StartPoint::add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_species_coordinates(value);
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.StartPoint.species_coordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartPoint::_internal_species_coordinates() const {
  return species_coordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartPoint::species_coordinates() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.StartPoint.species_coordinates)
  return _internal_species_coordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartPoint::_internal_mutable_species_coordinates() {
  return &species_coordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartPoint::mutable_species_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.StartPoint.species_coordinates)
  return _internal_mutable_species_coordinates();
}

// optional uint64 count = 2 [default = 0];
inline bool StartPoint::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartPoint::has_count() const {
  return _internal_has_count();
}
inline void StartPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::count() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.count)
  return _internal_count();
}
inline void StartPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void StartPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.count)
}

// repeated double times = 3 [packed = true];
inline int StartPoint::_internal_times_size() const {
  return times_.size();
}
inline int StartPoint::times_size() const {
  return _internal_times_size();
}
inline void StartPoint::clear_times() {
  times_.Clear();
}
inline double StartPoint::_internal_times(int index) const {
  return times_.Get(index);
}
inline double StartPoint::times(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.times)
  return _internal_times(index);
}
inline void StartPoint::set_times(int index, double value) {
  times_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.times)
}
inline void StartPoint::_internal_add_times(double value) {
  times_.Add(value);
}
inline void StartPoint::add_times(double value) {
  _internal_add_times(value);
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.StartPoint.times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StartPoint::_internal_times() const {
  return times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StartPoint::times() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.StartPoint.times)
  return _internal_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StartPoint::_internal_mutable_times() {
  return &times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StartPoint::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.StartPoint.times)
  return _internal_mutable_times();
}

// repeated uint64 degree_advancements = 4 [packed = true];
inline int StartPoint::_internal_degree_advancements_size() const {
  return degree_advancements_.size();
}
inline int StartPoint::degree_advancements_size() const {
  return _internal_degree_advancements_size();
}
inline void StartPoint::clear_degree_advancements() {
  degree_advancements_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::_internal_degree_advancements(int index) const {
  return degree_advancements_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::degree_advancements(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.degree_advancements)
  return _internal_degree_advancements(index);
}
inline void StartPoint::set_degree_advancements(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  degree_advancements_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.degree_advancements)
}
inline void StartPoint::_internal_add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  degree_advancements_.Add(value);
}
inline void StartPoint::add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_degree_advancements(value);
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.StartPoint.degree_advancements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StartPoint::_internal_degree_advancements() const {
  return degree_advancements_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StartPoint::degree_advancements() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.StartPoint.degree_advancements)
  return _internal_degree_advancements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StartPoint::_internal_mutable_degree_advancements() {
  return &degree_advancements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StartPoint::mutable_degree_advancements() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.StartPoint.degree_advancements)
  return _internal_mutable_degree_advancements();
}

// optional uint64 successful_trajectories_launched_count = 11 [default = 0];
inline bool StartPoint::_internal_has_successful_trajectories_launched_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StartPoint::has_successful_trajectories_launched_count() const {
  return _internal_has_successful_trajectories_launched_count();
}
inline void StartPoint::clear_successful_trajectories_launched_count() {
  successful_trajectories_launched_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::_internal_successful_trajectories_launched_count() const {
  return successful_trajectories_launched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::successful_trajectories_launched_count() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.successful_trajectories_launched_count)
  return _internal_successful_trajectories_launched_count();
}
inline void StartPoint::_internal_set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  successful_trajectories_launched_count_ = value;
}
inline void StartPoint::set_successful_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_successful_trajectories_launched_count(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.successful_trajectories_launched_count)
}

// optional double successful_trajectories_launched_total_time = 12 [default = 0];
inline bool StartPoint::_internal_has_successful_trajectories_launched_total_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StartPoint::has_successful_trajectories_launched_total_time() const {
  return _internal_has_successful_trajectories_launched_total_time();
}
inline void StartPoint::clear_successful_trajectories_launched_total_time() {
  successful_trajectories_launched_total_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double StartPoint::_internal_successful_trajectories_launched_total_time() const {
  return successful_trajectories_launched_total_time_;
}
inline double StartPoint::successful_trajectories_launched_total_time() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.successful_trajectories_launched_total_time)
  return _internal_successful_trajectories_launched_total_time();
}
inline void StartPoint::_internal_set_successful_trajectories_launched_total_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  successful_trajectories_launched_total_time_ = value;
}
inline void StartPoint::set_successful_trajectories_launched_total_time(double value) {
  _internal_set_successful_trajectories_launched_total_time(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.successful_trajectories_launched_total_time)
}

// optional uint64 failed_trajectories_launched_count = 13 [default = 0];
inline bool StartPoint::_internal_has_failed_trajectories_launched_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StartPoint::has_failed_trajectories_launched_count() const {
  return _internal_has_failed_trajectories_launched_count();
}
inline void StartPoint::clear_failed_trajectories_launched_count() {
  failed_trajectories_launched_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::_internal_failed_trajectories_launched_count() const {
  return failed_trajectories_launched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartPoint::failed_trajectories_launched_count() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.failed_trajectories_launched_count)
  return _internal_failed_trajectories_launched_count();
}
inline void StartPoint::_internal_set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  failed_trajectories_launched_count_ = value;
}
inline void StartPoint::set_failed_trajectories_launched_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_failed_trajectories_launched_count(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.failed_trajectories_launched_count)
}

// optional double failed_trajectories_launched_total_time = 14 [default = 0];
inline bool StartPoint::_internal_has_failed_trajectories_launched_total_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StartPoint::has_failed_trajectories_launched_total_time() const {
  return _internal_has_failed_trajectories_launched_total_time();
}
inline void StartPoint::clear_failed_trajectories_launched_total_time() {
  failed_trajectories_launched_total_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double StartPoint::_internal_failed_trajectories_launched_total_time() const {
  return failed_trajectories_launched_total_time_;
}
inline double StartPoint::failed_trajectories_launched_total_time() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.failed_trajectories_launched_total_time)
  return _internal_failed_trajectories_launched_total_time();
}
inline void StartPoint::_internal_set_failed_trajectories_launched_total_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  failed_trajectories_launched_total_time_ = value;
}
inline void StartPoint::set_failed_trajectories_launched_total_time(double value) {
  _internal_set_failed_trajectories_launched_total_time(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.StartPoint.failed_trajectories_launched_total_time)
}

// repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 21;
inline int StartPoint::_internal_successful_trajectory_end_points_size() const {
  return successful_trajectory_end_points_.size();
}
inline int StartPoint::successful_trajectory_end_points_size() const {
  return _internal_successful_trajectory_end_points_size();
}
inline void StartPoint::clear_successful_trajectory_end_points() {
  successful_trajectory_end_points_.Clear();
}
inline ::lm::io::ffpilot::EndPoint* StartPoint::mutable_successful_trajectory_end_points(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.StartPoint.successful_trajectory_end_points)
  return successful_trajectory_end_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
StartPoint::mutable_successful_trajectory_end_points() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.StartPoint.successful_trajectory_end_points)
  return &successful_trajectory_end_points_;
}
inline const ::lm::io::ffpilot::EndPoint& StartPoint::_internal_successful_trajectory_end_points(int index) const {
  return successful_trajectory_end_points_.Get(index);
}
inline const ::lm::io::ffpilot::EndPoint& StartPoint::successful_trajectory_end_points(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.successful_trajectory_end_points)
  return _internal_successful_trajectory_end_points(index);
}
inline ::lm::io::ffpilot::EndPoint* StartPoint::_internal_add_successful_trajectory_end_points() {
  return successful_trajectory_end_points_.Add();
}
inline ::lm::io::ffpilot::EndPoint* StartPoint::add_successful_trajectory_end_points() {
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.StartPoint.successful_trajectory_end_points)
  return _internal_add_successful_trajectory_end_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
StartPoint::successful_trajectory_end_points() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.StartPoint.successful_trajectory_end_points)
  return successful_trajectory_end_points_;
}

// repeated .lm.io.ffpilot.EndPoint failed_trajectory_end_points = 22;
inline int StartPoint::_internal_failed_trajectory_end_points_size() const {
  return failed_trajectory_end_points_.size();
}
inline int StartPoint::failed_trajectory_end_points_size() const {
  return _internal_failed_trajectory_end_points_size();
}
inline void StartPoint::clear_failed_trajectory_end_points() {
  failed_trajectory_end_points_.Clear();
}
inline ::lm::io::ffpilot::EndPoint* StartPoint::mutable_failed_trajectory_end_points(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.StartPoint.failed_trajectory_end_points)
  return failed_trajectory_end_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
StartPoint::mutable_failed_trajectory_end_points() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.StartPoint.failed_trajectory_end_points)
  return &failed_trajectory_end_points_;
}
inline const ::lm::io::ffpilot::EndPoint& StartPoint::_internal_failed_trajectory_end_points(int index) const {
  return failed_trajectory_end_points_.Get(index);
}
inline const ::lm::io::ffpilot::EndPoint& StartPoint::failed_trajectory_end_points(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.StartPoint.failed_trajectory_end_points)
  return _internal_failed_trajectory_end_points(index);
}
inline ::lm::io::ffpilot::EndPoint* StartPoint::_internal_add_failed_trajectory_end_points() {
  return failed_trajectory_end_points_.Add();
}
inline ::lm::io::ffpilot::EndPoint* StartPoint::add_failed_trajectory_end_points() {
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.StartPoint.failed_trajectory_end_points)
  return _internal_add_failed_trajectory_end_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
StartPoint::failed_trajectory_end_points() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.StartPoint.failed_trajectory_end_points)
  return failed_trajectory_end_points_;
}

// -------------------------------------------------------------------

// EndPoint

// repeated int32 species_coordinates = 1 [packed = true];
inline int EndPoint::_internal_species_coordinates_size() const {
  return species_coordinates_.size();
}
inline int EndPoint::species_coordinates_size() const {
  return _internal_species_coordinates_size();
}
inline void EndPoint::clear_species_coordinates() {
  species_coordinates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndPoint::_internal_species_coordinates(int index) const {
  return species_coordinates_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndPoint::species_coordinates(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.EndPoint.species_coordinates)
  return _internal_species_coordinates(index);
}
inline void EndPoint::set_species_coordinates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  species_coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.EndPoint.species_coordinates)
}
inline void EndPoint::_internal_add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  species_coordinates_.Add(value);
}
inline void EndPoint::add_species_coordinates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_species_coordinates(value);
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.EndPoint.species_coordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EndPoint::_internal_species_coordinates() const {
  return species_coordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EndPoint::species_coordinates() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.EndPoint.species_coordinates)
  return _internal_species_coordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EndPoint::_internal_mutable_species_coordinates() {
  return &species_coordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EndPoint::mutable_species_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.EndPoint.species_coordinates)
  return _internal_mutable_species_coordinates();
}

// optional uint64 count = 2 [default = 0];
inline bool EndPoint::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EndPoint::has_count() const {
  return _internal_has_count();
}
inline void EndPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EndPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EndPoint::count() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.EndPoint.count)
  return _internal_count();
}
inline void EndPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void EndPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.EndPoint.count)
}

// repeated double times = 3 [packed = true];
inline int EndPoint::_internal_times_size() const {
  return times_.size();
}
inline int EndPoint::times_size() const {
  return _internal_times_size();
}
inline void EndPoint::clear_times() {
  times_.Clear();
}
inline double EndPoint::_internal_times(int index) const {
  return times_.Get(index);
}
inline double EndPoint::times(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.EndPoint.times)
  return _internal_times(index);
}
inline void EndPoint::set_times(int index, double value) {
  times_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.EndPoint.times)
}
inline void EndPoint::_internal_add_times(double value) {
  times_.Add(value);
}
inline void EndPoint::add_times(double value) {
  _internal_add_times(value);
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.EndPoint.times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EndPoint::_internal_times() const {
  return times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EndPoint::times() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.EndPoint.times)
  return _internal_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EndPoint::_internal_mutable_times() {
  return &times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EndPoint::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.EndPoint.times)
  return _internal_mutable_times();
}

// repeated uint64 degree_advancements = 4 [packed = true];
inline int EndPoint::_internal_degree_advancements_size() const {
  return degree_advancements_.size();
}
inline int EndPoint::degree_advancements_size() const {
  return _internal_degree_advancements_size();
}
inline void EndPoint::clear_degree_advancements() {
  degree_advancements_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EndPoint::_internal_degree_advancements(int index) const {
  return degree_advancements_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EndPoint::degree_advancements(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.EndPoint.degree_advancements)
  return _internal_degree_advancements(index);
}
inline void EndPoint::set_degree_advancements(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  degree_advancements_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.EndPoint.degree_advancements)
}
inline void EndPoint::_internal_add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  degree_advancements_.Add(value);
}
inline void EndPoint::add_degree_advancements(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_degree_advancements(value);
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.EndPoint.degree_advancements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EndPoint::_internal_degree_advancements() const {
  return degree_advancements_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EndPoint::degree_advancements() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.EndPoint.degree_advancements)
  return _internal_degree_advancements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EndPoint::_internal_mutable_degree_advancements() {
  return &degree_advancements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EndPoint::mutable_degree_advancements() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.EndPoint.degree_advancements)
  return _internal_mutable_degree_advancements();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ffpilot
}  // namespace io
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto
