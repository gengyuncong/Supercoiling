// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/ffpilot/FFPilotStageOutput.proto

#include "lm/io/ffpilot/FFPilotStageOutput.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_robertslab_2fpbuf_2fNDArray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto;
namespace lm {
namespace io {
namespace ffpilot {
class FFPilotStageOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FFPilotStageOutput> _instance;
} _FFPilotStageOutput_default_instance_;
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_FFPilotStageOutput_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::ffpilot::_FFPilotStageOutput_default_instance_;
    new (ptr) ::lm::io::ffpilot::FFPilotStageOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::ffpilot::FFPilotStageOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FFPilotStageOutput_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FFPilotStageOutput_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto}, {
      &scc_info_NDArray_robertslab_2fpbuf_2fNDArray_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, direction_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, type_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, edges_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, trajectory_counts_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, costs_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, weights_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, weight_variances_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, optimized_trajectory_counts_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotStageOutput, first_passage_times_),
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  5,
  6,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::lm::io::ffpilot::FFPilotStageOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::ffpilot::_FFPilotStageOutput_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&lm/io/ffpilot/FFPilotStageOutput.proto"
  "\022\rlm.io.ffpilot\032\035robertslab/pbuf/NDArray"
  ".proto\"\275\004\n\022FFPilotStageOutput\022\n\n\002id\030\001 \002("
  "\005\022>\n\tdirection\030\002 \002(\0162+.lm.io.ffpilot.FFP"
  "ilotStageOutput.Direction\0224\n\004type\030\003 \002(\0162"
  "&.lm.io.ffpilot.FFPilotStageOutput.Type\022"
  "\'\n\005edges\030\n \002(\0132\030.robertslab.pbuf.NDArray"
  "\0223\n\021trajectory_counts\030\013 \002(\0132\030.robertslab"
  ".pbuf.NDArray\022\'\n\005costs\030\014 \002(\0132\030.robertsla"
  "b.pbuf.NDArray\022)\n\007weights\030\r \002(\0132\030.robert"
  "slab.pbuf.NDArray\0222\n\020weight_variances\030\017 "
  "\002(\0132\030.robertslab.pbuf.NDArray\022=\n\033optimiz"
  "ed_trajectory_counts\030\020 \001(\0132\030.robertslab."
  "pbuf.NDArray\0225\n\023first_passage_times\030\016 \001("
  "\0132\030.robertslab.pbuf.NDArray\"&\n\tDirection"
  "\022\013\n\007FORWARD\020\000\022\014\n\010BACKWARD\020\001\"!\n\004Type\022\t\n\005P"
  "ILOT\020\000\022\016\n\nPRODUCTION\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto_deps[1] = {
  &::descriptor_table_robertslab_2fpbuf_2fNDArray_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto_sccs[1] = {
  &scc_info_FFPilotStageOutput_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto, "lm/io/ffpilot/FFPilotStageOutput.proto", 662,
  &descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto_once, descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto_sccs, descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto::offsets,
  file_level_metadata_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto, 1, file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto, file_level_service_descriptors_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto)), true);
namespace lm {
namespace io {
namespace ffpilot {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotStageOutput_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto);
  return file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto[0];
}
bool FFPilotStageOutput_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FFPilotStageOutput_Direction FFPilotStageOutput::FORWARD;
constexpr FFPilotStageOutput_Direction FFPilotStageOutput::BACKWARD;
constexpr FFPilotStageOutput_Direction FFPilotStageOutput::Direction_MIN;
constexpr FFPilotStageOutput_Direction FFPilotStageOutput::Direction_MAX;
constexpr int FFPilotStageOutput::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotStageOutput_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto);
  return file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto[1];
}
bool FFPilotStageOutput_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FFPilotStageOutput_Type FFPilotStageOutput::PILOT;
constexpr FFPilotStageOutput_Type FFPilotStageOutput::PRODUCTION;
constexpr FFPilotStageOutput_Type FFPilotStageOutput::Type_MIN;
constexpr FFPilotStageOutput_Type FFPilotStageOutput::Type_MAX;
constexpr int FFPilotStageOutput::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FFPilotStageOutput::InitAsDefaultInstance() {
  ::lm::io::ffpilot::_FFPilotStageOutput_default_instance_._instance.get_mutable()->edges_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::ffpilot::_FFPilotStageOutput_default_instance_._instance.get_mutable()->trajectory_counts_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::ffpilot::_FFPilotStageOutput_default_instance_._instance.get_mutable()->costs_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::ffpilot::_FFPilotStageOutput_default_instance_._instance.get_mutable()->weights_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::ffpilot::_FFPilotStageOutput_default_instance_._instance.get_mutable()->weight_variances_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::ffpilot::_FFPilotStageOutput_default_instance_._instance.get_mutable()->optimized_trajectory_counts_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
  ::lm::io::ffpilot::_FFPilotStageOutput_default_instance_._instance.get_mutable()->first_passage_times_ = const_cast< ::robertslab::pbuf::NDArray*>(
      ::robertslab::pbuf::NDArray::internal_default_instance());
}
class FFPilotStageOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<FFPilotStageOutput>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::robertslab::pbuf::NDArray& edges(const FFPilotStageOutput* msg);
  static void set_has_edges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robertslab::pbuf::NDArray& trajectory_counts(const FFPilotStageOutput* msg);
  static void set_has_trajectory_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::robertslab::pbuf::NDArray& costs(const FFPilotStageOutput* msg);
  static void set_has_costs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::robertslab::pbuf::NDArray& weights(const FFPilotStageOutput* msg);
  static void set_has_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::robertslab::pbuf::NDArray& weight_variances(const FFPilotStageOutput* msg);
  static void set_has_weight_variances(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::robertslab::pbuf::NDArray& optimized_trajectory_counts(const FFPilotStageOutput* msg);
  static void set_has_optimized_trajectory_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::robertslab::pbuf::NDArray& first_passage_times(const FFPilotStageOutput* msg);
  static void set_has_first_passage_times(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003af) ^ 0x000003af) != 0;
  }
};

const ::robertslab::pbuf::NDArray&
FFPilotStageOutput::_Internal::edges(const FFPilotStageOutput* msg) {
  return *msg->edges_;
}
const ::robertslab::pbuf::NDArray&
FFPilotStageOutput::_Internal::trajectory_counts(const FFPilotStageOutput* msg) {
  return *msg->trajectory_counts_;
}
const ::robertslab::pbuf::NDArray&
FFPilotStageOutput::_Internal::costs(const FFPilotStageOutput* msg) {
  return *msg->costs_;
}
const ::robertslab::pbuf::NDArray&
FFPilotStageOutput::_Internal::weights(const FFPilotStageOutput* msg) {
  return *msg->weights_;
}
const ::robertslab::pbuf::NDArray&
FFPilotStageOutput::_Internal::weight_variances(const FFPilotStageOutput* msg) {
  return *msg->weight_variances_;
}
const ::robertslab::pbuf::NDArray&
FFPilotStageOutput::_Internal::optimized_trajectory_counts(const FFPilotStageOutput* msg) {
  return *msg->optimized_trajectory_counts_;
}
const ::robertslab::pbuf::NDArray&
FFPilotStageOutput::_Internal::first_passage_times(const FFPilotStageOutput* msg) {
  return *msg->first_passage_times_;
}
void FFPilotStageOutput::clear_edges() {
  if (edges_ != nullptr) edges_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FFPilotStageOutput::clear_trajectory_counts() {
  if (trajectory_counts_ != nullptr) trajectory_counts_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FFPilotStageOutput::clear_costs() {
  if (costs_ != nullptr) costs_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FFPilotStageOutput::clear_weights() {
  if (weights_ != nullptr) weights_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void FFPilotStageOutput::clear_weight_variances() {
  if (weight_variances_ != nullptr) weight_variances_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void FFPilotStageOutput::clear_optimized_trajectory_counts() {
  if (optimized_trajectory_counts_ != nullptr) optimized_trajectory_counts_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void FFPilotStageOutput::clear_first_passage_times() {
  if (first_passage_times_ != nullptr) first_passage_times_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
FFPilotStageOutput::FFPilotStageOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.ffpilot.FFPilotStageOutput)
}
FFPilotStageOutput::FFPilotStageOutput(const FFPilotStageOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_edges()) {
    edges_ = new ::robertslab::pbuf::NDArray(*from.edges_);
  } else {
    edges_ = nullptr;
  }
  if (from._internal_has_trajectory_counts()) {
    trajectory_counts_ = new ::robertslab::pbuf::NDArray(*from.trajectory_counts_);
  } else {
    trajectory_counts_ = nullptr;
  }
  if (from._internal_has_costs()) {
    costs_ = new ::robertslab::pbuf::NDArray(*from.costs_);
  } else {
    costs_ = nullptr;
  }
  if (from._internal_has_weights()) {
    weights_ = new ::robertslab::pbuf::NDArray(*from.weights_);
  } else {
    weights_ = nullptr;
  }
  if (from._internal_has_first_passage_times()) {
    first_passage_times_ = new ::robertslab::pbuf::NDArray(*from.first_passage_times_);
  } else {
    first_passage_times_ = nullptr;
  }
  if (from._internal_has_weight_variances()) {
    weight_variances_ = new ::robertslab::pbuf::NDArray(*from.weight_variances_);
  } else {
    weight_variances_ = nullptr;
  }
  if (from._internal_has_optimized_trajectory_counts()) {
    optimized_trajectory_counts_ = new ::robertslab::pbuf::NDArray(*from.optimized_trajectory_counts_);
  } else {
    optimized_trajectory_counts_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:lm.io.ffpilot.FFPilotStageOutput)
}

void FFPilotStageOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FFPilotStageOutput_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto.base);
  ::memset(&edges_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&edges_)) + sizeof(type_));
}

FFPilotStageOutput::~FFPilotStageOutput() {
  // @@protoc_insertion_point(destructor:lm.io.ffpilot.FFPilotStageOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FFPilotStageOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete edges_;
  if (this != internal_default_instance()) delete trajectory_counts_;
  if (this != internal_default_instance()) delete costs_;
  if (this != internal_default_instance()) delete weights_;
  if (this != internal_default_instance()) delete first_passage_times_;
  if (this != internal_default_instance()) delete weight_variances_;
  if (this != internal_default_instance()) delete optimized_trajectory_counts_;
}

void FFPilotStageOutput::ArenaDtor(void* object) {
  FFPilotStageOutput* _this = reinterpret_cast< FFPilotStageOutput* >(object);
  (void)_this;
}
void FFPilotStageOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FFPilotStageOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FFPilotStageOutput& FFPilotStageOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FFPilotStageOutput_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto.base);
  return *internal_default_instance();
}


void FFPilotStageOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.ffpilot.FFPilotStageOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(edges_ != nullptr);
      edges_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trajectory_counts_ != nullptr);
      trajectory_counts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(costs_ != nullptr);
      costs_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(weights_ != nullptr);
      weights_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(first_passage_times_ != nullptr);
      first_passage_times_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(weight_variances_ != nullptr);
      weight_variances_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(optimized_trajectory_counts_ != nullptr);
      optimized_trajectory_counts_->Clear();
    }
  }
  id_ = 0;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FFPilotStageOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lm.io.ffpilot.FFPilotStageOutput.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::io::ffpilot::FFPilotStageOutput_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::lm::io::ffpilot::FFPilotStageOutput_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .lm.io.ffpilot.FFPilotStageOutput.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lm::io::ffpilot::FFPilotStageOutput_Type_IsValid(val))) {
            _internal_set_type(static_cast<::lm::io::ffpilot::FFPilotStageOutput_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray edges = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray trajectory_counts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray costs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_costs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray weights = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .robertslab.pbuf.NDArray first_passage_times = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_passage_times(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .robertslab.pbuf.NDArray weight_variances = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_variances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .robertslab.pbuf.NDArray optimized_trajectory_counts = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimized_trajectory_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FFPilotStageOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.ffpilot.FFPilotStageOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .lm.io.ffpilot.FFPilotStageOutput.Direction direction = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // required .lm.io.ffpilot.FFPilotStageOutput.Type type = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // required .robertslab.pbuf.NDArray edges = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::edges(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray trajectory_counts = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::trajectory_counts(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray costs = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::costs(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray weights = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::weights(this), target, stream);
  }

  // optional .robertslab.pbuf.NDArray first_passage_times = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::first_passage_times(this), target, stream);
  }

  // required .robertslab.pbuf.NDArray weight_variances = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::weight_variances(this), target, stream);
  }

  // optional .robertslab.pbuf.NDArray optimized_trajectory_counts = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::optimized_trajectory_counts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.ffpilot.FFPilotStageOutput)
  return target;
}

size_t FFPilotStageOutput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lm.io.ffpilot.FFPilotStageOutput)
  size_t total_size = 0;

  if (_internal_has_edges()) {
    // required .robertslab.pbuf.NDArray edges = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);
  }

  if (_internal_has_trajectory_counts()) {
    // required .robertslab.pbuf.NDArray trajectory_counts = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_counts_);
  }

  if (_internal_has_costs()) {
    // required .robertslab.pbuf.NDArray costs = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *costs_);
  }

  if (_internal_has_weights()) {
    // required .robertslab.pbuf.NDArray weights = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weights_);
  }

  if (_internal_has_weight_variances()) {
    // required .robertslab.pbuf.NDArray weight_variances = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weight_variances_);
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_direction()) {
    // required .lm.io.ffpilot.FFPilotStageOutput.Direction direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (_internal_has_type()) {
    // required .lm.io.ffpilot.FFPilotStageOutput.Type type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t FFPilotStageOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.ffpilot.FFPilotStageOutput)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003af) ^ 0x000003af) == 0) {  // All required fields are present.
    // required .robertslab.pbuf.NDArray edges = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);

    // required .robertslab.pbuf.NDArray trajectory_counts = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_counts_);

    // required .robertslab.pbuf.NDArray costs = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *costs_);

    // required .robertslab.pbuf.NDArray weights = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weights_);

    // required .robertslab.pbuf.NDArray weight_variances = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weight_variances_);

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required .lm.io.ffpilot.FFPilotStageOutput.Direction direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());

    // required .lm.io.ffpilot.FFPilotStageOutput.Type type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .robertslab.pbuf.NDArray first_passage_times = 14;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *first_passage_times_);
  }

  // optional .robertslab.pbuf.NDArray optimized_trajectory_counts = 16;
  if (cached_has_bits & 0x00000040u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimized_trajectory_counts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FFPilotStageOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.ffpilot.FFPilotStageOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const FFPilotStageOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FFPilotStageOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.ffpilot.FFPilotStageOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.ffpilot.FFPilotStageOutput)
    MergeFrom(*source);
  }
}

void FFPilotStageOutput::MergeFrom(const FFPilotStageOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.ffpilot.FFPilotStageOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_edges()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_edges());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trajectory_counts()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_trajectory_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_costs()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_costs());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_weights()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_weights());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_first_passage_times()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_first_passage_times());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_weight_variances()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_weight_variances());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_optimized_trajectory_counts()->::robertslab::pbuf::NDArray::MergeFrom(from._internal_optimized_trajectory_counts());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FFPilotStageOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.ffpilot.FFPilotStageOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FFPilotStageOutput::CopyFrom(const FFPilotStageOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.ffpilot.FFPilotStageOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FFPilotStageOutput::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_edges()) {
    if (!edges_->IsInitialized()) return false;
  }
  if (_internal_has_trajectory_counts()) {
    if (!trajectory_counts_->IsInitialized()) return false;
  }
  if (_internal_has_costs()) {
    if (!costs_->IsInitialized()) return false;
  }
  if (_internal_has_weights()) {
    if (!weights_->IsInitialized()) return false;
  }
  if (_internal_has_first_passage_times()) {
    if (!first_passage_times_->IsInitialized()) return false;
  }
  if (_internal_has_weight_variances()) {
    if (!weight_variances_->IsInitialized()) return false;
  }
  if (_internal_has_optimized_trajectory_counts()) {
    if (!optimized_trajectory_counts_->IsInitialized()) return false;
  }
  return true;
}

void FFPilotStageOutput::InternalSwap(FFPilotStageOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FFPilotStageOutput, type_)
      + sizeof(FFPilotStageOutput::type_)
      - PROTOBUF_FIELD_OFFSET(FFPilotStageOutput, edges_)>(
          reinterpret_cast<char*>(&edges_),
          reinterpret_cast<char*>(&other->edges_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FFPilotStageOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::ffpilot::FFPilotStageOutput* Arena::CreateMaybeMessage< ::lm::io::ffpilot::FFPilotStageOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::ffpilot::FFPilotStageOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
