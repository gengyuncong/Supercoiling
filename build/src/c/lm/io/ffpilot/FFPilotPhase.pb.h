// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/ffpilot/FFPilotPhase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "lm/input/ffpilot/FFPilotPhaseLimit.pb.h"
#include "lm/io/ffpilot/FFPilotPhaseOutput.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto;
namespace lm {
namespace io {
namespace ffpilot {
class FFPilotPhase;
class FFPilotPhaseDefaultTypeInternal;
extern FFPilotPhaseDefaultTypeInternal _FFPilotPhase_default_instance_;
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::ffpilot::FFPilotPhase* Arena::CreateMaybeMessage<::lm::io::ffpilot::FFPilotPhase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {
namespace ffpilot {

enum FFPilotPhase_TrajectoryDuplication : int {
  FFPilotPhase_TrajectoryDuplication_NONE = 0,
  FFPilotPhase_TrajectoryDuplication_CYCLIC = 1,
  FFPilotPhase_TrajectoryDuplication_UNIFORM_RANDOM = 2
};
bool FFPilotPhase_TrajectoryDuplication_IsValid(int value);
constexpr FFPilotPhase_TrajectoryDuplication FFPilotPhase_TrajectoryDuplication_TrajectoryDuplication_MIN = FFPilotPhase_TrajectoryDuplication_NONE;
constexpr FFPilotPhase_TrajectoryDuplication FFPilotPhase_TrajectoryDuplication_TrajectoryDuplication_MAX = FFPilotPhase_TrajectoryDuplication_UNIFORM_RANDOM;
constexpr int FFPilotPhase_TrajectoryDuplication_TrajectoryDuplication_ARRAYSIZE = FFPilotPhase_TrajectoryDuplication_TrajectoryDuplication_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotPhase_TrajectoryDuplication_descriptor();
template<typename T>
inline const std::string& FFPilotPhase_TrajectoryDuplication_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FFPilotPhase_TrajectoryDuplication>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FFPilotPhase_TrajectoryDuplication_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FFPilotPhase_TrajectoryDuplication_descriptor(), enum_t_value);
}
inline bool FFPilotPhase_TrajectoryDuplication_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FFPilotPhase_TrajectoryDuplication* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FFPilotPhase_TrajectoryDuplication>(
    FFPilotPhase_TrajectoryDuplication_descriptor(), name, value);
}
enum FFPilotPhase_TrajectoryGeneration : int {
  FFPilotPhase_TrajectoryGeneration_EAGER = 0,
  FFPilotPhase_TrajectoryGeneration_LAZY = 1
};
bool FFPilotPhase_TrajectoryGeneration_IsValid(int value);
constexpr FFPilotPhase_TrajectoryGeneration FFPilotPhase_TrajectoryGeneration_TrajectoryGeneration_MIN = FFPilotPhase_TrajectoryGeneration_EAGER;
constexpr FFPilotPhase_TrajectoryGeneration FFPilotPhase_TrajectoryGeneration_TrajectoryGeneration_MAX = FFPilotPhase_TrajectoryGeneration_LAZY;
constexpr int FFPilotPhase_TrajectoryGeneration_TrajectoryGeneration_ARRAYSIZE = FFPilotPhase_TrajectoryGeneration_TrajectoryGeneration_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotPhase_TrajectoryGeneration_descriptor();
template<typename T>
inline const std::string& FFPilotPhase_TrajectoryGeneration_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FFPilotPhase_TrajectoryGeneration>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FFPilotPhase_TrajectoryGeneration_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FFPilotPhase_TrajectoryGeneration_descriptor(), enum_t_value);
}
inline bool FFPilotPhase_TrajectoryGeneration_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FFPilotPhase_TrajectoryGeneration* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FFPilotPhase_TrajectoryGeneration>(
    FFPilotPhase_TrajectoryGeneration_descriptor(), name, value);
}
// ===================================================================

class FFPilotPhase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.ffpilot.FFPilotPhase) */ {
 public:
  inline FFPilotPhase() : FFPilotPhase(nullptr) {}
  virtual ~FFPilotPhase();

  FFPilotPhase(const FFPilotPhase& from);
  FFPilotPhase(FFPilotPhase&& from) noexcept
    : FFPilotPhase() {
    *this = ::std::move(from);
  }

  inline FFPilotPhase& operator=(const FFPilotPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline FFPilotPhase& operator=(FFPilotPhase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FFPilotPhase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FFPilotPhase* internal_default_instance() {
    return reinterpret_cast<const FFPilotPhase*>(
               &_FFPilotPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FFPilotPhase& a, FFPilotPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(FFPilotPhase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FFPilotPhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FFPilotPhase* New() const final {
    return CreateMaybeMessage<FFPilotPhase>(nullptr);
  }

  FFPilotPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FFPilotPhase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FFPilotPhase& from);
  void MergeFrom(const FFPilotPhase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FFPilotPhase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.ffpilot.FFPilotPhase";
  }
  protected:
  explicit FFPilotPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto);
    return ::descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FFPilotPhase_TrajectoryDuplication TrajectoryDuplication;
  static constexpr TrajectoryDuplication NONE =
    FFPilotPhase_TrajectoryDuplication_NONE;
  static constexpr TrajectoryDuplication CYCLIC =
    FFPilotPhase_TrajectoryDuplication_CYCLIC;
  static constexpr TrajectoryDuplication UNIFORM_RANDOM =
    FFPilotPhase_TrajectoryDuplication_UNIFORM_RANDOM;
  static inline bool TrajectoryDuplication_IsValid(int value) {
    return FFPilotPhase_TrajectoryDuplication_IsValid(value);
  }
  static constexpr TrajectoryDuplication TrajectoryDuplication_MIN =
    FFPilotPhase_TrajectoryDuplication_TrajectoryDuplication_MIN;
  static constexpr TrajectoryDuplication TrajectoryDuplication_MAX =
    FFPilotPhase_TrajectoryDuplication_TrajectoryDuplication_MAX;
  static constexpr int TrajectoryDuplication_ARRAYSIZE =
    FFPilotPhase_TrajectoryDuplication_TrajectoryDuplication_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrajectoryDuplication_descriptor() {
    return FFPilotPhase_TrajectoryDuplication_descriptor();
  }
  template<typename T>
  static inline const std::string& TrajectoryDuplication_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrajectoryDuplication>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrajectoryDuplication_Name.");
    return FFPilotPhase_TrajectoryDuplication_Name(enum_t_value);
  }
  static inline bool TrajectoryDuplication_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrajectoryDuplication* value) {
    return FFPilotPhase_TrajectoryDuplication_Parse(name, value);
  }

  typedef FFPilotPhase_TrajectoryGeneration TrajectoryGeneration;
  static constexpr TrajectoryGeneration EAGER =
    FFPilotPhase_TrajectoryGeneration_EAGER;
  static constexpr TrajectoryGeneration LAZY =
    FFPilotPhase_TrajectoryGeneration_LAZY;
  static inline bool TrajectoryGeneration_IsValid(int value) {
    return FFPilotPhase_TrajectoryGeneration_IsValid(value);
  }
  static constexpr TrajectoryGeneration TrajectoryGeneration_MIN =
    FFPilotPhase_TrajectoryGeneration_TrajectoryGeneration_MIN;
  static constexpr TrajectoryGeneration TrajectoryGeneration_MAX =
    FFPilotPhase_TrajectoryGeneration_TrajectoryGeneration_MAX;
  static constexpr int TrajectoryGeneration_ARRAYSIZE =
    FFPilotPhase_TrajectoryGeneration_TrajectoryGeneration_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrajectoryGeneration_descriptor() {
    return FFPilotPhase_TrajectoryGeneration_descriptor();
  }
  template<typename T>
  static inline const std::string& TrajectoryGeneration_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrajectoryGeneration>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrajectoryGeneration_Name.");
    return FFPilotPhase_TrajectoryGeneration_Name(enum_t_value);
  }
  static inline bool TrajectoryGeneration_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrajectoryGeneration* value) {
    return FFPilotPhase_TrajectoryGeneration_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStartPointsFieldNumber = 103,
    kFfpilotPhaseLimitFieldNumber = 101,
    kPhaseIdFieldNumber = 1,
    kTileIdFieldNumber = 2,
    kBasinIdFieldNumber = 3,
    kTilingIdFieldNumber = 4,
    kReplicateIdFieldNumber = 5,
    kFirstTrajectoryIdFieldNumber = 11,
    kLastTrajectoryIdFieldNumber = 12,
    kTrajectoryDuplicationFieldNumber = 13,
    kSimultaneousTrajectoriesFieldNumber = 15,
    kTrajectoryGenerationFieldNumber = 14,
  };
  // repeated .lm.io.ffpilot.EndPoint start_points = 103;
  int start_points_size() const;
  private:
  int _internal_start_points_size() const;
  public:
  void clear_start_points();
  ::lm::io::ffpilot::EndPoint* mutable_start_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
      mutable_start_points();
  private:
  const ::lm::io::ffpilot::EndPoint& _internal_start_points(int index) const;
  ::lm::io::ffpilot::EndPoint* _internal_add_start_points();
  public:
  const ::lm::io::ffpilot::EndPoint& start_points(int index) const;
  ::lm::io::ffpilot::EndPoint* add_start_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
      start_points() const;

  // optional .lm.input.ffpilot.FFPilotPhaseLimit ffpilot_phase_limit = 101;
  bool has_ffpilot_phase_limit() const;
  private:
  bool _internal_has_ffpilot_phase_limit() const;
  public:
  void clear_ffpilot_phase_limit();
  const ::lm::input::ffpilot::FFPilotPhaseLimit& ffpilot_phase_limit() const;
  ::lm::input::ffpilot::FFPilotPhaseLimit* release_ffpilot_phase_limit();
  ::lm::input::ffpilot::FFPilotPhaseLimit* mutable_ffpilot_phase_limit();
  void set_allocated_ffpilot_phase_limit(::lm::input::ffpilot::FFPilotPhaseLimit* ffpilot_phase_limit);
  private:
  const ::lm::input::ffpilot::FFPilotPhaseLimit& _internal_ffpilot_phase_limit() const;
  ::lm::input::ffpilot::FFPilotPhaseLimit* _internal_mutable_ffpilot_phase_limit();
  public:
  void unsafe_arena_set_allocated_ffpilot_phase_limit(
      ::lm::input::ffpilot::FFPilotPhaseLimit* ffpilot_phase_limit);
  ::lm::input::ffpilot::FFPilotPhaseLimit* unsafe_arena_release_ffpilot_phase_limit();

  // optional int64 phase_id = 1;
  bool has_phase_id() const;
  private:
  bool _internal_has_phase_id() const;
  public:
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int64 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 tile_id = 2;
  bool has_tile_id() const;
  private:
  bool _internal_has_tile_id() const;
  public:
  void clear_tile_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tile_id() const;
  void set_tile_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tile_id() const;
  void _internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 basin_id = 3;
  bool has_basin_id() const;
  private:
  bool _internal_has_basin_id() const;
  public:
  void clear_basin_id();
  ::PROTOBUF_NAMESPACE_ID::int64 basin_id() const;
  void set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basin_id() const;
  void _internal_set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 tiling_id = 4;
  bool has_tiling_id() const;
  private:
  bool _internal_has_tiling_id() const;
  public:
  void clear_tiling_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tiling_id() const;
  void set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tiling_id() const;
  void _internal_set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 replicate_id = 5 [default = 0];
  bool has_replicate_id() const;
  private:
  bool _internal_has_replicate_id() const;
  public:
  void clear_replicate_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 replicate_id() const;
  void set_replicate_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_replicate_id() const;
  void _internal_set_replicate_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 first_trajectory_id = 11;
  bool has_first_trajectory_id() const;
  private:
  bool _internal_has_first_trajectory_id() const;
  public:
  void clear_first_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_trajectory_id() const;
  void set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_trajectory_id() const;
  void _internal_set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 last_trajectory_id = 12;
  bool has_last_trajectory_id() const;
  private:
  bool _internal_has_last_trajectory_id() const;
  public:
  void clear_last_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_trajectory_id() const;
  void set_last_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_trajectory_id() const;
  void _internal_set_last_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryDuplication trajectory_duplication = 13 [default = NONE];
  bool has_trajectory_duplication() const;
  private:
  bool _internal_has_trajectory_duplication() const;
  public:
  void clear_trajectory_duplication();
  ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication trajectory_duplication() const;
  void set_trajectory_duplication(::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication value);
  private:
  ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication _internal_trajectory_duplication() const;
  void _internal_set_trajectory_duplication(::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication value);
  public:

  // optional uint64 simultaneous_trajectories = 15;
  bool has_simultaneous_trajectories() const;
  private:
  bool _internal_has_simultaneous_trajectories() const;
  public:
  void clear_simultaneous_trajectories();
  ::PROTOBUF_NAMESPACE_ID::uint64 simultaneous_trajectories() const;
  void set_simultaneous_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_simultaneous_trajectories() const;
  void _internal_set_simultaneous_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .lm.io.ffpilot.FFPilotPhase.TrajectoryGeneration trajectory_generation = 14 [default = LAZY];
  bool has_trajectory_generation() const;
  private:
  bool _internal_has_trajectory_generation() const;
  public:
  void clear_trajectory_generation();
  ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration trajectory_generation() const;
  void set_trajectory_generation(::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration value);
  private:
  ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration _internal_trajectory_generation() const;
  void _internal_set_trajectory_generation(::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.ffpilot.FFPilotPhase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint > start_points_;
  ::lm::input::ffpilot::FFPilotPhaseLimit* ffpilot_phase_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 phase_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tile_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 basin_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tiling_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 replicate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_trajectory_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_trajectory_id_;
  int trajectory_duplication_;
  ::PROTOBUF_NAMESPACE_ID::uint64 simultaneous_trajectories_;
  int trajectory_generation_;
  friend struct ::TableStruct_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FFPilotPhase

// optional int64 phase_id = 1;
inline bool FFPilotPhase::_internal_has_phase_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FFPilotPhase::has_phase_id() const {
  return _internal_has_phase_id();
}
inline void FFPilotPhase::clear_phase_id() {
  phase_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhase::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhase::phase_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.phase_id)
  return _internal_phase_id();
}
inline void FFPilotPhase::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  phase_id_ = value;
}
inline void FFPilotPhase::set_phase_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.phase_id)
}

// optional int64 tile_id = 2;
inline bool FFPilotPhase::_internal_has_tile_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FFPilotPhase::has_tile_id() const {
  return _internal_has_tile_id();
}
inline void FFPilotPhase::clear_tile_id() {
  tile_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhase::_internal_tile_id() const {
  return tile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhase::tile_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.tile_id)
  return _internal_tile_id();
}
inline void FFPilotPhase::_internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  tile_id_ = value;
}
inline void FFPilotPhase::set_tile_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tile_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.tile_id)
}

// optional int64 basin_id = 3;
inline bool FFPilotPhase::_internal_has_basin_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FFPilotPhase::has_basin_id() const {
  return _internal_has_basin_id();
}
inline void FFPilotPhase::clear_basin_id() {
  basin_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhase::_internal_basin_id() const {
  return basin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FFPilotPhase::basin_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.basin_id)
  return _internal_basin_id();
}
inline void FFPilotPhase::_internal_set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  basin_id_ = value;
}
inline void FFPilotPhase::set_basin_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basin_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.basin_id)
}

// optional uint64 tiling_id = 4;
inline bool FFPilotPhase::_internal_has_tiling_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FFPilotPhase::has_tiling_id() const {
  return _internal_has_tiling_id();
}
inline void FFPilotPhase::clear_tiling_id() {
  tiling_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::_internal_tiling_id() const {
  return tiling_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::tiling_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.tiling_id)
  return _internal_tiling_id();
}
inline void FFPilotPhase::_internal_set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  tiling_id_ = value;
}
inline void FFPilotPhase::set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tiling_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.tiling_id)
}

// optional uint64 replicate_id = 5 [default = 0];
inline bool FFPilotPhase::_internal_has_replicate_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FFPilotPhase::has_replicate_id() const {
  return _internal_has_replicate_id();
}
inline void FFPilotPhase::clear_replicate_id() {
  replicate_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::_internal_replicate_id() const {
  return replicate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::replicate_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.replicate_id)
  return _internal_replicate_id();
}
inline void FFPilotPhase::_internal_set_replicate_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  replicate_id_ = value;
}
inline void FFPilotPhase::set_replicate_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_replicate_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.replicate_id)
}

// optional uint64 first_trajectory_id = 11;
inline bool FFPilotPhase::_internal_has_first_trajectory_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FFPilotPhase::has_first_trajectory_id() const {
  return _internal_has_first_trajectory_id();
}
inline void FFPilotPhase::clear_first_trajectory_id() {
  first_trajectory_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::_internal_first_trajectory_id() const {
  return first_trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::first_trajectory_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.first_trajectory_id)
  return _internal_first_trajectory_id();
}
inline void FFPilotPhase::_internal_set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  first_trajectory_id_ = value;
}
inline void FFPilotPhase::set_first_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_trajectory_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.first_trajectory_id)
}

// optional uint64 last_trajectory_id = 12;
inline bool FFPilotPhase::_internal_has_last_trajectory_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FFPilotPhase::has_last_trajectory_id() const {
  return _internal_has_last_trajectory_id();
}
inline void FFPilotPhase::clear_last_trajectory_id() {
  last_trajectory_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::_internal_last_trajectory_id() const {
  return last_trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::last_trajectory_id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.last_trajectory_id)
  return _internal_last_trajectory_id();
}
inline void FFPilotPhase::_internal_set_last_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  last_trajectory_id_ = value;
}
inline void FFPilotPhase::set_last_trajectory_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_trajectory_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.last_trajectory_id)
}

// optional .lm.io.ffpilot.FFPilotPhase.TrajectoryDuplication trajectory_duplication = 13 [default = NONE];
inline bool FFPilotPhase::_internal_has_trajectory_duplication() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FFPilotPhase::has_trajectory_duplication() const {
  return _internal_has_trajectory_duplication();
}
inline void FFPilotPhase::clear_trajectory_duplication() {
  trajectory_duplication_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication FFPilotPhase::_internal_trajectory_duplication() const {
  return static_cast< ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication >(trajectory_duplication_);
}
inline ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication FFPilotPhase::trajectory_duplication() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.trajectory_duplication)
  return _internal_trajectory_duplication();
}
inline void FFPilotPhase::_internal_set_trajectory_duplication(::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication value) {
  assert(::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  trajectory_duplication_ = value;
}
inline void FFPilotPhase::set_trajectory_duplication(::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication value) {
  _internal_set_trajectory_duplication(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.trajectory_duplication)
}

// optional .lm.io.ffpilot.FFPilotPhase.TrajectoryGeneration trajectory_generation = 14 [default = LAZY];
inline bool FFPilotPhase::_internal_has_trajectory_generation() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FFPilotPhase::has_trajectory_generation() const {
  return _internal_has_trajectory_generation();
}
inline void FFPilotPhase::clear_trajectory_generation() {
  trajectory_generation_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration FFPilotPhase::_internal_trajectory_generation() const {
  return static_cast< ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration >(trajectory_generation_);
}
inline ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration FFPilotPhase::trajectory_generation() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.trajectory_generation)
  return _internal_trajectory_generation();
}
inline void FFPilotPhase::_internal_set_trajectory_generation(::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration value) {
  assert(::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  trajectory_generation_ = value;
}
inline void FFPilotPhase::set_trajectory_generation(::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration value) {
  _internal_set_trajectory_generation(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.trajectory_generation)
}

// optional uint64 simultaneous_trajectories = 15;
inline bool FFPilotPhase::_internal_has_simultaneous_trajectories() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FFPilotPhase::has_simultaneous_trajectories() const {
  return _internal_has_simultaneous_trajectories();
}
inline void FFPilotPhase::clear_simultaneous_trajectories() {
  simultaneous_trajectories_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::_internal_simultaneous_trajectories() const {
  return simultaneous_trajectories_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FFPilotPhase::simultaneous_trajectories() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.simultaneous_trajectories)
  return _internal_simultaneous_trajectories();
}
inline void FFPilotPhase::_internal_set_simultaneous_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  simultaneous_trajectories_ = value;
}
inline void FFPilotPhase::set_simultaneous_trajectories(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_simultaneous_trajectories(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotPhase.simultaneous_trajectories)
}

// optional .lm.input.ffpilot.FFPilotPhaseLimit ffpilot_phase_limit = 101;
inline bool FFPilotPhase::_internal_has_ffpilot_phase_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ffpilot_phase_limit_ != nullptr);
  return value;
}
inline bool FFPilotPhase::has_ffpilot_phase_limit() const {
  return _internal_has_ffpilot_phase_limit();
}
inline const ::lm::input::ffpilot::FFPilotPhaseLimit& FFPilotPhase::_internal_ffpilot_phase_limit() const {
  const ::lm::input::ffpilot::FFPilotPhaseLimit* p = ffpilot_phase_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lm::input::ffpilot::FFPilotPhaseLimit*>(
      &::lm::input::ffpilot::_FFPilotPhaseLimit_default_instance_);
}
inline const ::lm::input::ffpilot::FFPilotPhaseLimit& FFPilotPhase::ffpilot_phase_limit() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.ffpilot_phase_limit)
  return _internal_ffpilot_phase_limit();
}
inline void FFPilotPhase::unsafe_arena_set_allocated_ffpilot_phase_limit(
    ::lm::input::ffpilot::FFPilotPhaseLimit* ffpilot_phase_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ffpilot_phase_limit_);
  }
  ffpilot_phase_limit_ = ffpilot_phase_limit;
  if (ffpilot_phase_limit) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotPhase.ffpilot_phase_limit)
}
inline ::lm::input::ffpilot::FFPilotPhaseLimit* FFPilotPhase::release_ffpilot_phase_limit() {
  _has_bits_[0] &= ~0x00000001u;
  ::lm::input::ffpilot::FFPilotPhaseLimit* temp = ffpilot_phase_limit_;
  ffpilot_phase_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lm::input::ffpilot::FFPilotPhaseLimit* FFPilotPhase::unsafe_arena_release_ffpilot_phase_limit() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotPhase.ffpilot_phase_limit)
  _has_bits_[0] &= ~0x00000001u;
  ::lm::input::ffpilot::FFPilotPhaseLimit* temp = ffpilot_phase_limit_;
  ffpilot_phase_limit_ = nullptr;
  return temp;
}
inline ::lm::input::ffpilot::FFPilotPhaseLimit* FFPilotPhase::_internal_mutable_ffpilot_phase_limit() {
  _has_bits_[0] |= 0x00000001u;
  if (ffpilot_phase_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lm::input::ffpilot::FFPilotPhaseLimit>(GetArena());
    ffpilot_phase_limit_ = p;
  }
  return ffpilot_phase_limit_;
}
inline ::lm::input::ffpilot::FFPilotPhaseLimit* FFPilotPhase::mutable_ffpilot_phase_limit() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotPhase.ffpilot_phase_limit)
  return _internal_mutable_ffpilot_phase_limit();
}
inline void FFPilotPhase::set_allocated_ffpilot_phase_limit(::lm::input::ffpilot::FFPilotPhaseLimit* ffpilot_phase_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ffpilot_phase_limit_);
  }
  if (ffpilot_phase_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ffpilot_phase_limit)->GetArena();
    if (message_arena != submessage_arena) {
      ffpilot_phase_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ffpilot_phase_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ffpilot_phase_limit_ = ffpilot_phase_limit;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotPhase.ffpilot_phase_limit)
}

// repeated .lm.io.ffpilot.EndPoint start_points = 103;
inline int FFPilotPhase::_internal_start_points_size() const {
  return start_points_.size();
}
inline int FFPilotPhase::start_points_size() const {
  return _internal_start_points_size();
}
inline ::lm::io::ffpilot::EndPoint* FFPilotPhase::mutable_start_points(int index) {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotPhase.start_points)
  return start_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >*
FFPilotPhase::mutable_start_points() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.ffpilot.FFPilotPhase.start_points)
  return &start_points_;
}
inline const ::lm::io::ffpilot::EndPoint& FFPilotPhase::_internal_start_points(int index) const {
  return start_points_.Get(index);
}
inline const ::lm::io::ffpilot::EndPoint& FFPilotPhase::start_points(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotPhase.start_points)
  return _internal_start_points(index);
}
inline ::lm::io::ffpilot::EndPoint* FFPilotPhase::_internal_add_start_points() {
  return start_points_.Add();
}
inline ::lm::io::ffpilot::EndPoint* FFPilotPhase::add_start_points() {
  // @@protoc_insertion_point(field_add:lm.io.ffpilot.FFPilotPhase.start_points)
  return _internal_add_start_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lm::io::ffpilot::EndPoint >&
FFPilotPhase::start_points() const {
  // @@protoc_insertion_point(field_list:lm.io.ffpilot.FFPilotPhase.start_points)
  return start_points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ffpilot
}  // namespace io
}  // namespace lm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication>() {
  return ::lm::io::ffpilot::FFPilotPhase_TrajectoryDuplication_descriptor();
}
template <> struct is_proto_enum< ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration>() {
  return ::lm::io::ffpilot::FFPilotPhase_TrajectoryGeneration_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotPhase_2eproto
