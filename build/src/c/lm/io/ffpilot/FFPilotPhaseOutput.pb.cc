// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/ffpilot/FFPilotPhaseOutput.proto

#include "lm/io/ffpilot/FFPilotPhaseOutput.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto;
namespace lm {
namespace io {
namespace ffpilot {
class FFPilotPhaseOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FFPilotPhaseOutput> _instance;
} _FFPilotPhaseOutput_default_instance_;
class FFPilotPhaseOutputListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FFPilotPhaseOutputList> _instance;
} _FFPilotPhaseOutputList_default_instance_;
class StartPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartPoint> _instance;
} _StartPoint_default_instance_;
class EndPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndPoint> _instance;
} _EndPoint_default_instance_;
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
static void InitDefaultsscc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::ffpilot::_EndPoint_default_instance_;
    new (ptr) ::lm::io::ffpilot::EndPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::ffpilot::EndPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto}, {}};

static void InitDefaultsscc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::ffpilot::_FFPilotPhaseOutput_default_instance_;
    new (ptr) ::lm::io::ffpilot::FFPilotPhaseOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::ffpilot::FFPilotPhaseOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto}, {
      &scc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,
      &scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,}};

static void InitDefaultsscc_info_FFPilotPhaseOutputList_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::ffpilot::_FFPilotPhaseOutputList_default_instance_;
    new (ptr) ::lm::io::ffpilot::FFPilotPhaseOutputList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::ffpilot::FFPilotPhaseOutputList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FFPilotPhaseOutputList_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FFPilotPhaseOutputList_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto}, {
      &scc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,}};

static void InitDefaultsscc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lm::io::ffpilot::_StartPoint_default_instance_;
    new (ptr) ::lm::io::ffpilot::StartPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::io::ffpilot::StartPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto}, {
      &scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, phase_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, basin_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, tiling_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, first_trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, final_trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, start_points_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, successful_trajectories_launched_count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, successful_trajectories_launched_total_time_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, failed_trajectories_launched_count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, failed_trajectories_launched_total_time_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, successful_trajectory_end_points_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutput, variance_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutputList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::FFPilotPhaseOutputList, ffpilot_phase_outputs_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, species_coordinates_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, times_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, degree_advancements_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, successful_trajectories_launched_count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, successful_trajectories_launched_total_time_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, failed_trajectories_launched_count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, failed_trajectories_launched_total_time_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, successful_trajectory_end_points_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::StartPoint, failed_trajectory_end_points_),
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::EndPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::EndPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::EndPoint, species_coordinates_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::EndPoint, count_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::EndPoint, times_),
  PROTOBUF_FIELD_OFFSET(::lm::io::ffpilot::EndPoint, degree_advancements_),
  ~0u,
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::lm::io::ffpilot::FFPilotPhaseOutput)},
  { 29, -1, sizeof(::lm::io::ffpilot::FFPilotPhaseOutputList)},
  { 35, 50, sizeof(::lm::io::ffpilot::StartPoint)},
  { 60, 69, sizeof(::lm::io::ffpilot::EndPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::ffpilot::_FFPilotPhaseOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::ffpilot::_FFPilotPhaseOutputList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::ffpilot::_StartPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lm::io::ffpilot::_EndPoint_default_instance_),
};

const char descriptor_table_protodef_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&lm/io/ffpilot/FFPilotPhaseOutput.proto"
  "\022\rlm.io.ffpilot\"\332\003\n\022FFPilotPhaseOutput\022\020"
  "\n\010phase_id\030\001 \001(\003\022\020\n\010basin_id\030\002 \001(\003\022\021\n\tti"
  "ling_id\030\003 \001(\004\022\033\n\023first_trajectory_id\030\004 \001"
  "(\004\022\033\n\023final_trajectory_id\030\005 \001(\004\022/\n\014start"
  "_points\030\013 \003(\0132\031.lm.io.ffpilot.StartPoint"
  "\0221\n&successful_trajectories_launched_cou"
  "nt\030\025 \001(\004:\0010\0226\n+successful_trajectories_l"
  "aunched_total_time\030\026 \001(\001:\0010\022-\n\"failed_tr"
  "ajectories_launched_count\030\027 \001(\004:\0010\0222\n\'fa"
  "iled_trajectories_launched_total_time\030\030 "
  "\001(\001:\0010\022A\n successful_trajectory_end_poin"
  "ts\030e \003(\0132\027.lm.io.ffpilot.EndPoint\022\021\n\010var"
  "iance\030\311\001 \001(\001\"Z\n\026FFPilotPhaseOutputList\022@"
  "\n\025ffpilot_phase_outputs\030\001 \003(\0132!.lm.io.ff"
  "pilot.FFPilotPhaseOutput\"\303\003\n\nStartPoint\022"
  "\037\n\023species_coordinates\030\001 \003(\005B\002\020\001\022\020\n\005coun"
  "t\030\002 \001(\004:\0010\022\021\n\005times\030\003 \003(\001B\002\020\001\022\037\n\023degree_"
  "advancements\030\004 \003(\004B\002\020\001\0221\n&successful_tra"
  "jectories_launched_count\030\013 \001(\004:\0010\0226\n+suc"
  "cessful_trajectories_launched_total_time"
  "\030\014 \001(\001:\0010\022-\n\"failed_trajectories_launche"
  "d_count\030\r \001(\004:\0010\0222\n\'failed_trajectories_"
  "launched_total_time\030\016 \001(\001:\0010\022A\n successf"
  "ul_trajectory_end_points\030\025 \003(\0132\027.lm.io.f"
  "fpilot.EndPoint\022=\n\034failed_trajectory_end"
  "_points\030\026 \003(\0132\027.lm.io.ffpilot.EndPoint\"q"
  "\n\010EndPoint\022\037\n\023species_coordinates\030\001 \003(\005B"
  "\002\020\001\022\020\n\005count\030\002 \001(\004:\0010\022\021\n\005times\030\003 \003(\001B\002\020\001"
  "\022\037\n\023degree_advancements\030\004 \003(\004B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto_sccs[4] = {
  &scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,
  &scc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,
  &scc_info_FFPilotPhaseOutputList_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,
  &scc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto = {
  false, false, descriptor_table_protodef_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto, "lm/io/ffpilot/FFPilotPhaseOutput.proto", 1193,
  &descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto_once, descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto_sccs, descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto::offsets,
  file_level_metadata_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto, 4, file_level_enum_descriptors_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto, file_level_service_descriptors_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto)), true);
namespace lm {
namespace io {
namespace ffpilot {

// ===================================================================

void FFPilotPhaseOutput::InitAsDefaultInstance() {
}
class FFPilotPhaseOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<FFPilotPhaseOutput>()._has_bits_);
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_basin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tiling_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_final_trajectory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_successful_trajectories_launched_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_successful_trajectories_launched_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_failed_trajectories_launched_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_failed_trajectories_launched_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

FFPilotPhaseOutput::FFPilotPhaseOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  start_points_(arena),
  successful_trajectory_end_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.ffpilot.FFPilotPhaseOutput)
}
FFPilotPhaseOutput::FFPilotPhaseOutput(const FFPilotPhaseOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      start_points_(from.start_points_),
      successful_trajectory_end_points_(from.successful_trajectory_end_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phase_id_, &from.phase_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&variance_) -
    reinterpret_cast<char*>(&phase_id_)) + sizeof(variance_));
  // @@protoc_insertion_point(copy_constructor:lm.io.ffpilot.FFPilotPhaseOutput)
}

void FFPilotPhaseOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base);
  ::memset(&phase_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&variance_) -
      reinterpret_cast<char*>(&phase_id_)) + sizeof(variance_));
}

FFPilotPhaseOutput::~FFPilotPhaseOutput() {
  // @@protoc_insertion_point(destructor:lm.io.ffpilot.FFPilotPhaseOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FFPilotPhaseOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FFPilotPhaseOutput::ArenaDtor(void* object) {
  FFPilotPhaseOutput* _this = reinterpret_cast< FFPilotPhaseOutput* >(object);
  (void)_this;
}
void FFPilotPhaseOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FFPilotPhaseOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FFPilotPhaseOutput& FFPilotPhaseOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FFPilotPhaseOutput_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base);
  return *internal_default_instance();
}


void FFPilotPhaseOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.ffpilot.FFPilotPhaseOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_points_.Clear();
  successful_trajectory_end_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&phase_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failed_trajectories_launched_count_) -
        reinterpret_cast<char*>(&phase_id_)) + sizeof(failed_trajectories_launched_count_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&failed_trajectories_launched_total_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variance_) -
        reinterpret_cast<char*>(&failed_trajectories_launched_total_time_)) + sizeof(variance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FFPilotPhaseOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 phase_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_phase_id(&has_bits);
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 basin_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_basin_id(&has_bits);
          basin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tiling_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tiling_id(&has_bits);
          tiling_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 first_trajectory_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_first_trajectory_id(&has_bits);
          first_trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 final_trajectory_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_final_trajectory_id(&has_bits);
          final_trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.ffpilot.StartPoint start_points = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 successful_trajectories_launched_count = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_successful_trajectories_launched_count(&has_bits);
          successful_trajectories_launched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double successful_trajectories_launched_total_time = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_successful_trajectories_launched_total_time(&has_bits);
          successful_trajectories_launched_total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 failed_trajectories_launched_count = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_failed_trajectories_launched_count(&has_bits);
          failed_trajectories_launched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double failed_trajectories_launched_total_time = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_failed_trajectories_launched_total_time(&has_bits);
          failed_trajectories_launched_total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_successful_trajectory_end_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double variance = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_variance(&has_bits);
          variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FFPilotPhaseOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.ffpilot.FFPilotPhaseOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 phase_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phase_id(), target);
  }

  // optional int64 basin_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_basin_id(), target);
  }

  // optional uint64 tiling_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tiling_id(), target);
  }

  // optional uint64 first_trajectory_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_first_trajectory_id(), target);
  }

  // optional uint64 final_trajectory_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_final_trajectory_id(), target);
  }

  // repeated .lm.io.ffpilot.StartPoint start_points = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_start_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_start_points(i), target, stream);
  }

  // optional uint64 successful_trajectories_launched_count = 21 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_successful_trajectories_launched_count(), target);
  }

  // optional double successful_trajectories_launched_total_time = 22 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_successful_trajectories_launched_total_time(), target);
  }

  // optional uint64 failed_trajectories_launched_count = 23 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_failed_trajectories_launched_count(), target);
  }

  // optional double failed_trajectories_launched_total_time = 24 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_failed_trajectories_launched_total_time(), target);
  }

  // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_successful_trajectory_end_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, this->_internal_successful_trajectory_end_points(i), target, stream);
  }

  // optional double variance = 201;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(201, this->_internal_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.ffpilot.FFPilotPhaseOutput)
  return target;
}

size_t FFPilotPhaseOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.ffpilot.FFPilotPhaseOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.io.ffpilot.StartPoint start_points = 11;
  total_size += 1UL * this->_internal_start_points_size();
  for (const auto& msg : this->start_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 101;
  total_size += 2UL * this->_internal_successful_trajectory_end_points_size();
  for (const auto& msg : this->successful_trajectory_end_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 phase_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_phase_id());
    }

    // optional int64 basin_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_basin_id());
    }

    // optional uint64 tiling_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tiling_id());
    }

    // optional uint64 first_trajectory_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_trajectory_id());
    }

    // optional uint64 final_trajectory_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_final_trajectory_id());
    }

    // optional uint64 successful_trajectories_launched_count = 21 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_successful_trajectories_launched_count());
    }

    // optional double successful_trajectories_launched_total_time = 22 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional uint64 failed_trajectories_launched_count = 23 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_failed_trajectories_launched_count());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double failed_trajectories_launched_total_time = 24 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double variance = 201;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FFPilotPhaseOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.ffpilot.FFPilotPhaseOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const FFPilotPhaseOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FFPilotPhaseOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.ffpilot.FFPilotPhaseOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.ffpilot.FFPilotPhaseOutput)
    MergeFrom(*source);
  }
}

void FFPilotPhaseOutput::MergeFrom(const FFPilotPhaseOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.ffpilot.FFPilotPhaseOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_points_.MergeFrom(from.start_points_);
  successful_trajectory_end_points_.MergeFrom(from.successful_trajectory_end_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      phase_id_ = from.phase_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      basin_id_ = from.basin_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tiling_id_ = from.tiling_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_trajectory_id_ = from.first_trajectory_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      final_trajectory_id_ = from.final_trajectory_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      successful_trajectories_launched_count_ = from.successful_trajectories_launched_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      successful_trajectories_launched_total_time_ = from.successful_trajectories_launched_total_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      failed_trajectories_launched_count_ = from.failed_trajectories_launched_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      failed_trajectories_launched_total_time_ = from.failed_trajectories_launched_total_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      variance_ = from.variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FFPilotPhaseOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.ffpilot.FFPilotPhaseOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FFPilotPhaseOutput::CopyFrom(const FFPilotPhaseOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.ffpilot.FFPilotPhaseOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FFPilotPhaseOutput::IsInitialized() const {
  return true;
}

void FFPilotPhaseOutput::InternalSwap(FFPilotPhaseOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_points_.InternalSwap(&other->start_points_);
  successful_trajectory_end_points_.InternalSwap(&other->successful_trajectory_end_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FFPilotPhaseOutput, variance_)
      + sizeof(FFPilotPhaseOutput::variance_)
      - PROTOBUF_FIELD_OFFSET(FFPilotPhaseOutput, phase_id_)>(
          reinterpret_cast<char*>(&phase_id_),
          reinterpret_cast<char*>(&other->phase_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FFPilotPhaseOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FFPilotPhaseOutputList::InitAsDefaultInstance() {
}
class FFPilotPhaseOutputList::_Internal {
 public:
};

FFPilotPhaseOutputList::FFPilotPhaseOutputList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ffpilot_phase_outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.ffpilot.FFPilotPhaseOutputList)
}
FFPilotPhaseOutputList::FFPilotPhaseOutputList(const FFPilotPhaseOutputList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ffpilot_phase_outputs_(from.ffpilot_phase_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lm.io.ffpilot.FFPilotPhaseOutputList)
}

void FFPilotPhaseOutputList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FFPilotPhaseOutputList_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base);
}

FFPilotPhaseOutputList::~FFPilotPhaseOutputList() {
  // @@protoc_insertion_point(destructor:lm.io.ffpilot.FFPilotPhaseOutputList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FFPilotPhaseOutputList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FFPilotPhaseOutputList::ArenaDtor(void* object) {
  FFPilotPhaseOutputList* _this = reinterpret_cast< FFPilotPhaseOutputList* >(object);
  (void)_this;
}
void FFPilotPhaseOutputList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FFPilotPhaseOutputList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FFPilotPhaseOutputList& FFPilotPhaseOutputList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FFPilotPhaseOutputList_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base);
  return *internal_default_instance();
}


void FFPilotPhaseOutputList::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.ffpilot.FFPilotPhaseOutputList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ffpilot_phase_outputs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FFPilotPhaseOutputList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lm.io.ffpilot.FFPilotPhaseOutput ffpilot_phase_outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ffpilot_phase_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FFPilotPhaseOutputList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.ffpilot.FFPilotPhaseOutputList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lm.io.ffpilot.FFPilotPhaseOutput ffpilot_phase_outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ffpilot_phase_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ffpilot_phase_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.ffpilot.FFPilotPhaseOutputList)
  return target;
}

size_t FFPilotPhaseOutputList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.ffpilot.FFPilotPhaseOutputList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lm.io.ffpilot.FFPilotPhaseOutput ffpilot_phase_outputs = 1;
  total_size += 1UL * this->_internal_ffpilot_phase_outputs_size();
  for (const auto& msg : this->ffpilot_phase_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FFPilotPhaseOutputList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.ffpilot.FFPilotPhaseOutputList)
  GOOGLE_DCHECK_NE(&from, this);
  const FFPilotPhaseOutputList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FFPilotPhaseOutputList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.ffpilot.FFPilotPhaseOutputList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.ffpilot.FFPilotPhaseOutputList)
    MergeFrom(*source);
  }
}

void FFPilotPhaseOutputList::MergeFrom(const FFPilotPhaseOutputList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.ffpilot.FFPilotPhaseOutputList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ffpilot_phase_outputs_.MergeFrom(from.ffpilot_phase_outputs_);
}

void FFPilotPhaseOutputList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.ffpilot.FFPilotPhaseOutputList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FFPilotPhaseOutputList::CopyFrom(const FFPilotPhaseOutputList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.ffpilot.FFPilotPhaseOutputList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FFPilotPhaseOutputList::IsInitialized() const {
  return true;
}

void FFPilotPhaseOutputList::InternalSwap(FFPilotPhaseOutputList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ffpilot_phase_outputs_.InternalSwap(&other->ffpilot_phase_outputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FFPilotPhaseOutputList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartPoint::InitAsDefaultInstance() {
}
class StartPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<StartPoint>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_successful_trajectories_launched_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_successful_trajectories_launched_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_failed_trajectories_launched_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_failed_trajectories_launched_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StartPoint::StartPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  species_coordinates_(arena),
  times_(arena),
  degree_advancements_(arena),
  successful_trajectory_end_points_(arena),
  failed_trajectory_end_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.ffpilot.StartPoint)
}
StartPoint::StartPoint(const StartPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      species_coordinates_(from.species_coordinates_),
      times_(from.times_),
      degree_advancements_(from.degree_advancements_),
      successful_trajectory_end_points_(from.successful_trajectory_end_points_),
      failed_trajectory_end_points_(from.failed_trajectory_end_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&failed_trajectories_launched_total_time_) -
    reinterpret_cast<char*>(&count_)) + sizeof(failed_trajectories_launched_total_time_));
  // @@protoc_insertion_point(copy_constructor:lm.io.ffpilot.StartPoint)
}

void StartPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_trajectories_launched_total_time_) -
      reinterpret_cast<char*>(&count_)) + sizeof(failed_trajectories_launched_total_time_));
}

StartPoint::~StartPoint() {
  // @@protoc_insertion_point(destructor:lm.io.ffpilot.StartPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartPoint::ArenaDtor(void* object) {
  StartPoint* _this = reinterpret_cast< StartPoint* >(object);
  (void)_this;
}
void StartPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPoint& StartPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base);
  return *internal_default_instance();
}


void StartPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.ffpilot.StartPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_coordinates_.Clear();
  times_.Clear();
  degree_advancements_.Clear();
  successful_trajectory_end_points_.Clear();
  failed_trajectory_end_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failed_trajectories_launched_total_time_) -
        reinterpret_cast<char*>(&count_)) + sizeof(failed_trajectories_launched_total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 species_coordinates = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_species_coordinates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_species_coordinates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double times = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_times(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint64 degree_advancements = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_degree_advancements(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_degree_advancements(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 successful_trajectories_launched_count = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_successful_trajectories_launched_count(&has_bits);
          successful_trajectories_launched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double successful_trajectories_launched_total_time = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_successful_trajectories_launched_total_time(&has_bits);
          successful_trajectories_launched_total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 failed_trajectories_launched_count = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_failed_trajectories_launched_count(&has_bits);
          failed_trajectories_launched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double failed_trajectories_launched_total_time = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_failed_trajectories_launched_total_time(&has_bits);
          failed_trajectories_launched_total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_successful_trajectory_end_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lm.io.ffpilot.EndPoint failed_trajectory_end_points = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_failed_trajectory_end_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.ffpilot.StartPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 species_coordinates = 1 [packed = true];
  {
    int byte_size = _species_coordinates_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_species_coordinates(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  // repeated double times = 3 [packed = true];
  if (this->_internal_times_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_times(), target);
  }

  // repeated uint64 degree_advancements = 4 [packed = true];
  {
    int byte_size = _degree_advancements_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_degree_advancements(), byte_size, target);
    }
  }

  // optional uint64 successful_trajectories_launched_count = 11 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_successful_trajectories_launched_count(), target);
  }

  // optional double successful_trajectories_launched_total_time = 12 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_successful_trajectories_launched_total_time(), target);
  }

  // optional uint64 failed_trajectories_launched_count = 13 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_failed_trajectories_launched_count(), target);
  }

  // optional double failed_trajectories_launched_total_time = 14 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_failed_trajectories_launched_total_time(), target);
  }

  // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_successful_trajectory_end_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_successful_trajectory_end_points(i), target, stream);
  }

  // repeated .lm.io.ffpilot.EndPoint failed_trajectory_end_points = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_failed_trajectory_end_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_failed_trajectory_end_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.ffpilot.StartPoint)
  return target;
}

size_t StartPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.ffpilot.StartPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 species_coordinates = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->species_coordinates_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _species_coordinates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double times = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_times_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 degree_advancements = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->degree_advancements_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _degree_advancements_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .lm.io.ffpilot.EndPoint successful_trajectory_end_points = 21;
  total_size += 2UL * this->_internal_successful_trajectory_end_points_size();
  for (const auto& msg : this->successful_trajectory_end_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lm.io.ffpilot.EndPoint failed_trajectory_end_points = 22;
  total_size += 2UL * this->_internal_failed_trajectory_end_points_size();
  for (const auto& msg : this->failed_trajectory_end_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 count = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count());
    }

    // optional uint64 successful_trajectories_launched_count = 11 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_successful_trajectories_launched_count());
    }

    // optional double successful_trajectories_launched_total_time = 12 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 failed_trajectories_launched_count = 13 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_failed_trajectories_launched_count());
    }

    // optional double failed_trajectories_launched_total_time = 14 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.ffpilot.StartPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const StartPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.ffpilot.StartPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.ffpilot.StartPoint)
    MergeFrom(*source);
  }
}

void StartPoint::MergeFrom(const StartPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.ffpilot.StartPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  species_coordinates_.MergeFrom(from.species_coordinates_);
  times_.MergeFrom(from.times_);
  degree_advancements_.MergeFrom(from.degree_advancements_);
  successful_trajectory_end_points_.MergeFrom(from.successful_trajectory_end_points_);
  failed_trajectory_end_points_.MergeFrom(from.failed_trajectory_end_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      successful_trajectories_launched_count_ = from.successful_trajectories_launched_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      successful_trajectories_launched_total_time_ = from.successful_trajectories_launched_total_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      failed_trajectories_launched_count_ = from.failed_trajectories_launched_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      failed_trajectories_launched_total_time_ = from.failed_trajectories_launched_total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.ffpilot.StartPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPoint::CopyFrom(const StartPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.ffpilot.StartPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPoint::IsInitialized() const {
  return true;
}

void StartPoint::InternalSwap(StartPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  species_coordinates_.InternalSwap(&other->species_coordinates_);
  times_.InternalSwap(&other->times_);
  degree_advancements_.InternalSwap(&other->degree_advancements_);
  successful_trajectory_end_points_.InternalSwap(&other->successful_trajectory_end_points_);
  failed_trajectory_end_points_.InternalSwap(&other->failed_trajectory_end_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartPoint, failed_trajectories_launched_total_time_)
      + sizeof(StartPoint::failed_trajectories_launched_total_time_)
      - PROTOBUF_FIELD_OFFSET(StartPoint, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndPoint::InitAsDefaultInstance() {
}
class EndPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<EndPoint>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EndPoint::EndPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  species_coordinates_(arena),
  times_(arena),
  degree_advancements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lm.io.ffpilot.EndPoint)
}
EndPoint::EndPoint(const EndPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      species_coordinates_(from.species_coordinates_),
      times_(from.times_),
      degree_advancements_(from.degree_advancements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:lm.io.ffpilot.EndPoint)
}

void EndPoint::SharedCtor() {
  count_ = PROTOBUF_ULONGLONG(0);
}

EndPoint::~EndPoint() {
  // @@protoc_insertion_point(destructor:lm.io.ffpilot.EndPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndPoint::ArenaDtor(void* object) {
  EndPoint* _this = reinterpret_cast< EndPoint* >(object);
  (void)_this;
}
void EndPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndPoint& EndPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndPoint_lm_2fio_2fffpilot_2fFFPilotPhaseOutput_2eproto.base);
  return *internal_default_instance();
}


void EndPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.io.ffpilot.EndPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_coordinates_.Clear();
  times_.Clear();
  degree_advancements_.Clear();
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 species_coordinates = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_species_coordinates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_species_coordinates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double times = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_times(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint64 degree_advancements = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_degree_advancements(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_degree_advancements(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.io.ffpilot.EndPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 species_coordinates = 1 [packed = true];
  {
    int byte_size = _species_coordinates_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_species_coordinates(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  // repeated double times = 3 [packed = true];
  if (this->_internal_times_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_times(), target);
  }

  // repeated uint64 degree_advancements = 4 [packed = true];
  {
    int byte_size = _degree_advancements_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_degree_advancements(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.io.ffpilot.EndPoint)
  return target;
}

size_t EndPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.io.ffpilot.EndPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 species_coordinates = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->species_coordinates_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _species_coordinates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double times = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_times_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 degree_advancements = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->degree_advancements_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _degree_advancements_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint64 count = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.io.ffpilot.EndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.io.ffpilot.EndPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.io.ffpilot.EndPoint)
    MergeFrom(*source);
  }
}

void EndPoint::MergeFrom(const EndPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.io.ffpilot.EndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  species_coordinates_.MergeFrom(from.species_coordinates_);
  times_.MergeFrom(from.times_);
  degree_advancements_.MergeFrom(from.degree_advancements_);
  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void EndPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.io.ffpilot.EndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPoint::CopyFrom(const EndPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.io.ffpilot.EndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPoint::IsInitialized() const {
  return true;
}

void EndPoint::InternalSwap(EndPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  species_coordinates_.InternalSwap(&other->species_coordinates_);
  times_.InternalSwap(&other->times_);
  degree_advancements_.InternalSwap(&other->degree_advancements_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lm::io::ffpilot::FFPilotPhaseOutput* Arena::CreateMaybeMessage< ::lm::io::ffpilot::FFPilotPhaseOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::ffpilot::FFPilotPhaseOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::io::ffpilot::FFPilotPhaseOutputList* Arena::CreateMaybeMessage< ::lm::io::ffpilot::FFPilotPhaseOutputList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::ffpilot::FFPilotPhaseOutputList >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::io::ffpilot::StartPoint* Arena::CreateMaybeMessage< ::lm::io::ffpilot::StartPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::ffpilot::StartPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::lm::io::ffpilot::EndPoint* Arena::CreateMaybeMessage< ::lm::io::ffpilot::EndPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lm::io::ffpilot::EndPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
