// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/ffpilot/FFPilotStageOutput.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "robertslab/pbuf/NDArray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto;
namespace lm {
namespace io {
namespace ffpilot {
class FFPilotStageOutput;
class FFPilotStageOutputDefaultTypeInternal;
extern FFPilotStageOutputDefaultTypeInternal _FFPilotStageOutput_default_instance_;
}  // namespace ffpilot
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::ffpilot::FFPilotStageOutput* Arena::CreateMaybeMessage<::lm::io::ffpilot::FFPilotStageOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {
namespace ffpilot {

enum FFPilotStageOutput_Direction : int {
  FFPilotStageOutput_Direction_FORWARD = 0,
  FFPilotStageOutput_Direction_BACKWARD = 1
};
bool FFPilotStageOutput_Direction_IsValid(int value);
constexpr FFPilotStageOutput_Direction FFPilotStageOutput_Direction_Direction_MIN = FFPilotStageOutput_Direction_FORWARD;
constexpr FFPilotStageOutput_Direction FFPilotStageOutput_Direction_Direction_MAX = FFPilotStageOutput_Direction_BACKWARD;
constexpr int FFPilotStageOutput_Direction_Direction_ARRAYSIZE = FFPilotStageOutput_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotStageOutput_Direction_descriptor();
template<typename T>
inline const std::string& FFPilotStageOutput_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FFPilotStageOutput_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FFPilotStageOutput_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FFPilotStageOutput_Direction_descriptor(), enum_t_value);
}
inline bool FFPilotStageOutput_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FFPilotStageOutput_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FFPilotStageOutput_Direction>(
    FFPilotStageOutput_Direction_descriptor(), name, value);
}
enum FFPilotStageOutput_Type : int {
  FFPilotStageOutput_Type_PILOT = 0,
  FFPilotStageOutput_Type_PRODUCTION = 1
};
bool FFPilotStageOutput_Type_IsValid(int value);
constexpr FFPilotStageOutput_Type FFPilotStageOutput_Type_Type_MIN = FFPilotStageOutput_Type_PILOT;
constexpr FFPilotStageOutput_Type FFPilotStageOutput_Type_Type_MAX = FFPilotStageOutput_Type_PRODUCTION;
constexpr int FFPilotStageOutput_Type_Type_ARRAYSIZE = FFPilotStageOutput_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFPilotStageOutput_Type_descriptor();
template<typename T>
inline const std::string& FFPilotStageOutput_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FFPilotStageOutput_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FFPilotStageOutput_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FFPilotStageOutput_Type_descriptor(), enum_t_value);
}
inline bool FFPilotStageOutput_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FFPilotStageOutput_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FFPilotStageOutput_Type>(
    FFPilotStageOutput_Type_descriptor(), name, value);
}
// ===================================================================

class FFPilotStageOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.ffpilot.FFPilotStageOutput) */ {
 public:
  inline FFPilotStageOutput() : FFPilotStageOutput(nullptr) {}
  virtual ~FFPilotStageOutput();

  FFPilotStageOutput(const FFPilotStageOutput& from);
  FFPilotStageOutput(FFPilotStageOutput&& from) noexcept
    : FFPilotStageOutput() {
    *this = ::std::move(from);
  }

  inline FFPilotStageOutput& operator=(const FFPilotStageOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline FFPilotStageOutput& operator=(FFPilotStageOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FFPilotStageOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FFPilotStageOutput* internal_default_instance() {
    return reinterpret_cast<const FFPilotStageOutput*>(
               &_FFPilotStageOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FFPilotStageOutput& a, FFPilotStageOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(FFPilotStageOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FFPilotStageOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FFPilotStageOutput* New() const final {
    return CreateMaybeMessage<FFPilotStageOutput>(nullptr);
  }

  FFPilotStageOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FFPilotStageOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FFPilotStageOutput& from);
  void MergeFrom(const FFPilotStageOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FFPilotStageOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.ffpilot.FFPilotStageOutput";
  }
  protected:
  explicit FFPilotStageOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto);
    return ::descriptor_table_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FFPilotStageOutput_Direction Direction;
  static constexpr Direction FORWARD =
    FFPilotStageOutput_Direction_FORWARD;
  static constexpr Direction BACKWARD =
    FFPilotStageOutput_Direction_BACKWARD;
  static inline bool Direction_IsValid(int value) {
    return FFPilotStageOutput_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    FFPilotStageOutput_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    FFPilotStageOutput_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    FFPilotStageOutput_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return FFPilotStageOutput_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return FFPilotStageOutput_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Direction* value) {
    return FFPilotStageOutput_Direction_Parse(name, value);
  }

  typedef FFPilotStageOutput_Type Type;
  static constexpr Type PILOT =
    FFPilotStageOutput_Type_PILOT;
  static constexpr Type PRODUCTION =
    FFPilotStageOutput_Type_PRODUCTION;
  static inline bool Type_IsValid(int value) {
    return FFPilotStageOutput_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    FFPilotStageOutput_Type_Type_MIN;
  static constexpr Type Type_MAX =
    FFPilotStageOutput_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    FFPilotStageOutput_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return FFPilotStageOutput_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return FFPilotStageOutput_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return FFPilotStageOutput_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 10,
    kTrajectoryCountsFieldNumber = 11,
    kCostsFieldNumber = 12,
    kWeightsFieldNumber = 13,
    kFirstPassageTimesFieldNumber = 14,
    kWeightVariancesFieldNumber = 15,
    kOptimizedTrajectoryCountsFieldNumber = 16,
    kIdFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // required .robertslab.pbuf.NDArray edges = 10;
  bool has_edges() const;
  private:
  bool _internal_has_edges() const;
  public:
  void clear_edges();
  const ::robertslab::pbuf::NDArray& edges() const;
  ::robertslab::pbuf::NDArray* release_edges();
  ::robertslab::pbuf::NDArray* mutable_edges();
  void set_allocated_edges(::robertslab::pbuf::NDArray* edges);
  private:
  const ::robertslab::pbuf::NDArray& _internal_edges() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_edges();
  public:
  void unsafe_arena_set_allocated_edges(
      ::robertslab::pbuf::NDArray* edges);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_edges();

  // required .robertslab.pbuf.NDArray trajectory_counts = 11;
  bool has_trajectory_counts() const;
  private:
  bool _internal_has_trajectory_counts() const;
  public:
  void clear_trajectory_counts();
  const ::robertslab::pbuf::NDArray& trajectory_counts() const;
  ::robertslab::pbuf::NDArray* release_trajectory_counts();
  ::robertslab::pbuf::NDArray* mutable_trajectory_counts();
  void set_allocated_trajectory_counts(::robertslab::pbuf::NDArray* trajectory_counts);
  private:
  const ::robertslab::pbuf::NDArray& _internal_trajectory_counts() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_trajectory_counts();
  public:
  void unsafe_arena_set_allocated_trajectory_counts(
      ::robertslab::pbuf::NDArray* trajectory_counts);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_trajectory_counts();

  // required .robertslab.pbuf.NDArray costs = 12;
  bool has_costs() const;
  private:
  bool _internal_has_costs() const;
  public:
  void clear_costs();
  const ::robertslab::pbuf::NDArray& costs() const;
  ::robertslab::pbuf::NDArray* release_costs();
  ::robertslab::pbuf::NDArray* mutable_costs();
  void set_allocated_costs(::robertslab::pbuf::NDArray* costs);
  private:
  const ::robertslab::pbuf::NDArray& _internal_costs() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_costs();
  public:
  void unsafe_arena_set_allocated_costs(
      ::robertslab::pbuf::NDArray* costs);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_costs();

  // required .robertslab.pbuf.NDArray weights = 13;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const ::robertslab::pbuf::NDArray& weights() const;
  ::robertslab::pbuf::NDArray* release_weights();
  ::robertslab::pbuf::NDArray* mutable_weights();
  void set_allocated_weights(::robertslab::pbuf::NDArray* weights);
  private:
  const ::robertslab::pbuf::NDArray& _internal_weights() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_weights();
  public:
  void unsafe_arena_set_allocated_weights(
      ::robertslab::pbuf::NDArray* weights);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_weights();

  // optional .robertslab.pbuf.NDArray first_passage_times = 14;
  bool has_first_passage_times() const;
  private:
  bool _internal_has_first_passage_times() const;
  public:
  void clear_first_passage_times();
  const ::robertslab::pbuf::NDArray& first_passage_times() const;
  ::robertslab::pbuf::NDArray* release_first_passage_times();
  ::robertslab::pbuf::NDArray* mutable_first_passage_times();
  void set_allocated_first_passage_times(::robertslab::pbuf::NDArray* first_passage_times);
  private:
  const ::robertslab::pbuf::NDArray& _internal_first_passage_times() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_first_passage_times();
  public:
  void unsafe_arena_set_allocated_first_passage_times(
      ::robertslab::pbuf::NDArray* first_passage_times);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_first_passage_times();

  // required .robertslab.pbuf.NDArray weight_variances = 15;
  bool has_weight_variances() const;
  private:
  bool _internal_has_weight_variances() const;
  public:
  void clear_weight_variances();
  const ::robertslab::pbuf::NDArray& weight_variances() const;
  ::robertslab::pbuf::NDArray* release_weight_variances();
  ::robertslab::pbuf::NDArray* mutable_weight_variances();
  void set_allocated_weight_variances(::robertslab::pbuf::NDArray* weight_variances);
  private:
  const ::robertslab::pbuf::NDArray& _internal_weight_variances() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_weight_variances();
  public:
  void unsafe_arena_set_allocated_weight_variances(
      ::robertslab::pbuf::NDArray* weight_variances);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_weight_variances();

  // optional .robertslab.pbuf.NDArray optimized_trajectory_counts = 16;
  bool has_optimized_trajectory_counts() const;
  private:
  bool _internal_has_optimized_trajectory_counts() const;
  public:
  void clear_optimized_trajectory_counts();
  const ::robertslab::pbuf::NDArray& optimized_trajectory_counts() const;
  ::robertslab::pbuf::NDArray* release_optimized_trajectory_counts();
  ::robertslab::pbuf::NDArray* mutable_optimized_trajectory_counts();
  void set_allocated_optimized_trajectory_counts(::robertslab::pbuf::NDArray* optimized_trajectory_counts);
  private:
  const ::robertslab::pbuf::NDArray& _internal_optimized_trajectory_counts() const;
  ::robertslab::pbuf::NDArray* _internal_mutable_optimized_trajectory_counts();
  public:
  void unsafe_arena_set_allocated_optimized_trajectory_counts(
      ::robertslab::pbuf::NDArray* optimized_trajectory_counts);
  ::robertslab::pbuf::NDArray* unsafe_arena_release_optimized_trajectory_counts();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .lm.io.ffpilot.FFPilotStageOutput.Direction direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::lm::io::ffpilot::FFPilotStageOutput_Direction direction() const;
  void set_direction(::lm::io::ffpilot::FFPilotStageOutput_Direction value);
  private:
  ::lm::io::ffpilot::FFPilotStageOutput_Direction _internal_direction() const;
  void _internal_set_direction(::lm::io::ffpilot::FFPilotStageOutput_Direction value);
  public:

  // required .lm.io.ffpilot.FFPilotStageOutput.Type type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::lm::io::ffpilot::FFPilotStageOutput_Type type() const;
  void set_type(::lm::io::ffpilot::FFPilotStageOutput_Type value);
  private:
  ::lm::io::ffpilot::FFPilotStageOutput_Type _internal_type() const;
  void _internal_set_type(::lm::io::ffpilot::FFPilotStageOutput_Type value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.ffpilot.FFPilotStageOutput)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::robertslab::pbuf::NDArray* edges_;
  ::robertslab::pbuf::NDArray* trajectory_counts_;
  ::robertslab::pbuf::NDArray* costs_;
  ::robertslab::pbuf::NDArray* weights_;
  ::robertslab::pbuf::NDArray* first_passage_times_;
  ::robertslab::pbuf::NDArray* weight_variances_;
  ::robertslab::pbuf::NDArray* optimized_trajectory_counts_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int direction_;
  int type_;
  friend struct ::TableStruct_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FFPilotStageOutput

// required int32 id = 1;
inline bool FFPilotStageOutput::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FFPilotStageOutput::has_id() const {
  return _internal_has_id();
}
inline void FFPilotStageOutput::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotStageOutput::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FFPilotStageOutput::id() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.id)
  return _internal_id();
}
inline void FFPilotStageOutput::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void FFPilotStageOutput::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotStageOutput.id)
}

// required .lm.io.ffpilot.FFPilotStageOutput.Direction direction = 2;
inline bool FFPilotStageOutput::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FFPilotStageOutput::has_direction() const {
  return _internal_has_direction();
}
inline void FFPilotStageOutput::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::lm::io::ffpilot::FFPilotStageOutput_Direction FFPilotStageOutput::_internal_direction() const {
  return static_cast< ::lm::io::ffpilot::FFPilotStageOutput_Direction >(direction_);
}
inline ::lm::io::ffpilot::FFPilotStageOutput_Direction FFPilotStageOutput::direction() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.direction)
  return _internal_direction();
}
inline void FFPilotStageOutput::_internal_set_direction(::lm::io::ffpilot::FFPilotStageOutput_Direction value) {
  assert(::lm::io::ffpilot::FFPilotStageOutput_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  direction_ = value;
}
inline void FFPilotStageOutput::set_direction(::lm::io::ffpilot::FFPilotStageOutput_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotStageOutput.direction)
}

// required .lm.io.ffpilot.FFPilotStageOutput.Type type = 3;
inline bool FFPilotStageOutput::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FFPilotStageOutput::has_type() const {
  return _internal_has_type();
}
inline void FFPilotStageOutput::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::lm::io::ffpilot::FFPilotStageOutput_Type FFPilotStageOutput::_internal_type() const {
  return static_cast< ::lm::io::ffpilot::FFPilotStageOutput_Type >(type_);
}
inline ::lm::io::ffpilot::FFPilotStageOutput_Type FFPilotStageOutput::type() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.type)
  return _internal_type();
}
inline void FFPilotStageOutput::_internal_set_type(::lm::io::ffpilot::FFPilotStageOutput_Type value) {
  assert(::lm::io::ffpilot::FFPilotStageOutput_Type_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void FFPilotStageOutput::set_type(::lm::io::ffpilot::FFPilotStageOutput_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lm.io.ffpilot.FFPilotStageOutput.type)
}

// required .robertslab.pbuf.NDArray edges = 10;
inline bool FFPilotStageOutput::_internal_has_edges() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || edges_ != nullptr);
  return value;
}
inline bool FFPilotStageOutput::has_edges() const {
  return _internal_has_edges();
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::_internal_edges() const {
  const ::robertslab::pbuf::NDArray* p = edges_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::edges() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.edges)
  return _internal_edges();
}
inline void FFPilotStageOutput::unsafe_arena_set_allocated_edges(
    ::robertslab::pbuf::NDArray* edges) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges_);
  }
  edges_ = edges;
  if (edges) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotStageOutput.edges)
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::release_edges() {
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = edges_;
  edges_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::unsafe_arena_release_edges() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotStageOutput.edges)
  _has_bits_[0] &= ~0x00000001u;
  ::robertslab::pbuf::NDArray* temp = edges_;
  edges_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::_internal_mutable_edges() {
  _has_bits_[0] |= 0x00000001u;
  if (edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    edges_ = p;
  }
  return edges_;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::mutable_edges() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotStageOutput.edges)
  return _internal_mutable_edges();
}
inline void FFPilotStageOutput::set_allocated_edges(::robertslab::pbuf::NDArray* edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges_);
  }
  if (edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges)->GetArena();
    if (message_arena != submessage_arena) {
      edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edges, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  edges_ = edges;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotStageOutput.edges)
}

// required .robertslab.pbuf.NDArray trajectory_counts = 11;
inline bool FFPilotStageOutput::_internal_has_trajectory_counts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || trajectory_counts_ != nullptr);
  return value;
}
inline bool FFPilotStageOutput::has_trajectory_counts() const {
  return _internal_has_trajectory_counts();
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::_internal_trajectory_counts() const {
  const ::robertslab::pbuf::NDArray* p = trajectory_counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::trajectory_counts() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.trajectory_counts)
  return _internal_trajectory_counts();
}
inline void FFPilotStageOutput::unsafe_arena_set_allocated_trajectory_counts(
    ::robertslab::pbuf::NDArray* trajectory_counts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_counts_);
  }
  trajectory_counts_ = trajectory_counts;
  if (trajectory_counts) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotStageOutput.trajectory_counts)
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::release_trajectory_counts() {
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = trajectory_counts_;
  trajectory_counts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::unsafe_arena_release_trajectory_counts() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotStageOutput.trajectory_counts)
  _has_bits_[0] &= ~0x00000002u;
  ::robertslab::pbuf::NDArray* temp = trajectory_counts_;
  trajectory_counts_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::_internal_mutable_trajectory_counts() {
  _has_bits_[0] |= 0x00000002u;
  if (trajectory_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    trajectory_counts_ = p;
  }
  return trajectory_counts_;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::mutable_trajectory_counts() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotStageOutput.trajectory_counts)
  return _internal_mutable_trajectory_counts();
}
inline void FFPilotStageOutput::set_allocated_trajectory_counts(::robertslab::pbuf::NDArray* trajectory_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_counts_);
  }
  if (trajectory_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_counts)->GetArena();
    if (message_arena != submessage_arena) {
      trajectory_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trajectory_counts_ = trajectory_counts;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotStageOutput.trajectory_counts)
}

// required .robertslab.pbuf.NDArray costs = 12;
inline bool FFPilotStageOutput::_internal_has_costs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || costs_ != nullptr);
  return value;
}
inline bool FFPilotStageOutput::has_costs() const {
  return _internal_has_costs();
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::_internal_costs() const {
  const ::robertslab::pbuf::NDArray* p = costs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::costs() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.costs)
  return _internal_costs();
}
inline void FFPilotStageOutput::unsafe_arena_set_allocated_costs(
    ::robertslab::pbuf::NDArray* costs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(costs_);
  }
  costs_ = costs;
  if (costs) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotStageOutput.costs)
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::release_costs() {
  _has_bits_[0] &= ~0x00000004u;
  ::robertslab::pbuf::NDArray* temp = costs_;
  costs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::unsafe_arena_release_costs() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotStageOutput.costs)
  _has_bits_[0] &= ~0x00000004u;
  ::robertslab::pbuf::NDArray* temp = costs_;
  costs_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::_internal_mutable_costs() {
  _has_bits_[0] |= 0x00000004u;
  if (costs_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    costs_ = p;
  }
  return costs_;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::mutable_costs() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotStageOutput.costs)
  return _internal_mutable_costs();
}
inline void FFPilotStageOutput::set_allocated_costs(::robertslab::pbuf::NDArray* costs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(costs_);
  }
  if (costs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(costs)->GetArena();
    if (message_arena != submessage_arena) {
      costs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, costs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  costs_ = costs;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotStageOutput.costs)
}

// required .robertslab.pbuf.NDArray weights = 13;
inline bool FFPilotStageOutput::_internal_has_weights() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || weights_ != nullptr);
  return value;
}
inline bool FFPilotStageOutput::has_weights() const {
  return _internal_has_weights();
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::_internal_weights() const {
  const ::robertslab::pbuf::NDArray* p = weights_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::weights() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.weights)
  return _internal_weights();
}
inline void FFPilotStageOutput::unsafe_arena_set_allocated_weights(
    ::robertslab::pbuf::NDArray* weights) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights_);
  }
  weights_ = weights;
  if (weights) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotStageOutput.weights)
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::release_weights() {
  _has_bits_[0] &= ~0x00000008u;
  ::robertslab::pbuf::NDArray* temp = weights_;
  weights_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::unsafe_arena_release_weights() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotStageOutput.weights)
  _has_bits_[0] &= ~0x00000008u;
  ::robertslab::pbuf::NDArray* temp = weights_;
  weights_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::_internal_mutable_weights() {
  _has_bits_[0] |= 0x00000008u;
  if (weights_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    weights_ = p;
  }
  return weights_;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::mutable_weights() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotStageOutput.weights)
  return _internal_mutable_weights();
}
inline void FFPilotStageOutput::set_allocated_weights(::robertslab::pbuf::NDArray* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights_);
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights)->GetArena();
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotStageOutput.weights)
}

// required .robertslab.pbuf.NDArray weight_variances = 15;
inline bool FFPilotStageOutput::_internal_has_weight_variances() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || weight_variances_ != nullptr);
  return value;
}
inline bool FFPilotStageOutput::has_weight_variances() const {
  return _internal_has_weight_variances();
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::_internal_weight_variances() const {
  const ::robertslab::pbuf::NDArray* p = weight_variances_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::weight_variances() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.weight_variances)
  return _internal_weight_variances();
}
inline void FFPilotStageOutput::unsafe_arena_set_allocated_weight_variances(
    ::robertslab::pbuf::NDArray* weight_variances) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_variances_);
  }
  weight_variances_ = weight_variances;
  if (weight_variances) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotStageOutput.weight_variances)
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::release_weight_variances() {
  _has_bits_[0] &= ~0x00000020u;
  ::robertslab::pbuf::NDArray* temp = weight_variances_;
  weight_variances_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::unsafe_arena_release_weight_variances() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotStageOutput.weight_variances)
  _has_bits_[0] &= ~0x00000020u;
  ::robertslab::pbuf::NDArray* temp = weight_variances_;
  weight_variances_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::_internal_mutable_weight_variances() {
  _has_bits_[0] |= 0x00000020u;
  if (weight_variances_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    weight_variances_ = p;
  }
  return weight_variances_;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::mutable_weight_variances() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotStageOutput.weight_variances)
  return _internal_mutable_weight_variances();
}
inline void FFPilotStageOutput::set_allocated_weight_variances(::robertslab::pbuf::NDArray* weight_variances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_variances_);
  }
  if (weight_variances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_variances)->GetArena();
    if (message_arena != submessage_arena) {
      weight_variances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_variances, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  weight_variances_ = weight_variances;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotStageOutput.weight_variances)
}

// optional .robertslab.pbuf.NDArray optimized_trajectory_counts = 16;
inline bool FFPilotStageOutput::_internal_has_optimized_trajectory_counts() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || optimized_trajectory_counts_ != nullptr);
  return value;
}
inline bool FFPilotStageOutput::has_optimized_trajectory_counts() const {
  return _internal_has_optimized_trajectory_counts();
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::_internal_optimized_trajectory_counts() const {
  const ::robertslab::pbuf::NDArray* p = optimized_trajectory_counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::optimized_trajectory_counts() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.optimized_trajectory_counts)
  return _internal_optimized_trajectory_counts();
}
inline void FFPilotStageOutput::unsafe_arena_set_allocated_optimized_trajectory_counts(
    ::robertslab::pbuf::NDArray* optimized_trajectory_counts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimized_trajectory_counts_);
  }
  optimized_trajectory_counts_ = optimized_trajectory_counts;
  if (optimized_trajectory_counts) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotStageOutput.optimized_trajectory_counts)
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::release_optimized_trajectory_counts() {
  _has_bits_[0] &= ~0x00000040u;
  ::robertslab::pbuf::NDArray* temp = optimized_trajectory_counts_;
  optimized_trajectory_counts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::unsafe_arena_release_optimized_trajectory_counts() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotStageOutput.optimized_trajectory_counts)
  _has_bits_[0] &= ~0x00000040u;
  ::robertslab::pbuf::NDArray* temp = optimized_trajectory_counts_;
  optimized_trajectory_counts_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::_internal_mutable_optimized_trajectory_counts() {
  _has_bits_[0] |= 0x00000040u;
  if (optimized_trajectory_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    optimized_trajectory_counts_ = p;
  }
  return optimized_trajectory_counts_;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::mutable_optimized_trajectory_counts() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotStageOutput.optimized_trajectory_counts)
  return _internal_mutable_optimized_trajectory_counts();
}
inline void FFPilotStageOutput::set_allocated_optimized_trajectory_counts(::robertslab::pbuf::NDArray* optimized_trajectory_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimized_trajectory_counts_);
  }
  if (optimized_trajectory_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimized_trajectory_counts)->GetArena();
    if (message_arena != submessage_arena) {
      optimized_trajectory_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimized_trajectory_counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  optimized_trajectory_counts_ = optimized_trajectory_counts;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotStageOutput.optimized_trajectory_counts)
}

// optional .robertslab.pbuf.NDArray first_passage_times = 14;
inline bool FFPilotStageOutput::_internal_has_first_passage_times() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || first_passage_times_ != nullptr);
  return value;
}
inline bool FFPilotStageOutput::has_first_passage_times() const {
  return _internal_has_first_passage_times();
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::_internal_first_passage_times() const {
  const ::robertslab::pbuf::NDArray* p = first_passage_times_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robertslab::pbuf::NDArray*>(
      &::robertslab::pbuf::_NDArray_default_instance_);
}
inline const ::robertslab::pbuf::NDArray& FFPilotStageOutput::first_passage_times() const {
  // @@protoc_insertion_point(field_get:lm.io.ffpilot.FFPilotStageOutput.first_passage_times)
  return _internal_first_passage_times();
}
inline void FFPilotStageOutput::unsafe_arena_set_allocated_first_passage_times(
    ::robertslab::pbuf::NDArray* first_passage_times) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_passage_times_);
  }
  first_passage_times_ = first_passage_times;
  if (first_passage_times) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lm.io.ffpilot.FFPilotStageOutput.first_passage_times)
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::release_first_passage_times() {
  _has_bits_[0] &= ~0x00000010u;
  ::robertslab::pbuf::NDArray* temp = first_passage_times_;
  first_passage_times_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::unsafe_arena_release_first_passage_times() {
  // @@protoc_insertion_point(field_release:lm.io.ffpilot.FFPilotStageOutput.first_passage_times)
  _has_bits_[0] &= ~0x00000010u;
  ::robertslab::pbuf::NDArray* temp = first_passage_times_;
  first_passage_times_ = nullptr;
  return temp;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::_internal_mutable_first_passage_times() {
  _has_bits_[0] |= 0x00000010u;
  if (first_passage_times_ == nullptr) {
    auto* p = CreateMaybeMessage<::robertslab::pbuf::NDArray>(GetArena());
    first_passage_times_ = p;
  }
  return first_passage_times_;
}
inline ::robertslab::pbuf::NDArray* FFPilotStageOutput::mutable_first_passage_times() {
  // @@protoc_insertion_point(field_mutable:lm.io.ffpilot.FFPilotStageOutput.first_passage_times)
  return _internal_mutable_first_passage_times();
}
inline void FFPilotStageOutput::set_allocated_first_passage_times(::robertslab::pbuf::NDArray* first_passage_times) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_passage_times_);
  }
  if (first_passage_times) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_passage_times)->GetArena();
    if (message_arena != submessage_arena) {
      first_passage_times = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_passage_times, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  first_passage_times_ = first_passage_times;
  // @@protoc_insertion_point(field_set_allocated:lm.io.ffpilot.FFPilotStageOutput.first_passage_times)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ffpilot
}  // namespace io
}  // namespace lm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lm::io::ffpilot::FFPilotStageOutput_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::io::ffpilot::FFPilotStageOutput_Direction>() {
  return ::lm::io::ffpilot::FFPilotStageOutput_Direction_descriptor();
}
template <> struct is_proto_enum< ::lm::io::ffpilot::FFPilotStageOutput_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::io::ffpilot::FFPilotStageOutput_Type>() {
  return ::lm::io::ffpilot::FFPilotStageOutput_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fffpilot_2fFFPilotStageOutput_2eproto
