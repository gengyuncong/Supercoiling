// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm/io/TilingHist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fTilingHist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fTilingHist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lm_2fio_2fTilingHist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lm_2fio_2fTilingHist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lm_2fio_2fTilingHist_2eproto;
namespace lm {
namespace io {
class TilingHist;
class TilingHistDefaultTypeInternal;
extern TilingHistDefaultTypeInternal _TilingHist_default_instance_;
}  // namespace io
}  // namespace lm
PROTOBUF_NAMESPACE_OPEN
template<> ::lm::io::TilingHist* Arena::CreateMaybeMessage<::lm::io::TilingHist>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lm {
namespace io {

// ===================================================================

class TilingHist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lm.io.TilingHist) */ {
 public:
  inline TilingHist() : TilingHist(nullptr) {}
  virtual ~TilingHist();

  TilingHist(const TilingHist& from);
  TilingHist(TilingHist&& from) noexcept
    : TilingHist() {
    *this = ::std::move(from);
  }

  inline TilingHist& operator=(const TilingHist& from) {
    CopyFrom(from);
    return *this;
  }
  inline TilingHist& operator=(TilingHist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TilingHist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TilingHist* internal_default_instance() {
    return reinterpret_cast<const TilingHist*>(
               &_TilingHist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TilingHist& a, TilingHist& b) {
    a.Swap(&b);
  }
  inline void Swap(TilingHist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TilingHist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TilingHist* New() const final {
    return CreateMaybeMessage<TilingHist>(nullptr);
  }

  TilingHist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TilingHist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TilingHist& from);
  void MergeFrom(const TilingHist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TilingHist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lm.io.TilingHist";
  }
  protected:
  explicit TilingHist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lm_2fio_2fTilingHist_2eproto);
    return ::descriptor_table_lm_2fio_2fTilingHist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileIndicesFieldNumber = 3,
    kTileValsFieldNumber = 4,
    kNumberTilesFieldNumber = 1,
    kTilingIdFieldNumber = 2,
  };
  // repeated uint32 tile_indices = 3 [packed = true];
  int tile_indices_size() const;
  private:
  int _internal_tile_indices_size() const;
  public:
  void clear_tile_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tile_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tile_indices() const;
  void _internal_add_tile_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tile_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_indices(int index) const;
  void set_tile_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tile_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tile_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tile_indices();

  // repeated double tile_vals = 4 [packed = true];
  int tile_vals_size() const;
  private:
  int _internal_tile_vals_size() const;
  public:
  void clear_tile_vals();
  private:
  double _internal_tile_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_tile_vals() const;
  void _internal_add_tile_vals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_tile_vals();
  public:
  double tile_vals(int index) const;
  void set_tile_vals(int index, double value);
  void add_tile_vals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      tile_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_tile_vals();

  // optional uint64 number_tiles = 1 [default = 0];
  bool has_number_tiles() const;
  private:
  bool _internal_has_number_tiles() const;
  public:
  void clear_number_tiles();
  ::PROTOBUF_NAMESPACE_ID::uint64 number_tiles() const;
  void set_number_tiles(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number_tiles() const;
  void _internal_set_number_tiles(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 tiling_id = 2 [default = 0];
  bool has_tiling_id() const;
  private:
  bool _internal_has_tiling_id() const;
  public:
  void clear_tiling_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tiling_id() const;
  void set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tiling_id() const;
  void _internal_set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lm.io.TilingHist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tile_indices_;
  mutable std::atomic<int> _tile_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > tile_vals_;
  mutable std::atomic<int> _tile_vals_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_tiles_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tiling_id_;
  friend struct ::TableStruct_lm_2fio_2fTilingHist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TilingHist

// optional uint64 number_tiles = 1 [default = 0];
inline bool TilingHist::_internal_has_number_tiles() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TilingHist::has_number_tiles() const {
  return _internal_has_number_tiles();
}
inline void TilingHist::clear_number_tiles() {
  number_tiles_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TilingHist::_internal_number_tiles() const {
  return number_tiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TilingHist::number_tiles() const {
  // @@protoc_insertion_point(field_get:lm.io.TilingHist.number_tiles)
  return _internal_number_tiles();
}
inline void TilingHist::_internal_set_number_tiles(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  number_tiles_ = value;
}
inline void TilingHist::set_number_tiles(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number_tiles(value);
  // @@protoc_insertion_point(field_set:lm.io.TilingHist.number_tiles)
}

// optional uint32 tiling_id = 2 [default = 0];
inline bool TilingHist::_internal_has_tiling_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TilingHist::has_tiling_id() const {
  return _internal_has_tiling_id();
}
inline void TilingHist::clear_tiling_id() {
  tiling_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TilingHist::_internal_tiling_id() const {
  return tiling_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TilingHist::tiling_id() const {
  // @@protoc_insertion_point(field_get:lm.io.TilingHist.tiling_id)
  return _internal_tiling_id();
}
inline void TilingHist::_internal_set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tiling_id_ = value;
}
inline void TilingHist::set_tiling_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tiling_id(value);
  // @@protoc_insertion_point(field_set:lm.io.TilingHist.tiling_id)
}

// repeated uint32 tile_indices = 3 [packed = true];
inline int TilingHist::_internal_tile_indices_size() const {
  return tile_indices_.size();
}
inline int TilingHist::tile_indices_size() const {
  return _internal_tile_indices_size();
}
inline void TilingHist::clear_tile_indices() {
  tile_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TilingHist::_internal_tile_indices(int index) const {
  return tile_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TilingHist::tile_indices(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.TilingHist.tile_indices)
  return _internal_tile_indices(index);
}
inline void TilingHist::set_tile_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tile_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.TilingHist.tile_indices)
}
inline void TilingHist::_internal_add_tile_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tile_indices_.Add(value);
}
inline void TilingHist::add_tile_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tile_indices(value);
  // @@protoc_insertion_point(field_add:lm.io.TilingHist.tile_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TilingHist::_internal_tile_indices() const {
  return tile_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TilingHist::tile_indices() const {
  // @@protoc_insertion_point(field_list:lm.io.TilingHist.tile_indices)
  return _internal_tile_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TilingHist::_internal_mutable_tile_indices() {
  return &tile_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TilingHist::mutable_tile_indices() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.TilingHist.tile_indices)
  return _internal_mutable_tile_indices();
}

// repeated double tile_vals = 4 [packed = true];
inline int TilingHist::_internal_tile_vals_size() const {
  return tile_vals_.size();
}
inline int TilingHist::tile_vals_size() const {
  return _internal_tile_vals_size();
}
inline void TilingHist::clear_tile_vals() {
  tile_vals_.Clear();
}
inline double TilingHist::_internal_tile_vals(int index) const {
  return tile_vals_.Get(index);
}
inline double TilingHist::tile_vals(int index) const {
  // @@protoc_insertion_point(field_get:lm.io.TilingHist.tile_vals)
  return _internal_tile_vals(index);
}
inline void TilingHist::set_tile_vals(int index, double value) {
  tile_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:lm.io.TilingHist.tile_vals)
}
inline void TilingHist::_internal_add_tile_vals(double value) {
  tile_vals_.Add(value);
}
inline void TilingHist::add_tile_vals(double value) {
  _internal_add_tile_vals(value);
  // @@protoc_insertion_point(field_add:lm.io.TilingHist.tile_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TilingHist::_internal_tile_vals() const {
  return tile_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TilingHist::tile_vals() const {
  // @@protoc_insertion_point(field_list:lm.io.TilingHist.tile_vals)
  return _internal_tile_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TilingHist::_internal_mutable_tile_vals() {
  return &tile_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TilingHist::mutable_tile_vals() {
  // @@protoc_insertion_point(field_mutable_list:lm.io.TilingHist.tile_vals)
  return _internal_mutable_tile_vals();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace lm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lm_2fio_2fTilingHist_2eproto
