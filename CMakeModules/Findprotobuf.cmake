# Locate and configure the Google Protocol Buffers library.
#
# The following variables can be set and are optional:
#
#   PROTOBUF_SRC_ROOT_FOLDER - When compiling with MSVC, if this cache variable is set
#                              the protobuf-default VS project build locations
#                              (vsprojects/Debug & vsprojects/Release) will be searched
#                              for libraries and binaries.
#
#   PROTOBUF_IMPORT_DIRS     - List of additional directories to be searched for
#                              imported .proto files. (New in CMake 2.8.8)
#
# Defines the following variables:
#
#   PROTOBUF_FOUND - Found the Google Protocol Buffers library (libprotobuf & header files)
#   PROTOBUF_INCLUDE_DIRS - Include directories for Google Protocol Buffers
#   PROTOBUF_LIBRARIES - The protobuf libraries
# [New in CMake 2.8.5]
#   PROTOBUF_PROTOC_LIBRARIES - The protoc libraries
#   PROTOBUF_LITE_LIBRARIES - The protobuf-lite libraries
#
# The following cache variables are also available to set or use:
#   PROTOBUF_LIBRARY - The protobuf library
#   PROTOBUF_PROTOC_LIBRARY   - The protoc library
#   PROTOBUF_INCLUDE_DIR - The include directory for protocol buffers
#   PROTOBUF_PROTOC_EXECUTABLE - The protoc compiler
# [New in CMake 2.8.5]
#   PROTOBUF_LIBRARY_DEBUG - The protobuf library (debug)
#   PROTOBUF_PROTOC_LIBRARY_DEBUG   - The protoc library (debug)
#   PROTOBUF_LITE_LIBRARY - The protobuf lite library
#   PROTOBUF_LITE_LIBRARY_DEBUG - The protobuf lite library (debug)
#
#  ====================================================================
#  Example:
#
#   find_package(Protobuf REQUIRED)
#   include_directories(${PROTOBUF_INCLUDE_DIRS})
#
#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
#   PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)
#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})
#   target_link_libraries(bar ${PROTOBUF_LIBRARIES})
#
# NOTE: You may need to link against pthreads, depending
#       on the platform.
#
# NOTE: The PROTOBUF_GENERATE_CPP macro & add_executable() or add_library()
#       calls only work properly within the same directory.
#
#  ====================================================================
#
# PROTOBUF_GENERATE_CPP (public function)
#   SRCS = Variable to define with autogenerated
#          source files
#   HDRS = Variable to define with autogenerated
#          header files
#   ARGN = proto files
#
#  ====================================================================


#=============================================================================
# Copyright 2009 Kitware, Inc.
# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>
# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distribute this file outside of CMake, substitute the full
#  License text for the above reference.)

function(PROTOBUF_GENERATE_CPP SRCS HDRS)
  if(NOT ARGN)
    message(SEND_ERROR "Error: PROTOBUF_GENERATE_CPP() called without any proto files")
    return()
  endif()

  if(PROTOBUF_GENERATE_CPP_APPEND_PATH)
    #the following loop is commented out so that protoc doesn't become confused with different relative paths to the same .proto files in order to allow for complex paths for generated .pb.cc and .pb.h files
#    #Create an include path for each file specified
#    foreach(FIL ${ARGN})
#      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
#      get_filename_component(ABS_PATH ${ABS_FIL} PATH)
#      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
#      if(${_contains_already} EQUAL -1)
#          list(APPEND _protobuf_include_path -I ${ABS_PATH})
#      endif()
#    endforeach()
    #these eight lines are custom changes to allow for complex paths for generated .pb.cc and .pb.h files
    list(GET ARGN 0 FIL)
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(ABS_PATH ${ABS_FIL} PATH)
    string(REGEX REPLACE "(.*/protobuf/).*" "\\1" PROTOBUF_ROOT_DIR ${ABS_PATH})
    list(FIND _protobuf_include_path ${PROTOBUF_ROOT_DIR} _contains_already)
    if(${_contains_already} EQUAL -1)
        list(APPEND _protobuf_include_path  -I${PROTOBUF_ROOT_DIR})
    endif()
  else()
    set(_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  if(DEFINED PROTOBUF_IMPORT_DIRS)
    foreach(DIR ${PROTOBUF_IMPORT_DIRS})
      get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  endif()

  set(${SRCS})
  set(${HDRS})
  #the following loop has extensive custom changes to allow for complex paths for generated .pb.cc and .pb.h files
  foreach(FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(ABS_DIR ${FIL} PATH)
    get_filename_component(FIL_WE ${FIL} NAME_WE)

    string(REGEX REPLACE ".*/protobuf(.*)" "\\1" REL_PATH "${ABS_DIR}")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}")
    list(APPEND ${SRCS} "${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}/${FIL_WE}.pb.cc")
    list(APPEND ${HDRS} "${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}/${FIL_WE}.pb.h")
    list(APPEND ABS_FILS  ${ABS_FIL})
  endforeach()
  add_custom_command(
  OUTPUT ${${SRCS}}#"${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}/${FIL_WE}.pb.cc"
         ${${HDRS}}#"${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}/${FIL_WE}.pb.h"
  COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}
  ARGS --cpp_out ${CMAKE_CURRENT_BINARY_DIR} ${_protobuf_include_path} ${ABS_FILS}
  DEPENDS ${ABS_FILS}
  COMMENT "Running C++ protocol buffer compiler on ${ABS_FILS}"
  VERBATIM )

  set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()

# mostly copy-paste of PROTOBUF_GENERATE_CPP
function(PROTOBUF_GENERATE_PYTHON PB2S)
  if(NOT ARGN)
    message(SEND_ERROR "Error: PROTOBUF_GENERATE_PYTHON() called without any proto files")
    return()
  endif()

  if(PROTOBUF_GENERATE_CPP_APPEND_PATH)
    list(GET ARGN 0 FIL)
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(ABS_PATH ${ABS_FIL} PATH)
    string(REGEX REPLACE "(.*/protobuf/).*" "\\1" PROTOBUF_ROOT_DIR ${ABS_PATH})
    list(FIND _protobuf_include_path ${PROTOBUF_ROOT_DIR} _contains_already)
    if(${_contains_already} EQUAL -1)
        list(APPEND _protobuf_include_path  -I${PROTOBUF_ROOT_DIR})
    endif()
  else()
    set(_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  if(DEFINED PROTOBUF_IMPORT_DIRS)
    foreach(DIR ${PROTOBUF_IMPORT_DIRS})
      get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  endif()

  set(${PB2S})
  #the following loop has extensive custom changes to allow for complex paths for generated .pb.cc and .pb.h files
  foreach(FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(ABS_DIR ${FIL} PATH)
    get_filename_component(FIL_WE ${FIL} NAME_WE)

    string(REGEX REPLACE ".*/protobuf(.*)" "\\1" REL_PATH "${ABS_DIR}")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}")
    list(APPEND ${PB2S} "${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}/${FIL_WE}_pb2.py")
    list(APPEND ABS_FILS  ${ABS_FIL})
  endforeach()
  add_custom_command(
  OUTPUT ${${PB2S}}    #"${CMAKE_CURRENT_BINARY_DIR}${REL_PATH}/${FIL_WE}_pb2.py"
  COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}
  ARGS --python_out ${CMAKE_CURRENT_BINARY_DIR} ${_protobuf_include_path} ${ABS_FILS}
  DEPENDS ${ABS_FILS}
  COMMENT "Running python protocol buffer compiler on ${ABS_FILS}"
  VERBATIM )

  set_source_files_properties(${${PB2S}} PROPERTIES GENERATED TRUE)
  set(${PB2S} ${${PB2S}} PARENT_SCOPE)
endfunction()

# Internal function: search for normal library as well as a debug one
#    if the debug one is specified also include debug/optimized keywords
#    in *_LIBRARIES variable
function(_protobuf_find_libraries name filename)
   find_library(${name}_LIBRARY
       NAMES ${filename}
       HINTS ${PROTOBUF_ROOT}/lib
       PATHS ${PROTOBUF_ROOT}/lib ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release)
   mark_as_advanced(${name}_LIBRARY)

   find_library(${name}_LIBRARY_DEBUG
       NAMES ${filename}
       HINTS ${PROTOBUF_ROOT}/lib
       PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug)
   mark_as_advanced(${name}_LIBRARY_DEBUG)

   if(NOT ${name}_LIBRARY_DEBUG)
      # There is no debug library
      set(${name}_LIBRARY_DEBUG ${${name}_LIBRARY} PARENT_SCOPE)
      set(${name}_LIBRARIES     ${${name}_LIBRARY} PARENT_SCOPE)
   else()
      # There IS a debug library
      set(${name}_LIBRARIES
          optimized ${${name}_LIBRARY}
          debug     ${${name}_LIBRARY_DEBUG}
          PARENT_SCOPE
      )
   endif()
endfunction()

# Internal function: find threads library
function(_protobuf_find_threads)
    set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
    find_package(Threads)
    if(Threads_FOUND)
        list(APPEND PROTOBUF_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
        set(PROTOBUF_LIBRARIES "${PROTOBUF_LIBRARIES}" PARENT_SCOPE)
    endif()
endfunction()

#
# Main.
#

# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc
# for each directory where a proto file is referenced.
if(NOT DEFINED PROTOBUF_GENERATE_CPP_APPEND_PATH)
  set(PROTOBUF_GENERATE_CPP_APPEND_PATH TRUE)
endif()


# Google's provided vcproj files generate libraries with a "lib"
# prefix on Windows
if(MSVC)
    set(PROTOBUF_ORIG_FIND_LIBRARY_PREFIXES "${CMAKE_FIND_LIBRARY_PREFIXES}")
    set(CMAKE_FIND_LIBRARY_PREFIXES "lib" "")

    find_path(PROTOBUF_SRC_ROOT_FOLDER protobuf.pc.in)
endif()

# The Protobuf library
_protobuf_find_libraries(PROTOBUF protobuf)
#DOC "The Google Protocol Buffers RELEASE Library"

_protobuf_find_libraries(PROTOBUF_LITE protobuf-lite)

# The Protobuf Protoc Library
_protobuf_find_libraries(PROTOBUF_PROTOC protoc)

# Restore original find library prefixes
if(MSVC)
    set(CMAKE_FIND_LIBRARY_PREFIXES "${PROTOBUF_ORIG_FIND_LIBRARY_PREFIXES}")
endif()

if(UNIX)
    _protobuf_find_threads()
endif()

# Find the include directory
find_path(PROTOBUF_INCLUDE_DIR
    google/protobuf/service.h
    HINTS ${PROTOBUF_ROOT}/include
    PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/src
)
mark_as_advanced(PROTOBUF_INCLUDE_DIR)

# Find the protoc Executable
find_program(PROTOBUF_PROTOC_EXECUTABLE
    NAMES protoc
    DOC "The Google Protocol Buffers Compiler"
    HINTS ${PROTOBUF_ROOT}/bin
    PATHS
    ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release
    ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug
)
mark_as_advanced(PROTOBUF_PROTOC_EXECUTABLE)


include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(PROTOBUF DEFAULT_MSG
    PROTOBUF_LIBRARY PROTOBUF_INCLUDE_DIR)

if(PROTOBUF_FOUND)
    set(PROTOBUF_INCLUDE_DIRS ${PROTOBUF_INCLUDE_DIR})
endif()
