/*
 * University of Illinois Open Source License
 * Copyright 2012-2014 Roberts Group,
 * All rights reserved.
 *
 * Developed by: Roberts Group
 *               Johns Hopkins University
 *               http://biophysics.jhu.edu/roberts/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the Software), to deal with
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to
 * do so, subject to the following conditions:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimers.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimers in the documentation
 * and/or other materials provided with the distribution.
 *
 * - Neither the names of the Roberts Group, Johns Hopkins University,
 * nor the names of its contributors may be used to endorse or
 * promote products derived from this Software without specific prior written
 * permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS WITH THE SOFTWARE.
 *
 * Author(s): Max Klein
 */
//#include "lm/gtest.h"

//#include <google/protobuf/repeated_field.h>
//#include <stdio.h>
//#include <unistd.h>
//#include "gtest/gtest.h"
//#include "gmock/gmock.h"

//#include "lm/ffpilot/FFPilotPhaseZeroTrajectory.h"
//#include "lm/ffpilot/input/FFPilotInput.h"
//#include "lm/ffpilot/input/FFPilotStage.pb.h"
//#include "lm/io/sfile/LocalSFile.h"
//#include "lm/Math.h"

//#include <string>
//#include <vector>

//using std::string;
//using std::vector;

////const char* filenamesLiteralDwellTimes[] = {"genetic_toggle_switch_-_FFPilotPhaseZeroDwellTimes.sfile"};
//const char* filenamesLiteralDwellTimes[] = {TESTDATA_ROOT "/genetic_toggle_switch_-_ffpilot_limit_tracking_phase_zero.sfile"};
//const vector<string> filenamesDwellTimes(filenamesLiteralDwellTimes, filenamesLiteralDwellTimes+1);

////const int speciesCountsLiteral[] = {0,1,2,3,4,5,6};
////const vector<int> speciesCounts(speciesCountsLiteral, speciesCountsLiteral+7);

//const double timesLiteralDwellTimes[] = {22.9504,0.0520531,0.836873,1.33526,0.0736546,0.793419,0.04743,1.76235,0.217555,7.98045,39.5071,0.411721,0.33497,0.592921,0.543544,0.225495,0.2268,1.12347,0.891608,0.412779,102.424,0.614723,0.0391251,0.575975,0.525785,0.259614,0.0391425,15.7583,0.0342081,0.574697,1.36995,3.35079,13.8384,1.11854,0.0667046,10.2139,0.169496,6.00906,0.744269,169.027,12.2474,0.147175,0.117046,0.0979626,9.52442,0.207363,0.108166,10.2258,11.9062,0.508416,0.338466,44.2395,3.98344,6.26059,0.576624,0.0348724,0.200656,0.100901,0.152993,2.14043,3.19121,2.43985,0.524623,0.616212,2.43656,0.124682,1.49388,0.112376,0.642625,0.1227,0.908441,0.074314,2.64889,1.50848,0.101249,1.80335,5.17963,0.0356262,0.208373,16.1765,5.38011,5.87098,5.51836,2.39597,16.4247,5.29729,23.1655,1.45655,4.57003,0.0272667,0.188434,0.12805,0.268925,0.24794,5.35534,36.5966,0.319654,0.565327,47.4093,0.51351,0.22515,0.0613645,0.149922,3.07404,1.91514,0.268851,0.584212,47.6311,0.0121056,1.20006,0.0802434,0.105619,9.64271,0.450652,0.290618,0.793789,0.174507,25.1765,0.815768,0.143117,2.56793,11.9143,17.4954,2.61935,0.122344,0.102911,0.0593864,0.390222,0.532069,0.219754,0.181475,4.21176,9.32665,0.332165,0.167601,0.10388,1.03456,25.3617,3.04059,0.662991,0.115887,0.0306632,0.0978825,6.83001,0.340932,7.5633,2.61293,0.0416076,3.12284,24.0222,0.101105,17.3123,7.17759,1.13021,0.155514,0.119834,0.10923,0.265024,0.141222,0.0143652,0.41785,0.38443,1.45843,0.127607,0.244262,1.34427,3.48361,0.113261,0.0699935,0.0455546,0.185636,0.3856,0.552165,0.495319,0.0275253,1.07056,0.576203,0.204556,0.201502,0.199259,0.0301845,0.0655775,3.48459,0.415984,2.84388,16.7976,0.0416453,5.08531,2.17769,0.0398521,0.122446,0.443228,0.176994,1.72896,0.485688,72.3886,0.0420711,0.579256,0.392097,0.224901,0.0402639,3.42239,0.0102779,1.10419,8.93706,0.134831,2.11624,0.512219,6.32893,22.3391,59.3487,1.56402,0.340714,1.38857,82.0853,0.0550849,0.824407,6.3367,8.38847,0.554021,3.09124,0.183491,0.372307,1.87789,0.134586,0.101933,1.80366,0.0870697,1.81052,0.134912,0.0303916,0.269078,0.898357,0.740099,0.165671,14.719,0.0852434,1.3092,0.485233,0.0700863,0.915938,0.352437,0.143187,0.321442,7.76116,0.0792232,0.250717,0.149837,0.179883,0.144055,0.122103,0.513004,0.48535,0.0749575,56.7917,0.844927,0.683908,0.1979,84.5698,218.093,0.0390859,2.71976,27.47,0.0750093,0.579347,0.126553,0.280816,0.883711,1.2801,1.22765,0.792864,12.159,2.27903,0.143342,0.792549,5.7822,0.0695435,0.846282,0.0328938,0.168868,2.44996,11.0205,0.114683,0.134109,0.243754,2.3718,0.587643,0.0421101,7.00283,0.261935,1.78478,0.128812,0.578215,0.204904,0.0224041,4.27568,0.0976736,0.559532,0.182973,0.235638,2.14969,2.72377,0.0615775,0.0381952,0.0558334,1.91015,2.07639,0.0394249,0.391635,0.259588,0.130306,0.623402,0.128461,25.5596,0.573135,0.269846,0.112386,6.0945,9.71258,0.324986,0.155034,2.95353,0.20886,0.0618325,0.45114,0.0723558,35.0252,0.321593,2.0477,39.8824,0.108279,0.134345,0.0760686,0.0166611,0.465111,0.44976,0.923112,0.415317,0.164563,0.624847,0.0227109,0.0769524,2.02298,0.534739,0.0679302,0.69771,0.0875571,0.49313,0.76249,1.16374,0.0593737,0.406901,2.84396,1.89097,5.03493,0.0357716,0.629309,13.6556,0.20781,120.791,23.0297,0.677907,0.13292,0.888989,0.836857,0.0928167,5.87072,2.65336,0.433956,1.21349,2.27707,0.218682,0.85172,1.65844,0.938552,0.130645,19.8771,0.336126,1.86892,0.745926,4.08215,0.503309,0.059906,0.888118,1.08571,0.221651,0.147495,0.112293,0.0572052,0.194269,0.216702,0.22952,2.77321,0.257074,0.928673,0.0284735,0.37852,55.6169,0.610329,0.236491,0.0856894,57.8147,0.168947,0.110221,3.10763,4.8268,33.8859,1.05494,0.0739092,0.834651,0.151471,0.146545,0.101039,0.0690729,0.849545,0.350002,0.189411,0.23086,0.99839,0.560119,0.177859,0.177943,0.0800509,0.961433,16.0539,1.31221,0.378729,0.0840104,2.89941,0.711196,1.2858,1.45861,0.449298,35.4491,9.75718,0.145154,0.377218,0.186257,1.59939,1.52059,5.08675,0.422178,0.444947,0.115664,0.0658081,0.419987,0.246612,0.104654,35.1169,0.391762,16.4171,8.52689,0.948963,0.162019,0.0821249,2.23984,4.7478,0.0644665,0.46242,0.161855,0.125723,0.842195,4.95046,0.244378,0.154925,0.0915677,0.435694,2.28633,1.88537,0.284653,0.190158,1.77114,0.112842,1.13312,44.0833,1.34959,17.6252,0.232278,0.0944116,0.0444804,0.722074,0.160701,0.916706,0.947395,0.0447601,0.104545,9.0652,0.0949636,15.2974,3.57564,0.672277,0.120562,0.0745133,0.0584455,10.8594,0.628619,17.1833,0.374228,0.450256,0.0689594,0.686635,0.0992913,0.0396717,1.46154,0.288798,1.02378,0.221156,2.31583,0.146771,0.451694,5.5674,0.0772716,2.78059,0.5648,0.0810682,0.245827,19.5859,27.0839,1.37153,0.205633,1.72465,2.4324,0.237568,3.65186,0.474012,0.404316,0.244509,3.69774,0.753831,0.102663,21.6304,0.263019,26.7552,5.61915,0.271905,0.158574,0.177191,1.47823,24.7151,1.62927,0.03463,0.374703,0.301693,10.9376,0.373927,0.283323,1.16799,0.176913,0.64293,0.171611,0.229871,20.5692,0.788658,0.0790706,1.01689,0.683997,3.07398,0.164079,0.584768,0.053526,0.481155,0.00826114,5.6481,0.0159441,0.0958171,0.13299,0.37667,43.505,0.507224,0.373969,43.2693,9.91444,0.393266,0.0640848,0.121695,0.337094,0.836973,0.116503,0.780144,5.11015,0.352559,0.0701505,0.23388,0.0491981,0.101379,0.0663003,7.92566,72.3832,3.11924,0.168443,1.0464,2.57718,1.97283,1.83386,1.70892,0.178415,2.38217,0.189962,37.8649,0.507258,0.337854,0.160357,0.110714,0.206289,0.199899,0.506194,0.0923532,0.425417,0.75672,0.00783416,0.0141225,0.017254,30.6716,1.07567,12.1557,0.066086,1.60216,26.2407,1.25339,1.08172,0.191831,0.201651,0.336778,0.777316,0.0302874,0.149798,0.0807906,0.166995,9.12843,43.4027,0.0701418,9.91417,5.0502,0.418778,0.810462,0.836755,0.0908246,0.569217,0.211537,1.82961,0.156908,0.91403,0.698798,0.234167,0.309116,0.971225,3.23246,0.0152916,0.469168,0.0188851,16.0696,0.263718,26.7648,0.0221153,0.052012,0.423022,4.06526,2.08509,0.0793953,0.296262,0.0675323,1.42113,0.450956,2.70618,0.588814,0.708158,0.283766,15.4196,0.25168,0.0509195,0.620796,0.87504,0.292662,1.00378,3.32706,0.204993,0.638492,0.581286,0.116263,15.043,0.206579,0.217754,2.04516,0.459191,0.0859388,14.201,0.0452577,1.55709,0.601911,1.0918,0.056349,21.3095,0.828336,4.58872,0.344425,0.522255,12.5986,3.42256,16.9613,0.0479898,1.00393,2.70816,0.076096,0.1103,0.330779,1.28329,4.7376,16.5771,2.64002,0.138619,0.274369,0.0976904,0.309852,0.160218,1.08212,22.3627,0.645682,0.179251,0.156943,0.295135,0.236855,0.152377,0.0941417,0.321695,6.21015,0.349893,0.426446,16.0539,0.125599,0.402498,0.864187,1.56817,0.227603,1.14022,6.99937,0.0413127,3.42455,0.184846,0.283799,0.00714514,0.823651,0.409004,0.071935,83.0464,26.9826,5.00963,0.129723,0.152633,0.125517,23.2613,0.313642,6.70472,24.4436,0.19836,3.66621,0.943415,5.5588,4.8553,16.4662,0.236954,0.162553,3.04913,2.69337,8.12998,0.104076,0.763914,0.063366,0.293556,0.200409,0.0434446,1.09284,0.215662,0.122488,1.26956,1.32996,0.737131,50.9704,0.0255413,0.126439,0.304435,0.117675,0.0243822,0.0856094,0.347032,0.178924,3.68925,0.699423,0.155992,1.99433,0.456208,0.500852,0.277364,0.873042,0.105418,0.161392,0.442856,0.305937,0.722513,0.207492,43.1235,0.611034,0.283697,0.0894803,0.0800206,0.848231,32.1158,0.0651848,0.301855,3.32797,0.0320744,0.282137,0.193335,5.05696,1.86319,0.05195,0.400359,2.1744,0.0597568,0.49406,0.0822174,0.2537,6.7857,0.0525999,0.100399,0.252382,0.957963,2.39966,0.176699,0.05487,0.03388,16.4367,0.785495,16.5173,0.181771,0.639129,0.916071,0.262358,0.426624,0.801159,0.0243163,15.7716,2.15054,0.276683,7.95008,0.584438,0.0901046,0.223693,0.377244,1.49551,20.462,57.0886,0.227955,0.915317,14.879,0.338985,0.637212,0.987711,3.40562,0.211341,0.0243376,0.0710496,0.277917,1.14262,0.095899,1.08001,0.0406329,0.196058,0.435011,0.555529,18.9787,2.61774,0.433986,0.0914362,1.88836,0.0416267,43.5659,0.873806,0.0203291,0.33364,27.8375,90.9843,0.849405,0.251751,0.501473,0.0975306,22.7406,0.0715206,0.0675828,0.111573,2.12107,0.0239202,0.52629,0.0431071,0.554883,0.170706,0.340867,0.509445,0.225555,0.582797,48.815,6.17389,1.33418,1.48793,1.9892,5.03266,2.11438,0.237688,13.2767,0.279794,0.709751,0.999961,0.053469,0.188526,0.201553,3.08854,3.83109,0.434132,0.744288,14.08,0.556723,0.994961,0.0838541,0.452317,62.2831,0.0651756,0.366324,0.0849407,0.208245,0.0600773,0.159323,0.0683282,0.0422623,1.69925,22.9688,0.260384,0.107789,0.607795,1.52691,1.26045,8.4828,0.159176,0.255554,7.63455,0.0457307,0.0183191,0.764626,0.0619169,0.249225,0.261942,1.64969,0.164633,0.635841,0.210915,0.201845,2.51618,0.242281,2.18892,0.0926699,0.245281,0.0587851,0.215312,0.995596,1.17355,2.02118,0.713139,0.853762,0.131308,53.2298,1.97827,9.62257,0.461244,3.92542,0.0741553,0.393482,0.0362686,29.1059,0.0414265,59.3919,7.78832,1.90307,0.43336,29.5055,0.0430442,0.0713804,0.480536,2.78724,0.160255,0.221228,0.251164,0.604351,0.45751,0.214946,0.702156,3.09414,0.612801,0.0498525,0.0313578,0.282999,17.2898,0.0814987,0.300569,0.339853,0.685308,1.08553,0.264166,0.133998,1.63701,0.0426685,0.0461423,0.474178,1.61225,0.341972,0.352128,34.8667,0.898225,2.34598,1.49919,0.113233,0.0571552,0.0744159,0.25946,3.40331,17.7041,0.515592,0.326179,12.9514,0.152779,0.215414,7.47655,12.758,0.0204424,0.15253,10.6017,1.64816,1.12839,0.0250767,0.14157,0.102148,0.137567,0.478802,0.30764,18.6273,8.43301,0.285966,2.46118,4.18048,1.9884,0.523417,5.47241,0.461439,0.828387,0.3702,0.188841,8.47206,0.100604,0.0631242,0.480855,0.283953,7.09609,0.616056,0.156328,0.110004,0.421596,20.7412,3.03933,0.168356,0.158698,1.68864,0.0552623,0.0877029,2.23717,0.0483968,1.50696,0.292995,0.320845,0.194742,1.20702,0.260639,16.4513,0.0436261,0.373608,0.764879,1.12001,0.913163,0.577638,0.133527,0.144792,52.3236,6.28716,0.87489,22.0386,0.0462459,0.170864,3.83136,0.0621929,1.87051,0.274667,0.0418424,0.238489,0.064333,1.39262,0.0108936,0.200993,0.0430247,0.108877,0.0496558,3.75447,0.0952805,0.114505,1.87044,0.434453,0.583822,1.03925,0.157043,0.11272,0.757051,0.188518,9.58825,2.43566,0.371559,0.0643537,0.253853,0.214809,20.2114,0.887969,0.256871,2.40308,0.608712,0.150636,0.137747,0.207937,0.502896,0.101803,0.220614,0.0136904,0.483523,1.32773,0.32386,0.455823,0.177631,19.9841,1.76451,0.566493,0.733308,3.01001,1.24698,2.62429,0.17311,3.91046,0.00454674,0.446667,1.50054,0.323416,0.449662,3.0331,0.0917413,20.1019,0.0105618,0.526553,0.192532,3.06547,1.1233,0.0499086,0.0746509,0.0426361,0.201531,1.18401,0.0630305,10.55,6.81912,0.235496,0.315109,3.67667,0.9813,2.99126,1.54147,0.204865,0.0610479,0.729569,0.483736,0.381858,0.0715459,0.0898366,0.230914,0.421255,6.8374,1.73055,0.361785,0.189207,0.228457,25.5231,0.0526388,0.551131,3.47152,1.84206,0.156441,0.173532,0.191922,0.3807,1.73879,0.0252105,0.314127,0.0296761,0.119638,35.3926,0.173103,4.51913,10.9269,0.0788896,1.03293,0.434689,0.0679246,3.5955,0.458487,0.0396215,0.211054,66.8886,15.8693,0.0473308,0.728579,2.04363,0.213554,0.95019,0.139786,0.135029,1.65479,0.0875031,0.188419,3.61749,0.736934,0.213592,0.0745211,0.0273206,0.646953,1.30475,0.124945,1.12606,0.195229,0.404048,22.4424,0.51227,0.570076,0.251771,0.0597714,0.353109,0.146784,0.544188,0.423649,0.317503,0.520014,2.34475,1.05599,0.0318442,4.47097,0.229744,0.572305,1.05369,0.0507399,4.02304,0.202003,19.4466,2.41848,0.0864865,0.475923,1.19494,0.265943,0.0684799,4.49353,5.49816,0.0975888,0.0800672,0.0316834,0.0997341,0.907062,13.1641,0.55092,0.0278447,0.668759,0.0314066,13.955,0.447114,1.7011,0.0937913,0.0748337,0.369816,0.113416,1.28173,4.28886,29.3316,1.23168,0.0790422,0.193285,0.0920679,6.47831,0.306828,1.28396,1.53309,0.206497,0.63096,2.39134,0.511404,8.3268,0.152186,9.67616,0.0855193,0.0924042,1.10239,2.27446,0.33208,2.57028,28.4001,1.92978,45.498,2.8539,0.324795,0.0764718,2.56456,0.111313,1.05983,0.664192,5.71916,0.299513,1.48254,1.04962,39.5711,1.06399,40.4586,0.207241,0.242594,5.1456,0.229108,0.721885,0.224534,2.46044,1.40919,0.153315,0.0767417,0.647138,0.447302,0.0417386,8.05601,0.038706,4.74288,2.72572,0.427084,0.0912386,62.7142,11.4956,0.339957,4.47668,1.30034,0.144015,0.292648,0.810486,0.0688608,0.250652,25.6248,4.59396,0.492628,4.30747,0.0263494,0.0432733,0.0888219,0.0185839,7.01189,0.0312953,0.0360458,0.148782,0.152233,0.662522,0.0330997,0.970224,0.0310586,0.127342,62.4512,105.718,0.370852,0.285267,12.176,0.125155,1.84357,0.453872,0.114087,0.652849,1.48526,0.789393,0.0280105,0.332999,0.174294,0.175102,6.09204,0.15423,0.244529,0.699417,0.85741,0.404596,0.190602,0.0614747,0.156372,0.11131,0.796924,0.199026,3.2239,0.135897,0.3915,0.643233,0.0885716,53.2657,0.0563771,0.150385,0.327827,0.26383,1.25763,0.075873,3.27752,3.91766,0.313391,0.473494,0.188822,0.945204,0.225167,0.185479,0.0917246,0.171629,0.0145333,1.70773,0.620092,0.501052,0.0330295,0.130924,0.106515,1.13786,45.0545,0.190857,2.65141,0.406378,2.64658,2.18885,2.09736,2.1509,10.3419,2.57498,0.896868,3.0063,0.365472,9.49475,64.6891,6.7491,40.155,22.6582,7.72241,57.3833,1.91233,1.35036,43.5444,0.137275,0.617626,0.729805,0.745563,0.162057,1.2766,0.176981,1.46231,0.114309,0.0259983,0.0711376,0.128169,0.140908,48.3634,0.0253154,0.129264,1.09013,0.192842,0.0551869,0.412246,1.52976,0.488208,2.34061,0.647722,0.0392778,0.184672,0.0467253,0.0331918,0.0133559,18.3277,0.113596,0.187246,0.0864212,0.998396,0.154754,0.130213,0.144317,0.116064,0.176272,0.206075,1.2179,0.188451,92.428,2.84173,0.0908673,0.708843,0.800158,0.207181,0.220757,0.807941,35.4406,11.071,0.0660936,0.145225,0.436861,0.0777634,0.412338,0.444585,0.0225674,64.1086,0.110573,0.0239953,0.0332157,0.0630993,0.768288,0.120125,0.82668,0.126467,1.46048,1.48797,0.0916006,0.742548,0.393218,27.8186,0.305908,7.07993,3.21434,0.146179,0.604406,0.54945,1.78439,3.14914,5.58558,0.289155,0.973214,3.10478,0.119659,0.52529,0.046296,1.02618,0.304393,0.162228,1.31623,39.0584,0.210536,5.10088,0.167009,0.298646,10.9995,0.191668,0.47429,0.216252,0.288893,0.253578,3.6809,0.150363,0.287423,6.34825,2.20006,0.957276,1.35177,17.9703,2.20442,0.385786,0.427876,9.36555,0.0238352,24.6075,3.02364,17.3074,1.72012,0.526114,0.398372,2.53286,0.687791,0.104804,3.14261,0.0792283,9.37535,1.74272,0.324608,3.79884,0.220526,0.160534,25.4323,36.276,0.431669,0.239629,0.0339882,0.0123495,2.37562,0.108843,3.4408,0.073556,0.110415,0.0422951,2.61114,1.79188,1.54442,0.85798,11.9312,0.477079,1.90599,0.425292,1.03057,1.07403,1.90395,0.236204,0.0898129,3.51265,0.452782,0.235587,1.9822,0.211216,0.29895,0.101672,1.4489,0.237853,6.53942,0.0288732,1.10271,0.854627,0.822092,0.183944,0.683406,4.60253,0.321489,1.68611,0.162079,0.106099,3.29783,0.153461,10.385,1.04839,0.369356,0.642968,0.216471,0.515609,0.361223,2.69848,2.47648,3.49373,32.3689,0.641514,0.148525,1.33045,0.429842,0.215426,0.0652983,0.0894416,0.4358,0.159545,0.172827,0.219032,0.387177,0.191693,0.190877,0.172437,0.260753,0.0598554,0.718226,0.175548,0.621674,1.021,0.210781,62.9805,0.037392,10.4535,0.217083,29.4535,0.69852,0.426565,1.25334,17.9128,0.253506,0.28954,1.4359,0.108415,22.1053,2.5196,1.38089,0.30177,119.203,0.088957,1.93381,0.518927,0.0464395,0.0864573,0.148162,0.0648109,2.7323,26.9295,0.198539,6.15981,0.153916,0.142996,0.0196406,0.10207,0.29135,9.97998,0.300485,0.134946,0.767989,8.42406,0.138147,0.469785,0.259139,0.127805,0.0551611,0.864696,0.103656,0.923414,0.234368,0.0311344,6.76991,1.5175,2.8705,4.99094,0.142975,0.167239,0.0433735,33.7487,1.7864,6.12919,0.0154404,0.0885391,0.646695,1.76857,0.864568,0.62084,0.632315,0.732998,0.0927605,0.0547787,0.244155,0.303928,0.360227,0.476968,1.23886,0.0313395,0.0470262,0.0281697,1.19664,6.0798,18.7414,0.101683,0.0479422,0.00632947,1.19236,2.02393,5.03953,1.80593,0.542146,0.88964,5.21815,0.202731,0.556632,0.292879,0.416303,0.517476,0.151775,0.0660209,0.220352,0.328265,1.50206,0.111563,0.419069,0.154201,0.373775,1.78962,4.57112,0.0970978,3.50833,0.135313,0.0725041,0.995755,0.240417,0.124813,0.975498,0.2092,0.0671254,0.209908,0.166361,0.267103,0.0741665,0.026086,1.29971,13.7652,0.272008,0.701393,0.496134,0.151879,0.184807,0.185609,0.11888,1.02706,0.187601,22.1087,2.11634,0.342926,0.0840378,2.69589,0.308483,0.636329,63.3488,0.164247,2.59266,0.120298,2.24589,2.313,72.5653,0.141378,0.274055,0.147479,0.954119,0.218347,0.675993,0.094305,0.0801478,5.42174,0.871264,0.0606895,12.2653,0.635521,0.559609,19.9294,19.3977,0.0130864,0.0256923,0.793068,0.207578,0.249493,0.199691,0.390066,1.68161,22.5973,0.0734676,1.88429,0.227267,0.57195,0.299708,20.2561,1.09079,12.9483,0.081248,0.178478,0.396434,1.22356,1.02347,0.23648,0.294005,0.79827,1.20204,0.277309,0.140958,0.106964,0.528341,0.12315,0.0635969,0.128516,8.13126,1.13504,0.245495,0.354558,1.5669,0.845616,23.6866,1.03228,1.03712,1.05725,23.3507,0.264499,20.5105,0.0982118,0.155755,0.18384,0.0948977,0.166583,2.29597,1.36363,0.634553,27.018,0.292846,0.957683,2.21939,0.124919,0.651853,34.458,0.369678,5.52542,0.0507076,0.0807659,0.623015,0.601994,1.26756,0.679949,0.223236,0.380578,1.43283,0.217559,0.0640571,0.415376,20.1739,0.0601413,1.72356,1.74244,1.27071,1.96664,11.1472,0.174094,0.244605,2.41911,0.0805185,0.168934,0.0784559,10.7042,0.839106,0.0678543,0.142038,0.175494,0.445472,5.96984,2.52096,0.161616,1.90123,0.0287024,0.478417,0.291412,2.7867,0.260574,0.0305669,0.118618,1.76918,0.918587,0.0384361,45.8184,25.9669,2.27801,0.286762,0.316323,1.01655,0.0289813,1.36424,0.297283,0.0256285,50.3298,4.36879,2.03977,0.23966,0.614933,0.0543614,24.1905,0.181258,0.468864,0.350064,0.25408,0.0805857,0.138246,38.9891,11.7641,0.211613,0.315621,0.188539,5.78069,0.989229,4.49209,2.43361,1.13148,3.88948,0.40684,0.0530693,6.83757,10.3253,27.0697,0.056386,0.210135,2.57,2.35087,3.8973,0.133074,0.121316,0.542962,0.244145,0.225694,0.487028,0.412519,0.563009,0.0268926,0.14918,0.252687,0.46028,0.769863,1.11838,0.58238,32.5232,0.527395,0.160138,0.0796929,0.160461,1.01154,0.128873,0.584922,0.0578642,2.41555,0.172009,1.83207,4.00441,0.142088,13.1492,1.18348,0.783542,0.22641,1.03702,0.228489,7.23166,0.215191,0.0584295,0.0688388,0.743789,4.33895,0.454603,0.261923,0.18461,66.7959,0.305014,62.2971,0.759698,0.474738,12.1241,52.87,0.0229628,0.155966,0.591285,0.324915,0.296512,0.581257,0.163003,0.540931,2.01729,4.98306,0.340033,0.155481,2.12941,0.124026,0.0831954,9.35741,1.34852,0.0650445,0.42904,0.065386,1.39612,0.259348,5.35838,2.25261,0.0471338,0.317253,2.1952,0.716013,0.216463,0.214917,1.20345,0.242043,1.47386,1.3331,0.512734,0.0292901,0.0314552,0.159059,0.177006,0.393711,0.115254,141.453,0.0855115,0.507797,110.514,0.0421033,0.122693,4.87074,0.0576999,1.23846,5.27481,1.425,0.0672855,0.274241,0.0105045,39.9985,0.134347,0.756203,1.32183,1.28055,0.201178,0.0931528,0.481327,29.0325,5.08569,13.0117,0.182645,1.00509,0.509573,1.31169,2.01109,0.470262,0.516117,0.824116,0.575414,0.691311,0.107989,0.815936,0.857911,0.59956,11.7499,17.3595,22.9217,2.69421,0.319348,1.17059,0.136394,0.589033,0.706286,0.0574057,0.23643,0.10382,0.189381,1.02744,2.04141,0.0380254,0.351657,0.0867986,0.197151,3.72187,0.192484,35.1282,1.26798,0.173367,13.7601,0.046055,0.358019,2.48836,0.370585,0.391087,0.0565055,6.75845,0.15724,0.0648451,0.0714846,0.125911,51.936,0.0239744,4.70831,0.0913475,14.7089,0.404138,0.0647347,1.47984,5.03096,0.129036,0.79086,0.0313189,2.00087,1.15334,0.163352,0.266176,0.0164823,20.6221,0.0720758,0.208875,18.4031,0.0689191,0.648096,0.989994,0.367744,17.3381,0.0627388,9.31237,0.0699102,30.4766,0.124386,0.0932297,0.0506103,11.9557,4.20049,0.218653,0.185201,0.430324,0.141038,13.1494,1.53356,0.375235,0.0394857,0.419389,0.171611,1.25546,0.00686134,0.00807334,57.2057,0.713004,0.736847,0.0146,0.0441736,0.0807739,2.05716,0.755517,3.32014,0.143642,18.4482,0.213763,12.4169,0.11194,4.99735,0.090436,0.26714,26.2965,0.377075,1.30321,0.390314,0.0907371,0.18965,0.329103,6.93716,0.073652,0.146691,0.0526958,14.7576,0.144769,0.131786,3.36593,8.93911,21.1188,0.0400599,0.27991,0.159742,1.28395,0.0895304,0.0533518,3.04944,0.290053,0.0769609,9.59844,0.312552,0.427731,1.18498,1.57713,0.194533,1.51258,4.11599,0.0570224,0.114171,0.102339,1.6465,0.410237,0.165745,0.323073,0.060035,0.12879,0.0950852,2.61332,0.279127,67.3897,0.632875,0.190715,0.957619,0.152161,0.362387,0.108653,1.2504,4.30191,0.0583672,0.0156264,0.125043,0.204832,1.12894,3.12387,0.288824,0.0654793,0.12403,0.287797,0.447023,0.112811,0.13688,0.0353227,3.33961,0.213477,4.15719,0.114137,59.596,0.111239,7.34033,3.34424,1.30562,14.8737,0.356918,0.906403,3.32743,0.280938,0.130434,0.081772,0.0206544,0.810432,0.35621,0.123921,0.183729,0.280842,3.3777,0.286112,0.756597,0.04052,0.225542,0.0904015,0.706058,0.0519408,0.414027,11.288,0.469499,0.202155,2.27282,0.746356,0.914001,0.0881797,0.284413,0.0755735,35.265,0.123349,0.163713,0.428499,0.152361,15.7674,132.42,56.4806,3.46017,0.379834,1.43567,0.415769,0.475308,0.309744,0.467346,0.116541,2.28398,0.357653,0.0989663,0.0413142,1.41725,21.4292,1.23558,2.12674,18.4281,0.130925,0.410475,0.267263,0.209381,0.966549,0.981803,0.0806883,0.409897,0.227559,0.286461,0.124594,0.546414,10.9744,16.9469,0.121515,0.708988,0.0875224,1.18923,1.0112,0.00311517,0.0823786,5.71164,0.739304,0.65782,2.06177,11.11,1.22255,0.400073,0.240944,0.97295,0.396763,0.637186,0.307953,0.573659,0.221122,0.126376,0.221647,0.187767,0.791191,0.207516,4.24086,0.151082,1.08368,1.75484,2.30637,0.706908,0.287765,0.047495,3.03222,127.453,0.0463435,4.0183,0.0462212,0.212449,1.28736,10.22,0.802544,0.87984,3.00801,0.166365,0.095779,17.2893,1.4896,0.0639244,0.230897,0.629289,0.428193,78.8674,0.645029,0.137717,7.82992,0.870424,0.211078,0.275705,0.961111,1.83212,0.550557,0.202439,0.913185,0.624859,0.34967,0.0675487,0.34952,0.314188,0.111526,1.96968,0.458646,6.24457,1.25787,39.4237,0.031109,15.6265,2.26216,0.0407706,0.248735,0.171619,10.7557,33.7565,0.316549,2.3772,51.3445,0.196143,9.22339,1.02713,0.25407,0.495397,0.11202,0.0732051,6.91284,0.218899,0.33404,31.7105,0.241799,0.174883,0.872121,6.65165,0.108207,0.0972765,4.14593,2.67058,0.180764,14.143,1.95139,0.984353,0.0940708,10.9391,0.37019,7.46675,0.423721,0.424271,12.6197,0.177034,1.38306,51.3887,0.10951,0.481382,9.06302,0.0677598,0.170462,0.125708,0.513889,29.7242,1.54947,0.214887,0.0376853,0.978528,0.0926776,1.24567,0.0845266,0.0762322,1.27127,103.97,4.26932,0.145781,18.3149,0.249698,2.07711,0.168672,0.25486,0.134926,0.330231,0.0462255,0.0826007,2.54961,0.0894985,0.410599,0.422454,32.3407,0.117987,0.269191,0.454772,2.2476,0.929931,7.80975,29.4968,13.6747,3.44175,0.86572,0.0465795,3.97223,0.225782,5.76311,0.306068,0.204298,0.333825,0.613341,0.1684,23.5323,0.138286,2.17049,0.334493,1.95785,0.122708,2.2298,0.383721,1.15507,0.113014,0.412279,0.461364,46.8921,0.391459,9.60388,18.7001,2.98906,2.5172,113.107,0.759125,12.7367,0.140861,1.43273,6.28934,0.0579251,25.043,0.267299,32.0919,2.83591,0.10714,2.82536,0.26787,0.0445037,0.36063,4.61128,0.610482,0.501528,0.212018,0.0615617,0.0311828,40.9706,0.769191,0.0911394,1.88693,0.114123,1.66127,1.1691,1.71087,0.935915,42.3175,2.73175,2.38362,0.208616,0.794566,0.453628,0.352249,0.0348326,0.446685,0.111716,143.477,0.868726,0.748262,0.876012,15.6185,0.306396,6.70485,1.8746,0.565549,0.390046,0.533247,3.76067,0.189665,1.18004,0.313755,0.248741,0.628201,0.406387,0.0294904,14.6385,0.677814,0.185012,43.027,0.246861,0.152869,0.654709,1.62653,0.520445,3.36129,76.5693,0.117578,0.38903,104.212,0.14992,3.57725,1.01192,0.0680157,1.26792,1.31882,0.252757,0.363763,0.227759,6.77924,61.3201,0.0774418,10.0208,44.8786,0.0570581,0.525372,0.438838,0.640139,0.311611,0.562033,0.09005,1.28989,0.416733,0.0586812,0.0979435,0.10646,0.241514,0.256364,0.86016,0.805739,0.101897,0.183461,0.154699,0.739829,3.64246,0.175221,7.58424,0.638919,0.0495225,2.08334,0.416965,0.511972,47.5432,1.02416,0.225214,0.373489,38.5563,8.57379,0.0779239,0.0566147,0.986072,0.00492301,0.245759,1.22419,6.93722,4.32382,1.06027,0.403817,2.03021,3.28433,0.217546,0.0214009,1.14427,0.0858772,0.278852,0.0976531,0.366664,0.180542,17.5772,5.97641,0.380981,0.279906,0.127845,0.0580629,0.1701,1.191,0.100491,1.99345,1.14896,0.213823,0.424582,9.14535,2.4115,0.347902,0.0041404,0.33355,0.442751,0.192362,1.59796,0.0182148,1.27696,1.05969,0.357157,0.0945065,0.545754,0.509196,0.0294203,0.718298,0.197928,0.462164,0.0832868,0.10001,0.0926186,14.374,0.147237,2.6783,0.85338,0.653775,0.124442,1.35411,0.672673,0.466706,0.756735,0.105043,19.6348,0.0467973,4.38475,1.46871,0.444302,0.013709,0.580097,9.75366,0.0874763,1.66162,0.899362,0.00755014,0.0790429,0.123032,0.11497,0.0669865,0.212099,8.91155,1.67488,49.0769,20.3964,0.459562,3.71808,0.115443,0.0629237,0.473648,0.177768,1.83291,0.00108222,1.59379,8.59061,0.205915};
//const vector<double> intendedDwellTimes(timesLiteralDwellTimes, timesLiteralDwellTimes+2775);

//class LimitTrackingsLoader
//{
//public:
//    LimitTrackingsLoader(const vector<string>& filenames): filenames(filenames)
//    {
//        for (int i=0; i<filenames.size(); i++)
//        {
//            // See if the file is an SFile.
//            lm::io::sfile::LocalSFile sfile(filenames[i]);
//            if(sfile.exists() && sfile.isFile() && sfile.isSFile())
//            {
//                // Read the input from the sfile.
//                sfile.openRead();
//                sfile.readAllMessages(&limitTrackings);
//                sfile.close();
//            }
//        }
//    }

//    vector<string> filenames;
//    google::protobuf::RepeatedPtrField<lm::io::LimitTracking> limitTrackings;
//};

//class FFPilotPhaseZeroTrajectoryFixture: public ::testing::Test
//{
//public:
//    FFPilotPhaseZeroTrajectoryFixture(): initialWaitingTime(0),ltLoader(filenamesDwellTimes),previousEvent(lm::ffpilot::BASIN_ENTRY, 0)
//    {
////        printCWD();
//    }

//public:
//    double initialWaitingTime;
//    LimitTrackingsLoader ltLoader;
//    lm::ffpilot::Event previousEvent;
////    lm::ffpilot::FFPilotPhaseZeroTrajectory ffpilotPhaseZeroTrajectory;

//    // streaming variance of the waiting time in between interface 0 forward crossing events
//    std::vector<double> waitingTimes;
//    StreamingVariance waitingTimeSV;

//protected:
//    lm::protowrap::Repeated<lm::io::LimitTracking> limitTrackingsWrap;
//    lm::protowrap::NDArray<double> timeWrapForwardFlux, timeWrapBasinEntry, timeWrapBasinExit;

//};

///*
// * - tests the collection of static functions in FFPilotPhaseZeroTrajectory that are responsible for turning streaming LimitTracking outputs into dwell times
// *     - specifically, this test validates the individual dwell time values
// */
//TEST_F(FFPilotPhaseZeroTrajectoryFixture, getDwellTimes_static_test)
//{
//    // set wrapper on the limit_trackings field
//    limitTrackingsWrap.setWrappedField(ltLoader.limitTrackings);

//    int i = 0;
//    for (;i<limitTrackingsWrap.size();i++)
//    {
//        // trajectory 65 is from phase 0 in the production stage
//        if (limitTrackingsWrap.Get(i).trajectory_id()==65) // || limitTrackingsWrap.Get(i).trajectory_id()==153 || limitTrackingsWrap.Get(i).trajectory_id()==154 || limitTrackingsWrap.Get(i).trajectory_id()==155)
//        {
//            // set wrappers on the ndarrays with the limit-triggering times
//            timeWrapForwardFlux.setWrappedMsg(limitTrackingsWrap.Get(i++).times());
//            timeWrapBasinEntry.setWrappedMsg(limitTrackingsWrap.Get(i++).times());
//            timeWrapBasinExit.setWrappedMsg(limitTrackingsWrap.Get(i).times());

//            if (timeWrapForwardFlux.size() > 0 or timeWrapBasinEntry.size() > 0 or timeWrapBasinExit.size() > 0)
//            {
//                double *fluxTimes, *fluxTimesEnd, *entryTimes, *entryTimesEnd, *exitTimes, *exitTimesEnd;
//                fluxTimes = timeWrapForwardFlux.get_data(true);
//                fluxTimesEnd = fluxTimes +  timeWrapForwardFlux.size();
//                entryTimes = timeWrapBasinEntry.get_data(true);
//                entryTimesEnd = entryTimes +  timeWrapBasinEntry.size();
//                exitTimes = timeWrapBasinExit.get_data(true);
//                exitTimesEnd = exitTimes +  timeWrapBasinExit.size();

//                // accumulate all of the dwell times into waitingTimes
//                initialWaitingTime = lm::ffpilot::FFPilotPhaseZeroTrajectory::getWaitingTimes(initialWaitingTime, &previousEvent, &waitingTimes, fluxTimes, fluxTimesEnd, entryTimes, entryTimesEnd, exitTimes, exitTimesEnd);

//                if (timeWrapBasinEntry.compressed_deflate()) delete[] entryTimes;
//                if (timeWrapBasinEntry.compressed_deflate()) delete[] entryTimes;
//                if (timeWrapBasinExit.compressed_deflate()) delete[] exitTimes;
//            }
//        }
//    }

//    // check that the number of dwell times processed is correct
//    EXPECT_EQ(2775, waitingTimes.size());

//    // check the value of each separate dwell time
//    for (int i=0;i<2775;i++)
//    {
//        // the error tolerance is a little weird since the values were printed with %.6g (ie 1e-6 relative tolerance), but EXPECT_NEAR takes only absolute tolerances
//        EXPECT_NEAR(intendedDwellTimes[i], waitingTimes[i], 5e-4);
//    }
//}

///*
// * - tests the collection of static functions in FFPilotPhaseZeroTrajectory that are responsible for turning streaming LimitTracking outputs into dwell times
// *     - specifically, this test validates the dwell time variance calculations
// *     - in particular, tests the tricky streaming variance combination algorithm
// */
//TEST_F(FFPilotPhaseZeroTrajectoryFixture, variances_static_test)
//{
//    double initialWaitingTime_0(0), initialWaitingTime_1(0);
//    lm::ffpilot::Event previousEvent_0(lm::ffpilot::BASIN_ENTRY, 0), previousEvent_1(lm::ffpilot::BASIN_ENTRY, 0);
//    StreamingVariance waitingTimeSV_0, waitingTimeSV_1, waitingTimeSV_2;

//    // set wrapper on the limit_trackings field
//    limitTrackingsWrap.setWrappedField(ltLoader.limitTrackings);

//    int i = 0;
//    for (;i<limitTrackingsWrap.size();i++)
//    {
//        // trajectory 65 is from phase 0 in the production stage
//        if (limitTrackingsWrap.Get(i).trajectory_id()==65)
//        {
//            // set wrappers on the ndarrays with the limit-triggering times
//            timeWrapForwardFlux.setWrappedMsg(limitTrackingsWrap.Get(i++).times());
//            timeWrapBasinEntry.setWrappedMsg(limitTrackingsWrap.Get(i++).times());
//            timeWrapBasinExit.setWrappedMsg(limitTrackingsWrap.Get(i).times());

//            if (timeWrapForwardFlux.size() > 0 or timeWrapBasinEntry.size() > 0 or timeWrapBasinExit.size() > 0)
//            {
//                double *fluxTimes, *fluxTimesEnd, *entryTimes, *entryTimesEnd, *exitTimes, *exitTimesEnd;
//                fluxTimes = timeWrapForwardFlux.get_data(true);
//                fluxTimesEnd = fluxTimes +  timeWrapForwardFlux.size();
//                entryTimes = timeWrapBasinEntry.get_data(true);
//                entryTimesEnd = entryTimes +  timeWrapBasinEntry.size();
//                exitTimes = timeWrapBasinExit.get_data(true);
//                exitTimesEnd = exitTimes +  timeWrapBasinExit.size();

//                // accumulate all of the dwell times into waitingTimeSV_0
//                initialWaitingTime = lm::ffpilot::FFPilotPhaseZeroTrajectory::getWaitingTimes(initialWaitingTime_1, &previousEvent_1, &waitingTimeSV_0, fluxTimes, fluxTimesEnd, entryTimes, entryTimesEnd, exitTimes, exitTimesEnd);

//                // accumulate half of the dwell times into waitingTimeSV_1 and half into waitingTimeSV_2
//                if (i % 2 == 0)
//                {
//                    initialWaitingTime = lm::ffpilot::FFPilotPhaseZeroTrajectory::getWaitingTimes(initialWaitingTime_0, &previousEvent_0, &waitingTimeSV_1, fluxTimes, fluxTimesEnd, entryTimes, entryTimesEnd, exitTimes, exitTimesEnd);
//                }
//                else
//                {
//                    initialWaitingTime = lm::ffpilot::FFPilotPhaseZeroTrajectory::getWaitingTimes(initialWaitingTime_0, &previousEvent_0, &waitingTimeSV_2, fluxTimes, fluxTimesEnd, entryTimes, entryTimesEnd, exitTimes, exitTimesEnd);
//                }

//                if (timeWrapBasinEntry.compressed_deflate()) delete[] entryTimes;
//                if (timeWrapBasinEntry.compressed_deflate()) delete[] entryTimes;
//                if (timeWrapBasinExit.compressed_deflate()) delete[] exitTimes;
//            }
//        }
//    }

//    // combine the streaming variances
//    waitingTimeSV_1 += waitingTimeSV_2;

//    // check that the straightforward accumulation of dwell times works as expected
//    EXPECT_NEAR(189.39343195058274, waitingTimeSV_0.variance(), absolute_tolerance);

//    // check that accumulating dwell times into separate StreamingVariance objects and then combining them works as expected
//    EXPECT_NEAR(189.39343195058274, waitingTimeSV_1.variance(), absolute_tolerance);

//    // double check that accumulate vs accumulate/combine both produce the same result for the dwell time variance
//    EXPECT_NEAR(waitingTimeSV_0.variance(), waitingTimeSV_1.variance(), absolute_tolerance);
//}
